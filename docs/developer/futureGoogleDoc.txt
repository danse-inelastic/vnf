Documentation for VNF:

Opal


General structure
Opal is a pyre application built from pyre components.  It's chief class, WebApplication.py, inherits from CGI.py, which inherits from pyre.applications.Script.py.  CGI.py takes care of parsing CGI input/output while WebApplication.py coordinates all the parts of opal including actors, portlets, forms, pages, etc.  Actor.py represents a type of html page: 

from pyre.components.Component import Component


class Actor(Component):


    def perform(self, director, routine=None):
        """construct an actual page by invoking the requested routine"""

        if routine is None:
            routine = "default"

        try:
            behavior = self.__getattribute__(routine)
        except AttributeError:
            self._info.log("routine '%s' is not yet implemented" % routine)
            behavior = self.nyi

        try:
            page = behavior(director)
        except TypeError, err:
            self._info.log("routine '%s' is not implemented correctly" % routine)
            import traceback
            self._debug.log( traceback.format_exc() )
            page = self.error(director)

        return page


    def error(self, director):
        """notify the user that a routine is not implemented correctly"""
        page = director.retrievePage("error")
        return page


    def nyi(self, director):
        """notify the user that the requested routine is not yet implemented"""
        page = director.retrievePage("nyi")
        return page


    def __init__(self, name):
        super(Actor, self).__init__(name, facility='actor')
        self.routine = None
        return

It's chief method, def perform, is called by WebApplication.py after CGI input is parsed.  CGI input will generally indicate which actor is to be used with an actor=greet key/value pair.  As seen in this pair, Actor is not called directly but rather through an odb file such as greet.odb:

from vnf.components.Greeter import Greeter

def actor():
    return Greeter()

Actors also generally call pages which contain boilerplate code.  Pages are also odb files.  An example is greet.odb below:
def page(app):
    import os
    import vnf.content

    # create the page
    page = vnf.content.page(name='greet', title="Virtual Neutron Facility", root=app.home)
    
    # build the body
    body = page.body()

    # build the header
    header = body.pageHeader()

    sentry = app.sentry
    ticket = sentry.authenticate()

    href = '%s?actor=greet&sentry.username=%s&sentry.ticket=%s' % (
        app.cgihome, app.sentry.username, app.sentry.ticket)
    header.logo(href=href)
    header.personalTools()

    # build the client area
    content = body.pageContent()
    left = content.leftColumn()
    main = content.main()
    right = content.rightColumn()

    # populate the left column
    nav = app.retrievePortlet("navigation")
    if nav:
        left.add(nav)
        
    # populate the right column
    news = right.portlet(title="News")

    # build the footer
    footer = body.pageFooter()
    from opal.content.Paragraph import Paragraph
    p = Paragraph()
    p.text = [ 'Copyright (C) 2008 California Institute of Technology. All rights reserved.' ]
    footer.add( p )

    # build the credits
    credits = body.pageCredits()
    p = credits.paragraph(cls="discreet")
    p.text = [
        "powered by opal"
        ]
    
    return page


from vnf.weaver import action_link
from vnf.content import actionRequireAuthentication

Because pages and actors both have the same name, they are kept in separate directories under content/, such as content/pages/ and content/actors/. 

 
To use opal one should extend Actor to create a certain type of html page.  An example is Greeter shown below:



from Actor import Actor, action_link, actionRequireAuthentication, AuthenticationError


class Greeter(Actor):

    class Inventory(Actor.Inventory):

        import pyre.inventory

        pass # end of Inventory


    def default(self, director):
        try:
            page = director.retrieveSecurePage( 'greet' )
        except AuthenticationError, error:
            return error.page

        main = page._body._content._main

        # populate the main column
        username = director.sentry.username
        userrecord = director.clerk.getUser( username )
        fullname = userrecord.fullname
        title = 'Welcome to the Virtual Neutron Facility, %s!' % (
            fullname,),
        document = main.document(title=title)
        
        p = document.paragraph()
        action = actionRequireAuthentication(
            actor = 'neutronexperiment', sentry = director.sentry,
            label = 'run virtual neutron experiments', routine = 'default',
            )
        link = action_link( action, director.cgihome )
        p.text = [
            'In this web service facility, you can %s. ' % link,
            'In a virtual neutron experiment, ',
            'virtual neutrons are generated from a virtual neutron moderator,',
            'guided by virtual neutron guides,',
            'scattered by a virtual sample and sample environment,',
            'and intercepted by detectors.',
            ]

        p = document.paragraph()
        action = actionRequireAuthentication(
            actor = 'instrument', sentry = director.sentry,
            label = 'neutron instruments', routine = 'listall',
            )
        link = action_link( action, director.cgihome )
        p.text = [
            'You can do your experiments on a variety of %s,' % link,
            'both actual physical instruments and conceptual, nonphysical instruments'
            ]

        p = document.paragraph()
        action = actionRequireAuthentication(
            actor = 'scatteringKernel', sentry = director.sentry,
            label = 'scattering kernels', routine = 'default',
            )
        link = action_link( action, director.cgihome )
        p.text = [
            'You can also create your sample and predict its neutron',
            'scattering properties by calculating its structure or dynamics.',
            'For example, the material behaviors calculated by ab initio'
            'or molecular dynamics methods become',
            '%s that can be used in the sample simulation' % link,
            'part of your virtual experiment.',
            ]

        p = document.paragraph()
        p.text = [
            'On the left, several menu items link to a variety of',
            'functions.',
            'You can review past experiments by clicking "Experiments",',
            'or browse your personal library of sample assemblies by',
            'clicking "Sample Assemblies".',
            'Neutron instruments in which you can run your experiments',
            'are accessible through "Instruments".',
            'When you start a virtual experiment, or a material',
            'simulation, they became jobs submitted to computing',
            'resources. You can monitor their progress by clicking',
            '"Jobs".',
            ]

        p = document.paragraph()
        email = '<a href="mailto:danse-inelastic@cacr.caltech.edu">us</a>'
        p.text = [
            'We welcome your comments on this web service, ',
            'suggestions for new features, and reports of',
            'discrepancies or bugs.'
            ]

        return page


    def __init__(self, name=None):
        if name is None:
            name = "greet"
        super(Greeter, self).__init__(name)
        return


Note the html entities such as page, document, paragraph.  These html entities are contained in opal.content and are converted into html by weaver visitor classes contained in opal.weaver (using the visitor pattern).  An example is opal.content.Paragraph.py:

from Element import Element


class Paragraph(Element):


    def identify(self, inspector):
        return inspector.onParagraph(self)


    def __init__(self, **kwds):
        Element.__init__(self, 'p', **kwds)

        self.text = []
        return

and the onParagraph method of opal.weaver.ContentMill.py:

class ContentMill(object):


    def onLiteral(self, literal):
        return [ "\n".join(literal.text) ]


    def onParagraph(self, p):
        text = [ self.tagger.onElementBegin(p) ]
        text += p.text
        text.append(self.tagger.onElementEnd(p))
        return text


This happens after WebApplication.py calls the actor's perform method when it call its own render(page) method while passing the page actor returns. The render method then call's PageMill.py's weave(page) method.
