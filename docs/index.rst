.. VNF documentation master file, created by
   sphinx-quickstart on Mon Nov  2 16:42:52 2009.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

VNF: Virtual Neutron Facility
===============================
Virtual Neutron Facility provides users easy, integrated access
to computing tools for end-to-end simulation of neutron experiments.


Links
-----

Getting started
"""""""""""""""

.. * :ref:`Overview <vnfoverview>` 

.. UserGuide.rst: this is where we put screenshots, etc.
* :ref:`Web portal guide <vnfuserguide>`
.. scripting.rst: this is where we put links to associated packages that allow scripting and where we put tutorials "tying it all together" using scripting on these packages
* :ref:`Scripting interface <scripting>`
.. * :ref:`Tutorials for Developers <vnftutorials-dev>`
.. DeveloperGuide.rst: this is where we discuss the api for VNF and give recommendations for volunteer work
* :ref:`Extending VNF <vnfdeveloperguide>`


More
""""
* `DANSE <http://danse.us>`_
* `The VNF project <http://danse.us/trac/VNET>`_

..   tutorials-users
..   tutorials-dev

..   discussion

Overview
--------

The Virtual Neutron Facility  is a set of
interoperable software packages that allow scientists to simulate
neutron scattering experiments.  Much like real experiments, vnf has
two main parts: 1) instruments, which uses the subpackage MCViNE, and
2) samples, which uses the subpackages for scattering kernels  based
on modern methods from the theory of materials structure and dynamics.



Many of these capabilities within vnf have been available for a number
of years, and fortunately have been tested well. For example, Monte
Carlo simulations of instruments are well established, as are plane
wave pseudopotential codes for electronic structure calculations.
There are a number of missing steps between these theory codes and a
neutron instrument simulation that are provided by vnf, such as
building a sample assembly containing different scatterers, simulating
modern, complex detector system, or considering the effects beyond
single excitations in inelastic scattering. The vnf packages provides
these missing capabilities in a cohesive manner, and offers a natural
work flow in setting up the simulated experiments.

.. image:: images/common/VNET_fig_a.jpg
   :width: 400

The essence of neutron scattering is shown in the diagram above,
with a neutron interacting with the sample. The incident flux of
neutrons is generated by MCViNE and the final neutron state is
detected by MCViNE. The scattering law, S(Q,E), is provided by a
scattering Kernel.

.. image:: images/common/VNET_figure_2.jpg
	:width: 330

The software boundary between MCViNE and the Kernel is shown in the
figure above, which depicts more details of a neutron instrument.
Note that only a selected piece of the sample assembly is modeled by
the scattering Kernel. Most of the sample assembly, such as the
holder, aluminum can, and shape of chunks of material, and handling of
multiple scattering, are parts of the Monte Carlo framework, MCViNE.
The interface between MCViNE and Kernel is through a data structure
for the scattering function, S(Q,E), which can describe experimental
results such as the S(Q,E) in the figure below, and could include
multiphonon scattering if so desired.

MCViNE (Monte Carlo Virtual Neutron Experiment)
--------------------------------------------------------------------------------

The simulations are based on Monte Carlo simulations of instruments,
which can be configured by the user at runtime. Instrument components
(some of them come from `python bindings of McStas <http://danse.us/trac/MCViNE>`_, for example) are
assembled together to form an virtual instrument, and a simulation
engine passes groups of neutrons through them. Datasets from the
primary flight path (neutrons on sample) can be recorded, and used
later for an experiment on a particular instrument with a specific
incident energy and energy resolution. These pre-recorded neutron
fluxes on sample can then be used for interaction with the sample to
produce a scattered beam of neutrons to the detectors. Interface to
the sample is through the scattering function, S(Q,E), which contains
the scattering law as a function of momentum transfer, Q, and energy
transfer, E.

Dynamics Engines, Analysis, and Scattering Kernel Generation
------------------------------------------------------------------------

The sample structure utilizes an S(Q,E) obtained by simulation or
modeling, and different S(Q,E) are provided by different modules for
materials theory and simulation. The scattering component with
underlying theory is termed the "scattering kernel." The kernels can
be as simple as quick functions to generate an arbitrary S(Q,E) -- a
constant background may be useful, for example.

.. image:: images/common/FeNi_S(QE)_labels_3.jpg
	:width: 352

More sophisticated kernels implement physical models of scattering.
These are described in several textbook references, and more advanced
discussions as in
http://drchops.caltech.edu:5001/click_monitor/ARCS-bigbook
The more substantial scattering kernels make use of the developments
in materials theory over the past decade in both modeling and
simulation. Computationally it is important to distinguish between a
model and a simulation. All models have parameters that can be
optimized based on fitting to experimental data. These calculations
are iterative, used to fit experimental data by optimization. On the
other hand, ab-initio simulation have no adjustable parameters, and
are forward computational chains. In the middle, however, are
simulations such as molecular dynamics simulations, which have some
ab-initio characteristics, but some parametric behavior. 



Indices and tables
==================

* :ref:`genindex`
* :ref:`search`

.. * :ref:`modindex`
