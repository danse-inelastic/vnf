# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2010  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from luban.content import load, select, alert
import luban.content as lc

from luban.content.FormSelectorField import FormSelectorField


class Factory(object):


    def __init__(self, id, director):
        domaccess = director.retrieveDOMAccessor('experiment')
        self.domaccess = domaccess
        self.director = director
        self.id = id
        self.experiment = domaccess.getExperimentRecord(id)
        instrument = self.experiment.instrument
        self.instrument = instrument.dereference(domaccess.db)
        return
    

    def __call__(self):
        #
        domaccess = self.domaccess
        director = self.director

        # check if configuration exists
        experiment = self.experiment
        ic = experiment.instrument_configuration
        ic = ic and ic.id and ic.dereference(domaccess.db)
        if not ic:
            orm = domaccess.orm
            ic = domaccess.createInstrumentConfiguration(orm.record2object(experiment))
            ic = domaccess.orm(ic)
        # now ic is the db record of the configuration

        #
        instrument = experiment.instrument.dereference(domaccess.db)
        doc = lc.document(title='Configuring instrument %s' % instrument.name)
        doc.paragraph(text=[
            'to edit, please select a component from the following component chain',
            ])
        
        # the panel to edit/view individual component
        componentpanel = lc.document(id='experimentwizard-componentpanel')

        #
        loadcomponentview = lambda component: load(
            actor='orm/%s' % component.getTableName(), routine='display',
            id = component.id, editlink = True)
        refreshconfigurationpanel = lambda component: select(
            element=componentpanel).replaceContent(loadcomponentview(component))
        
        # component list
        components = [c for n, c in ic.components.dereference(domaccess.db)]
        componentchainview = self._createComponentChainView(
            components, refreshconfigurationpanel, component = components[0])

        #
        doc.add(componentchainview)
        doc.add(componentpanel)

        # continue button
        if self.instrument.has_sample_component:
            nexttab = 'sample'
        else:
            nexttab = 'finish'

        switch = director.retrieveVisual(
            'neutronexperiment/edit/switch-to-editpanel')\
            .get(self.id, nexttab)
        continuebutton = lc.button(label='continue', onclick=switch)
        doc.add(continuebutton)
        return doc


    def _createComponentChainView(self, components, refreshconfigurationpanel, component=None):
        director = self.director
        
        current_component = component
        
        doc = lc.document(id='component-chain-container', title='Component chain')
        sp = doc.splitter(id='component-chain')

        idformatter = 'component-%s'
        ids = [c.id for c in components]
        buttonids = [idformatter % id for id in ids]
        for component in components:
            # "button" of a comonent
            button = sp.section().document(id=idformatter % component.id)
            button.Class='component-chain-button'

            # when icons are available, add them into the "button"
            #path = 'components/%s/middle-size-icon.png' % name
            #img = lc.image(path=path)
            label = '%s: %s' % (component.componentname, component.__class__.__name__)
            button.paragraph(text=[label])

            #if current_component and current_component.id == component.id:
            #    button.addClass('selected')
            
            #
            selectthisbutton = director.retrieveVisual(
                'neutronexperiment/edit/select-a-button').select(button.id, buttonids)
            button.onclick = selectthisbutton + [
                refreshconfigurationpanel(component),
                ]

            button.tip = '%s: click for more details' % component.componentname
            continue
                
        return doc



def visual(id=None, director=None):
    '''
    id: experiment id
    instrument: instrument id (not configuration)
    '''
    return Factory(id, director)()

# version
__id__ = "$Id$"

# End of file 
