#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                  Jiao Lin
#                     California Institute of Technology
#                       (C) 2009  All Rights Reserved
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


# a simple form to create a atomic structure
# it collaborates with actor atomicstructure/create-structure-form


from luban.content import load, select, alert
import luban.content as lc

from luban.content.FormTextField import FormTextField
from luban.content.FormSelectorField import FormSelectorField
from luban.content.FormSubmitButton import FormSubmitButton
from luban.content.Button import Button

def visual(director, id):
    doc = lc.document()
    doc.add(viewIndicator(director, id))

    container = doc.document(id='new-structure', Class='container')
    
    

    cancel = load(actor='atomicstructure', routine='canceledit', id = id)
    delete = [
        load(actor='atomicstructure', routine='delete', id = id),
        load(actor='atomicstructure', routine='showListView'),
        ]
    
    controls = container.document(Class='master-controls')
    cancellink = lc.link(label='cancel', onclick=cancel, Class='cancel')
    controls.add(cancellink)
    deletelink = lc.link(label='delete', onclick=delete, Class='delete')
    controls.add(deletelink)
    
    decideInput = container.document(Class='decideInputMethod')
    btnDb = Button(label='Load from database', tip='load from database')
    codActor = load(actor='cod', routine='default', id = id)
    btnDb.onclick = select(id=id).replaceContent(codActor)
    decideInput.add(btnDb)
    btnMan = Button(label='Create manually', tip='input coordinates by hand')
    #editView = director.retrieveVisual('atomicstructure/edit-structure-view')
    editview = editView(director, id)
    btnMan.onclick = select(id=id).replaceContent(editview)
    decideInput.add(btnMan)
    
    #view = codview(director, id)
    container.add(codActor)

    sp = container.splitter()
    left = sp.section(); right = sp.section()
    done = load(
        actor='atomicstructure', routine='doneediting',
        id = id, viewid = view.id,
        formids = select(element=container).findDescendentIDs(type='form')
        )
    donebutton = lc.button(label='done', onclick=done)
    left.add(donebutton)

    controls2 = right.document(Class='master-controls')
    cancellink2 = lc.link(label='cancel', onclick=cancel, Class='cancel')
    controls2.add(cancellink2)
    deletelink2 = lc.link(label='delete', onclick=delete, Class='delete')
    controls2.add(deletelink2)

    return doc

def editView(director, id):
    domaccess = director.retrieveDOMAccessor('atomicstructure')
    struct = domaccess.getAtomicStructure(id)
    drawer = director.painter.paintObj.drawers.getDrawer(struct.__class__)
    return drawer(struct)

def viewIndicator(director, id):
    path = []
    path.append(('atomic structures', load(actor='atomicstructure')))

    if id:
        label = 'structure %s' % id
    else:
        label = 'new structure'
    path.append(label)
    return director.retrieveVisual('view-indicator', path=path)


# version
__id__ = "$Id$"

# End of file 
