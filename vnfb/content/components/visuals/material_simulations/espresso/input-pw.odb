#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

import luban.content as lc
from luban.content import select
from luban.content import load
from vnfb.utils.qegrid import QEGrid
from vnfb.utils.qeconst import SMEARING, IBRAV
from luban.content.FormTextField import FormTextField
from luban.content.FormSelectorField import FormSelectorField
from luban.content.FormSubmitButton import FormSubmitButton
from qecalc.qetask.qeparser.pwinput import PWInput
from matter.Atom import Atom

# Default values:
ECUTWFC = 27.0
ECUTRHO = 300.0
NK      = 4

class Visual:

    def __init__(self, actor, director):
        self._actor     = actor
        self._director  = director

    def render(self):
        return self._form()

    def _form(self):
        form        = lc.form(id='qe-atoms-form')
        table       = QEGrid(lc.grid(Class="qe-form"))
        form.add(table.grid())

        PSEUDO      = ("Ni.pbe-nd-rrkjus.UPF",)     # CRITICAL

        ibrav       = FormSelectorField(name="ibrav",
                                        entries=enumerate(IBRAV)) # Take from atomic structure?
        ecutwfc     = FormTextField(name = "ecutwfc", value = ECUTWFC)
        ecutrho     = FormTextField(name = "ecutrho", value = ECUTRHO)
        smearing    = FormSelectorField(name="smearing",
                                        entries=enumerate(SMEARING.keys()))

        nk1         = FormTextField(name = "nk1", value = NK)
        nk2         = FormTextField(name = "nk2", value = NK)
        nk3         = FormTextField(name = "nk3", value = NK)

        submit      = FormSubmitButton(label="Generate Input Configuration")
        cancel      = lc.button(label="Cancel")
        cancel.onclick  = load(actor = 'material_simulations/espresso/sim-view', id=self._actor.id)

        st          = QEGrid(lc.grid()) # Submit Table
        st.addRow((submit, cancel), ("qe-action-accept", "qe-action-cancel"))

        table.addRow(("Lattice Type:", ibrav))
        table.addRow(("Atomic Structure:", self._atoms()))
        table.addRow(("Enertgy Cutoff:", ecutwfc))    # XXX Check name
        table.addRow(("Density Cutoff:", ecutrho))    # XXX Check name
        table.addRow(("Smearing:", smearing))    # XXX Check name
        table.addRow(("nk1:", nk1))
        table.addRow(("nk2:", nk2))
        table.addRow(("nk3:", nk3))
        table.addRow(("", st.grid()))

        table.setColumnStyle(0, "qe-form-label")
        table.setColumnStyle(1, "qe-form-field")

        form.onsubmit   = select(element=form).submit(actor     = 'material_simulations/espresso-utils/generate-pw',
                                                      routine   = 'generateInput',
                                                      taskid    = self._actor.taskid,
                                                      id        = self._actor.id,
                                                      pseudo    = "pseudo.value", # change
                                                      ibrav     = ibrav.value,
                                                      ecutwfc   = ecutwfc.value,
                                                      ecutrho   = ecutrho.value,
                                                      smearing  = smearing.value,
                                                      nk1       = nk1.value,
                                                      nk2       = nk2.value,
                                                      nk3       = nk3.value
                                                      )

        return form

    def _atoms(self):
        atoms    = QEGrid(lc.grid())
        atoms.addRow(("", "Mass", "Pseudo Potential"))

        domaccess = self._director.retrieveDOMAccessor('atomicstructure')
        structure = domaccess.getAtomicStructure("6NPTL72J")    # XXX Ni: 6NPTL72J, Cu4: 
        pwInput = PWInput()
        pwInput.structure.load(source = 'diffpy', structure = structure)
        #print pwInput.structure.atomLabels()
        PSEUDO      = ("Ni.pbe-nd-rrkjus.UPF", ) # Temp
        labels      = ("Ni", "Cu")

        for l in labels:
            atom        = Atom(l)
            mass        = FormTextField(name = l, value = atom.mass, Class="mass-textfield")
            pseudo      = FormSelectorField(name="Nipseudo",
                                            entries=enumerate(PSEUDO))
            atoms.addRow((l, mass, pseudo))
            
        atoms.setRowStyle(0, "qe-atoms-header")
        atoms.setColumnStyle(0, "qe-atoms-label")
        return atoms.grid()
    

def visual(actor, director):
    v   = Visual(actor, director)
    return v.render()

#        domaccess = director.retrieveDOMAccessor('atomicstructure')
#        structure = domaccess.getAtomicStructure("6NPTL72J")
#        from qecalc.qetask.qeparser.pwinput import PWInput
#        ml  = [26.98,]    # mass list
#        ps  = ["HaHa",]
#        pwInput = PWInput()
#        pwInput.structure.load(source = 'diffpy', ibrav = 2 , structure = structure, massList = ml, psList = ps)
#        print pwInput.structure.toString()
#        print pwInput.structure.atomLabels()




__date__ = "$Jan 12, 2010 5:48:06 PM$"


