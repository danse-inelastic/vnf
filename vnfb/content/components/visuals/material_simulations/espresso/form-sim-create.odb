#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

import luban.content as lc
from vnfb.qeutils.qeconst import SIMCHAINS, ID_MD_OPTIONS
from vnfb.qeutils.qegrid import QEGrid
from vnfb.utils.serverlist import ServerList

from luban.content import select, load, alert

from luban.content.FormSelectorField import FormSelectorField
from luban.content.FormTextField import FormTextField
from luban.content.FormSubmitButton import FormSubmitButton
from luban.content.FormRadioBox import FormRadioBox
from luban.content.Form import Form


def atomicStructure(actor, director):
    link        = lc.link(label = "Select Atomic Structure",
                          Class = "qe-action-structure")
    actorName   = "material_simulations/espresso/sim-create"
    link.onclick = load(actor   = actorName,
                        routine = 'showOptions')
    section     = link

    if actor.structureid != '':
        domaccess   = director.retrieveDOMAccessor('atomicstructure')
        structure   = domaccess.getAtomicStructureRecord(id = actor.structureid)

        table   = QEGrid(lc.grid(Class="qe-structure-label"))
        change  = lc.link( label    ="Change",
                            onclick = load(actor = actorName, routine = 'showOptions'))
        matter   = "%s (%s)" % (structure.chemical_formula, actor.structureid)

        table.addRow((matter, change))
        section   = table.grid()

    return section


def visual(actor, director):
    "Sets create new simulation form"
    
    # Set servers first
    servers     = ServerList(director)
    serversList = servers.list()

    form        = Form(id = 'create-simulation-form')
    table       = QEGrid(lc.grid(Class="qe-form"))
    form.add(table.grid())

    sname       = FormTextField(name = "sname", value = actor.sname)
    simtype     = FormSelectorField(name        = "simtype",
                                    entries     = enumerate(SIMCHAINS.keys()))
    actorName   = "material_simulations/espresso/sim-create"
    simtype.onchange    = load( actor   = actorName,
                                routine = "showMDOptions",
                                simtype = select(element=simtype).getAttr("value"))
    description = FormTextField(name="description", value=actor.description)   # Make as textarea
    label       = FormTextField(name="label", value=actor.label)
    server      = FormSelectorField(name    = "server",
                                    entries = enumerate(serversList)) # XXX Move to QESettings

    submit      = FormSubmitButton(label="Create New Simulation")
    cancel      = lc.button(label="Cancel", onclick = load(actor = 'materialsimulation'))

    st          = QEGrid(lc.grid()) # Submit Table
    st.addRow((submit, cancel), ("qe-action-accept", "qe-action-cancel"))

    table.addRow(("Atomic Structure: *", atomicStructure(actor, director)))
    table.addRow(("Type: *", simtype))
    table.addRow(("Server: *", server))
    table.addRow(("", lc.document(id=ID_MD_OPTIONS)))
    table.addRow(("Name:", sname))
    table.addRow(("Description:", description))
    table.addRow(("Label:", label))
    table.addRow(("", st.grid()))

    table.setColumnStyle(0, "qe-form-label")
    table.setColumnStyle(1, "qe-form-field")

    form.onsubmit   = select(element=form).submit(actor         = 'material_simulations/espresso/sim-create',
                                                  routine       = 'createRecord',
                                                  structureid   = actor.structureid)

    return form


__date__ = "$May 13, 2010 10:24:36 AM$"


