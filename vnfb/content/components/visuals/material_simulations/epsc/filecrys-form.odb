# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2011  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

import luban.content as lc
from luban.content import select
from luban.content import load
from vnfb.qeutils.qegrid import QEGrid
from luban.content.FormTextField import FormTextField
from luban.content.FormSelectorField import FormSelectorField
from luban.content.FormSubmitButton import FormSubmitButton
from luban.content.FormRadioBox import FormRadioBox

from vnfb.epscutils.epscconst import CRYSYM, LATTICE

class Visual:

    def __init__(self, actor, director):#, structureid):
        self._actor         = actor
        self._director      = director
        #self._structureid   = structureid


    def form(self):
        # Parameter elements
        form        = lc.form(id="epsc-form")
        table       = QEGrid(lc.grid(Class="qe-form"))
        crysym      = FormSelectorField(name="crysym",
                                        entries=enumerate(CRYSYM))
                                        
        # XXX: Lattice parameters should be taken from structure
        a           = FormTextField(name = "a", value = LATTICE[0], tip="a")
        b           = FormTextField(name = "b", value = LATTICE[1], tip="b")
        c           = FormTextField(name = "c", value = LATTICE[2], tip="c")
        alpha       = FormTextField(name = "alpha", value = LATTICE[3], tip="alpha")
        beta        = FormTextField(name = "beta", value = LATTICE[4], tip="beta")
        gamma       = FormTextField(name = "gamma", value = LATTICE[5], tip="gamma")
        lattice     = QEGrid(lc.grid())
        lattice.addRow(("a", a, "b", b, "c", c, "alpha", alpha, "beta", beta, "gamma", gamma))

        lattice.setColumnStyle(1, "epsc-lattice-field")
        lattice.setColumnStyle(3, "epsc-lattice-field")
        lattice.setColumnStyle(5, "epsc-lattice-field")
        lattice.setColumnStyle(7, "epsc-lattice-field")
        lattice.setColumnStyle(9, "epsc-lattice-field")
        lattice.setColumnStyle(11, "epsc-lattice-field")

        # Lattice parameters: a []  b []  c []  alpha []  beta []  gamma [] 
        # Elastic stiffness (matrix 6x6): [textarea]
        # Thermal expansion coefficients: [] [] [] [] [] []
        # Total number of modes: []
        # Number of modes to be used: []
        # Label of the modes to be used: []


#        server      = FormSelectorField(name="server",
#                                        entries=enumerate(serversList),
#                                        selection=servers.selected(sim.serverid))
        #test1     = FormTextField(name = "test1", value = TEST)


#        # Skip link
#        visual_     = "material_simulations/espresso/link-skip"
#        skipLink    = self._director.retrieveVisual(visual_,
#                                                  id        = self._actor.id,
#                                                  taskid    = self._actor.taskid,
#                                                  type      = self._actor.type)

        submit      = FormSubmitButton(label="Generate Material Configuration")
        cancel      = lc.button(label="Cancel")
        cancel.onclick  = load(actor = 'material_simulations/epsc/sim-view')#, id=self._actor.id)

        # Parameters attachment
        st          = QEGrid(lc.grid()) # Submit Table
        st.addRow((submit, cancel), ("qe-action-accept", "qe-action-cancel"))

        # Labels
        crysym_label    = lc.link(label="Crystal symmetry:")
        crysym_label.tip    = "Crystal symmetry"

        lattice_label   = lc.link(label="Lattice parameters:", )
        lattice_label.tip   ="Unit cell axes and angles"

        stiff_label = lc.link(label="Elastic stiffness (matrix 6x6):")
        stiff_label.tip = "Elastic stiffness (single crystal [GPa]; scaled=0.85xINTERPOLATED)"

        exp_label       = lc.link(label="Thermal expansion coefficients:")
        exp_label.tip   = "Thermal expansion coefficients (single crystal in crystal axis)"
        
        modes_label     = lc.link(label="Total number of modes:")
        modes_label.tip = "Total number of modes"
        
        umodes_label    = lc.link(label="Number of modes:")
        umodes_label.tip    = "Number of modes to be used in calculation"
        
        lmodes_label    = lc.link(label="Label of the modes:")
        lmodes_label.tip    = "Label of the modes to be used"

        table.addRow((crysym_label, crysym))
        table.addRow((lattice_label, lattice.grid()))
        table.addRow((stiff_label, ""))
        table.addRow((exp_label, ""))
        table.addRow((modes_label, ""))
        table.addRow((umodes_label, ""))
        table.addRow((lmodes_label, ""))
        
        #table.addRow(("", skipLink))
        table.addRow(("", st.grid()))

        table.setColumnStyle(0, "epsc-form-label")
        table.setColumnStyle(1, "qe-form-field")

#        form.onsubmit   = select(element=form).submit(actor     = 'material_simulations/espresso-utils/generate-pw',
#                                                      routine   = 'generateInput',
#                                                      taskid    = self._actor.taskid,
#                                                      id        = self._actor.id,
#                                                      type      = self._actor.type,
#                                                      mattertype    = self._actor.mattertype,
#                                                      structureid   = self._structureid,
#                                                      simtype   = self._simtype)

        form.add(table.grid())

        return form


def visual(actor, director):#, structureid):
    v   = Visual(actor, director)#, structureid)
    return v.form()

__date__ = "$Mar 22, 2011 10:11:29 AM$"


