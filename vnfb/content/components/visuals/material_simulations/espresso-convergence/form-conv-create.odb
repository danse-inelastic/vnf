#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

from vnfb.qeutils.qegrid import QEGrid
from vnfb.qeutils.qeconst import CONVTYPE, CONVPARAM, MAX_STEPS, TOLERANCE

import luban.content as lc
from luban.content import load, select
from luban.content.FormTextField import FormTextField
from luban.content.FormSubmitButton import FormSubmitButton
from luban.content.FormSelectorField import FormSelectorField
from luban.content.Form import Form


def defaultsDialog(title, content):
    "Returns the dialog widget"
    dialog  = lc.dialog(title=title, autoopen=True)
    dialog.add(content)   # Text
    okbutton = lc.button( label     = 'OK',
                          onclick   = select(element=dialog).destroy())
    dialog.add(okbutton)
    return dialog


def defaults(content, index, title):
    table       = QEGrid(lc.grid())
    for p in CONVPARAM.keys():
        table.addRow(("%s:" % p, str(CONVPARAM[p][index]) ))

    table.setColumnStyle(0, "text-bold")
    table.setColumnStyle(1, "padding-left-20")
    dialog  = defaultsDialog(title, table.grid())
    return lc.link( label     = "Defaults",
                    onclick   = select(element=content).append(dialog))


def startDefaults(content):
    return defaults(content, 2, "Start Value Defaults")


def stepDefaults(content):
    return defaults(content, 3, "Step Value Defaults")


def visual(director, id):
    form        = Form()
    table       = QEGrid(lc.grid(Class="qe-form"))
    form.add(table.grid())
    convtype    = FormSelectorField(name    = "convtype",
                                    entries = enumerate(CONVTYPE.values()))
    param       = FormSelectorField(name    = "param",
                                    entries = enumerate(CONVPARAM.keys()))
    start       = FormTextField(name = "start", )
    step        = FormTextField(name = "step", )
    tolerance   = FormTextField(name = "tolerance", value = TOLERANCE)
    maxsteps    = FormTextField(name = "maxsteps", value = MAX_STEPS)
    description = FormTextField(name = "description", value = "")

    submit      = FormSubmitButton(label="Create Test")
    cancel      = lc.button(label="Cancel")
    cancel.onclick  = load( actor   = 'material_simulations/espresso-convergence/view',
                            id      = id)

    st          = QEGrid(lc.grid()) # Submit Table
    st.addRow((submit, cancel), ("qe-action-accept", "qe-action-cancel"))

    table.addRow(("Convergence Parameter: *",   convtype,   "" ))
    table.addRow(("Varying Parameter: *",       param,      ""))
    table.addRow(("Start Value: *",             start,      startDefaults(start)))
    table.addRow(("Step: *",                    step,       stepDefaults(step)))
    table.addRow(("Tolerance, %: *",            tolerance,  ""))
    table.addRow(("Max Steps: *",               maxsteps,   ""))
    table.addRow(("Description:",               description,""))

    table.addRow(("", st.grid()))

    table.setColumnStyle(0, "qe-form-label")
    table.setColumnStyle(1, "qe-form-field")

    form.onsubmit   = select(element=form).submit(actor     = 'material_simulations/espresso-convergence/conv-create',
                                                  routine   = 'createRecord',
                                                  id        = id)
    return form

__date__ = "$Apr 23, 2010 2:41:34 PM$"


