#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

import luban.content as lc
from vnfb.utils.qegrid import QEGrid

from luban.content import load, select

def visual(director):
    doc         = lc.document(title = "New Analysis")
    splitter    = doc.splitter(orientation="vertical")
    sA          = splitter.section()
    sA.add(viewIndicator(director))

    sB          = splitter.section()
    sp = lc.splitter(); sB.add(sp)
    
    left = sp.section()#title='Structure Analysis')
    docLeft         = lc.document(title = "Structure")
    left.add(docLeft)
    left.add(createStructureAnalysis())
             
    middle = sp.section()#title='Dynamics Analysis')
    docMiddle        = lc.document(title = "Dynamics")
    middle.add(docMiddle)
    middle.add(createDynamicsAnalysis())
    
    right = sp.section()#title='Scattering Analysis')
    docRight = lc.document(title = 'Scattering')
    right.add(docRight)
    right.add(createScatteringAnalysis())
    
#    table       = QEGrid(lc.grid(Class="qe-table"))
#    sB.add(table.grid())
#    showAnalyses(table)
#
#    table.setColumnStyle(0, "qe-cell-param")
    return doc

def createStructureAnalysis():
    grid = lc.grid()
    
    routines   = []
    routines.append((lc.link(label="RDF", onclick=load(actor="orm/rdfcalc")),
                    "Radial Distribution Function from an MD trajectory"))
#    routines.append((lc.link(label="DoPS", onclick=load(actor="orm/motiondoscalc")),
#                    "Density of Phonon States from an MD trajectory"))
    
    for link,desc in routines:
        row = grid.row()
        row.cell().add(link)
        row.cell().add(desc)
    return grid

def createDynamicsAnalysis():
    grid = lc.grid()
    
    routines   = []
    routines.append((lc.link(label="DoPS", onclick=load(actor="orm/motiondoscalc")),
                    "Density of Phonon States from an MD trajectory"))
    routines.append((lc.link(label="VACF", onclick=load(actor="orm/vacfcalc")),
                    "Velocity Autocorrelation Function from an MD trajectory"))
    routines.append((lc.link(label="MSD", onclick=load(actor="orm/msdcalc")),
                    "Mean Squared Displacement from an MD trajectory"))
    routines.append((lc.link(label="Diffusion", onclick=load(actor="orm/diffusioncalc")),
                    "Generate a diffusion coefficient from an MD trajectory"))
    
    for link,desc in routines:
        row = grid.row()
        row.cell().add(link)
        row.cell().add(desc)
    return grid

def createScatteringAnalysis():
    grid = lc.grid()
    
    routines   = []
    routines.append((lc.link(label="S(Q,E)", onclick=load(actor="orm/csfcalc")),
                    "Generate coherent and incoherent portions of inelastic scattering through an MD trajectory"))
    routines.append((lc.link(label="EISF", onclick=load(actor="orm/eisfcalc")),
                    "Elastic Incoherent Structure Factor from an MD trajectory"))
    routines.append((lc.link(label="static S(Q)", onclick=load(actor="orm/staticsqcalc")),
                    "Static Structure Factor from an MD trajectory"))
    routines.append((lc.link(label="static S(Q)", onclick=load(actor="orm/dynamicsqcalc")),
                    "Dynamic Structure Factor from an MD trajectory"))
    routines.append((lc.link(label="Multiphonon Scattering", onclick=load(actor="orm/multiscatcalc")),
                    "Add multiphonon scattering corrections to an S(Q,E)"))
    
    for link,desc in routines:
        row = grid.row()
        row.cell().add(link)
        row.cell().add(desc)
    return grid





def viewIndicator(director):
    path = []
    path.append(('Simulations ', load(actor='materialsimulation')))
    path.append('Create New Simulation')
    
    return director.retrieveVisual('view-indicator', path=path)



__date__ = "$Nov 20, 2009 3:11:39 PM$"


