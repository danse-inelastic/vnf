# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                   Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2010  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


import luban.content as lc
from luban.content import load, select, alert


def visual(computation, actor, director):
    domaccess = director.retrieveDOMAccessor('computation')
    orm = domaccess.orm
    db = orm.db

    # the job
    job = computation.getJob(db)
    # always good to check the job
    from vnfb.utils.job import check
    check(job, director)

    # the document to build
    doc = lc.document(Class='container')

    # depending on retrieval status, we need to add some extra things to the document
    result_retrieval_status = computation.getResultRetrievalStatus(db)


    if result_retrieval_status is None:
        from vnfb.utils.computation import start_results_retrieval
        start_results_retrieval(computation, director)
        result_retrieval_status = 'retrieving'
        
    refresh = select(element=doc).replaceBy(
        load(actor=actor, routine='createResultsDoc',
             id=computation.id)
        )
    
    if result_retrieval_status == 'retrieving':
        p = doc.paragraph(text=['Still retrieving results...'])

        from vnfb.utils.computation import get_results_retrieval_task
        task = get_results_retrieval_task(computation, db)
        if not task:
            raise RuntimeError, 'there should be an itask working at retrieving results for computation %s, but we found none' % computation.id
        
        pbar = lc.progressbar(
            id = 'itask-%s-pbar' % task.id,
            status = 'Retrieving results...',
            percentage = 0,
            skip = 1000,
            )
        pbar.onchecking = load(
            actor='itask',
            routine='checkProgress',
            id = task.id,
            )
        
        pbar.onfinished = refresh
        pbar.oncanceled = refresh
        doc.add(pbar)

    elif result_retrieval_status == 'retrieval failed':
        p = doc.paragraph(text=['failed to retrieve results'])
        l = lc.link(
            label = 'restart results retrieval',
            onclick = [
              load(actor='computation', routine='restartResultsRetrieval',
                   type = computation.getTableName(), id = computation.id),
              refresh,
              ],
            )
        doc.add(l)

    elif result_retrieval_status == 'retrieved':

        pass

    else:
        raise NotImplementedError, 'computation: %s, retrieval status: %s' % (
            computation.getTableName(), result_retrieval_status)

    # display results 
    results = computation.results.dereference(db)
    for k, r in results:
        obj = orm.record2object(r)
        drawer = director.painter.paintObj.drawers.getDrawer(obj.__class__)
        drawer.obj_resource_path = director.dds.abspath(r)
        doc.add(drawer(obj, readonly=True, editlink=False))
        continue
    
    return doc


# version
__id__ = "$Id$"

# End of file 
