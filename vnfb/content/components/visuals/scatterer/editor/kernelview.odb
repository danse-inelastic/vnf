#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from luban.content import load, select, alert
import luban.content as lc


class Factory(object):

    kernel_view_id = 'scatterer-kernel-view'


    def __init__(self, id, director):
        self.id = id
        self.director = director
        self.domaccess = director.retrieveDOMAccessor('scatterer')
        self.record = self.domaccess.getRecord(id)
        return


    def __call__(self, kernel):
        '''create view of the given kernel

        kernel: db record of the kernel of interest
        '''
        title = "%s %s" % (kernel.__class__.__name__, kernel.short_description or kernel.id)
        doc = lc.document(title=title, id=self.kernel_view_id)

        director = self.director
        id = self.id
        
        interior = doc.document(Class='container')
        summary = self._createSummary(kernel)
        interior.add(summary)

        controls = interior.document(Class='controls')
        sp = controls.splitter()
        
        link = lc.button(label='edit'); sp.section().add(link)
        db = director.clerk.db
        kerneluid = db.getUniqueIdentifierStr(kernel)
        link.onclick = select(element=interior).replaceBy(
           load(actor='scatterer/editor', routine='createKernelEditor',
                id = id, kernel=kerneluid)
           )
            
        link = lc.button(label='delete'); sp.section().add(link)
        link.onclick = load(
            actor='scatterer/editor', routine='deleteKernelAndRefreshKernelsView',
            id = id, kernel = kerneluid)
            
        return doc


    def _createSummary(self, kernel):
        doc = lc.document(Class='container', title='')

        #
        typename = kernel.__class__.__name__
        path='icons/scattering_kernels/%s.png' % typename.lower()
        image = lc.image(path=path)
        image.Class='float-right kernel-summary-image'
        doc.add(image)

        doc1 = doc.document(title='Properties')
        doc1.oncreate = select(element=doc1).append(
            load(actor='orm/%s' % kernel.getTableName(),
                 routine='displayProperties',
                 id=kernel.id,
                 editlink = False,
                 )
            )
        return  doc


    
def visual(id, director, kernel):
    return Factory(id, director)(kernel)


# version
__id__ = "$Id$"

# End of file 

