#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                  Jiao Lin
#                     California Institute of Technology
#                       (C) 2008  All Rights Reserved
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from pyre.components.Component import Component as base


class Worker(base):

    class Inventory(base.Inventory):

        pass # end of Inventory
    

    def run(self, task):

        director = self.director
        #
        domaccess = self.domaccess = director.retrieveDOMAccessor('job')
        # make sure orm is initd
        orm = domaccess.orm
        # db manager
        db = domaccess.db

        director.declareProgress(0.1, 'Verifying job ...')
        
        job = task.beneficiary.dereference(db)
        id = job.id

        state = job.state
        if state not in ['created', 'submissionfailed']:
            raise RuntimeError, "Job %s not suitable for submission: %s" % (id, state)
        
        job.state = 'submitting'
        domaccess.updateRecordWithID(job)

        try:
            director.declareProgress(0.2, 'Verifying computation ...')
            computation = job.computation
            if not computation:
                raise RuntimeError, 'computation is not specified for Job: %s' % (id,)

            director.declareProgress(0.3, 'preparing the job ...')
            self.prepare(job)

            director.declareProgress(0.7, 'scheduling the job ...')
            self.schedule(job)

            director.declareProgress(1.0, 'done')
            
        except Exception, e:
            job.state = 'submissionfailed'
            errmsg = '%s: %s' % (e.__class__.__name__, e)
            job.error = errmsg
            domaccess.updateRecordWithID(job)

            import traceback
            self._debug.log('submission of Job %s failed. %s' % (
                id, traceback.format_exc()) )

            raise
            
        return


    def prepare(self, job):
        director = self.director
        dds = director.dds
        domaccess = self.domaccess
        db = domaccess.db
        
        jobpath = dds.abspath(job)
        computation = db.dereference(job.computation)
        
        director.declareProgress(0.4, 'Preparing: building job ...')
        from vnfb.utils.job import buildjob
        files, deps = buildjob(
            computation, db=db, dds=dds, path=jobpath, director=director)
        for f in files: dds.remember(job, f)

        # make job related files available on the server
        server = db.dereference(job.server)
        director.declareProgress(0.5, 'Preparing: transfering job to the server %s ...' % server.short_description)
        dds.make_available(job, server=server, files=files)

        # make dependencies available on the server
        director.declareProgress(0.6, 'Preparing: setting up dependencies ...')
        for dep in deps: self.prepare_dependency(dep, job)
        return


    def prepare_dependency(self, dep, job):
        director = self.director
        dds = director.dds
        domaccess = self.domaccess
        db = domaccess.db
        
        if dds.is_available(dep): dds.remember(dep)
        
        server = db.dereference(job.server)
        director.declareProgress(0.65, 'Preparing: setting up dependency %s###%s ...' % (dep.__class__.__name__, dep.id) )
        dds.make_available(dep, server=server, ignore_nonexisting_files=True)
        return


    def schedule(self, job):
        from vnf.components.Scheduler import schedule
        return schedule(job, self.director)



def iworker():
    return Worker('submitjob', 'iworker')



# version
__id__ = "$Id$"

# End of file 
