# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                   Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from vnfb.components.DOMAccessor import DOMAccessor as base

class Accessor(base):


    def __init__(self):
        super(Accessor, self).__init__('phonons-accessor')
        return


    def _getOrm(self):
        orm = self.director.clerk.orm
        orm(Phonons)
        return orm
    orm = property(_getOrm)


    def getPhonons(self, id):
        orm = self.orm
        return orm.load(Phonons, id)


    def getPhononsRecord(self, id):
        db = self.db
        return db.query(PhononsTable).filter_by(id=id).one()


    def standardizeDataInIDFFormat(self, id):
        '''make sure data is in the correct idf format.

        the data generated by QE may create data files a bit off. we need to make sure
        to correct them. also make sure to "forget" all the incorrect information on the
        servers.
        '''
        phonons = self.getPhonons(id)
        orm  = self.orm
        record = orm(phonons)
        
        #
        director = self.director
        dds = director.dds
        
        #
        format = self._getDataFormat(record)
        if not format:
            raise NotImplementedError
        if not format.startswith('idf'):
            raise NotImplementedError
        
        # retrive the data and make sure they are in the server
        phonons = self.getDataForPhonons(phonons)
        
        dds = self.director.dds
        subdir = 'data.idf'
        # move files to the right place
        if format == 'idf-obsolete':
            # need to move data into subdir "data.idf"
            dds.makedirs(record, subdir=subdir)
            # 
            for f in idf_files:
                dds.move(record, f, record, os.path.join(subdir, f))
                continue
            
        #
        datapath = dds.abspath(record, subdir)
        
        # make sure there is a DOS file
        path = dds.abspath(record, os.path.join(subdir, 'DOS'))
        if not os.path.exists(path):
            # no DOS, create it
            from vnfb.dom.material_simulations.Phonons import computeDOS
            e,I = computeDOS(phonons)
            # e is in meV, DOS needs terahz, and
            # it is frequency, not angular frequency (see DOS specification in idf)
            from idf._constants import hertz2meV, pi
            e /= hertz2meV * 2 * pi * 1e12
            from idf.DOS import write
            write(e, I, filename=path)
            self.director.dds.remember(record, os.path.join(subdir, 'DOS'))
        
        # make sure Qgridinfo is standard
        path = os.path.join(datapath, 'Qgridinfo')
        content = open(path).read()
        #
        # the atomic structure
        matter = phonons.matter
        # the primitive cell
        primcell = matter.primitive_unitcell.base
        # the reciprocal cell
        from vnfb.utils.crystallattice import reciprocal
        recicell = reciprocal(primcell)
        #
        from idf.phonons import getStandardQgridinfo
        standard_content = getStandardQgridinfo(datapath, reciprocal_unitcell=recicell)
        #
        if content != standard_content:
            open(path, 'w').write(standard_content)
            db = self.director.clerk.db
            from vnfb.dom.Server import Server
            servers = db.query(Server).all()
            filename = os.path.join(subdir, 'Qgridinfo')
            for server in servers:
                if dds.is_available(record, filename=filename, server=server):
                    dds.forget(record, filename=filename, server=server)
                continue
        
        return


    def getDataForPhonons(self, phonons):
        orm  = self.orm
        record = orm(phonons)
        
        director = self.director

        # find out the data format of phonons data for this phonons db record
        format = self._getDataFormat(record)
        # if no format is found, we are in trouble
        if not format:
            self._debug.log(
                "Unable to find data files of known formats for phonons record %s" \
                % record.id)
            import traceback
            self._debug.log(traceback.format_exc())
            return

        if format.startswith('idf'):
            return self._getIDFData(phonons, format)

        # for other data format, more implementations here
        
        raise NotImplementedError, format


    def _getIDFData(self, phonons, format):
        record = self.orm(phonons)
        
        # make sure the data is at the server
        director = self.director
        dds = director.dds
        if format == 'idf':
            r = 'data.idf'
            def _(f): return os.path.join(r, f)
            files = [_(f) for f in idf_files]
            datadir = dds.abspath(record, r)
        else:
            files = idf_files
            datadir = dds.abspath(record)
        
        dds.make_available(record, files)

        # the atomic structure
        matter = phonons.matter
        # the primitive cell
        primcell = matter.primitive_unitcell.base
        # the reciprocal cell
        from vnfb.utils.crystallattice import reciprocal
        recicell = reciprocal(primcell)

        from idf.phonons import read
        nAtoms, dimension, Qaxes, polarizations, energies, dos = read(
            datadir, reciprocal_unitcell = recicell)
        for k in ['nAtoms', 'dimension', 'Qaxes', 'polarizations', 'energies']:
            setattr(phonons, k, eval(k))
            continue

        return phonons


    def _getDataFormat(self, phonons):
        director = self.director

        dds = director.dds
        if dds.existssomewhere(phonons, 'data.idf'): return 'idf'
        # other file formats should be here
        # ...
        
        # last resort to idf format files in the directory
        found = all([dds.existssomewhere(phonons, f) for f in idf_files])
        if found:
            import warnings
            warnings.warn('It is obsolete to store idf data files directly in the directory for a phonons record. It should be in the "data.idf" subdir')
            return 'idf-obsolete'

        return None


    def getOrigin(self, id=None, phonons=None):
        'get the original computation that creates this phonons'
        if phonons is None:
            phonons = self.getPhonons(id)
        orm = self.orm
        r = orm(phonons)
        origin = r.getOrigin(orm.db)
        return origin


idf_files = [
    # 'DOS',
    'Omega2',
    'Polarizations',
    'Qgridinfo',
    ]
    
from vnfb.dom.material_simulations.Phonons import Phonons

import os, numpy

def accessor():
    return Accessor()


# version
__id__ = "$Id$"

# End of file 
