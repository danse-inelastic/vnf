# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                   Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from vnfb.components.DOMAccessor import DOMAccessor as base

class Accessor(base):


    def __init__(self):
        super(Accessor, self).__init__('bvk-accessor')
        return


    def _getOrm(self):
        orm = self.director.clerk.orm
        orm(BvKModel)
        return orm
    orm = property(_getOrm)


    def newModel(self, atomicstructure_id):
        structdomacess = self.director.retrieveDOMAccessor('atomicstructure')
        struct = structdomacess.getAtomicStructure(atomicstructure_id)
        model = BvKModel()
        model.matter = struct

        # save to db
        orm = self.orm
        orm.save(model)
        
        return model

    
    def getModelRecord(self, id):
        return self.getRecordByID(self.orm(BvKModel), id)


    def getModel(self, id):
        return self.orm.load(BvKModel, id)


    def getModelRecords(self, atomicstructure_id):
        struct = self.director.retrieveDOMAccessor('atomicstructure').getAtomicStructureRecord(atomicstructure_id)
        Table = self.orm(BvKModel)
        return struct.getReferences(self.db, Table, refname='matter')


    def getModels(self, atomicstructure_id):
        rs = self.getModelRecords(atomicstructure_id)
        return map(self.getModel, [r.id for r in rs])


    def getModelLabel(self, id=None, model=None, modelrecord=None):
        if modelrecord is None:
            if model:
                modelrecord = self.orm(model)
            else:
                modelrecord = self.getModelRecord(id)
        return modelrecord.short_description or modelrecord.id


    def isModelConstructed(self, id=None, model=None):
        'check if a bvk model is constructed and ready to be used'
        if model is None:
            model = self.getModel(id)
        # check if there is a reference to atomic structure
        if not model.matter: return False
        # a label is necessary
        if not model.short_description: return False
        # check if there are bonds
        if not len(model.bonds): return False
        return True


    def isModelEditable(self, id=None, modelrecord=None, model=None):
        'check if a model is still editable'
        if modelrecord is None:
            if model:
                modelrecord = self.orm(model)
            else:
                modelrecord = self.getModelRecord(id)
        return self.isModelReferred(modelrecord)


    def isModelReferred(self, modelrecord):
        'check if this model is referred by someone'
        return modelrecord.globalpointer is not None


    
class BvKModelProxy(object):


    def __init__(self, model, domaccessor):
        self.model = model
        self.domaccessor = domaccessor
        self.db = domaccessor.db
        self.matter = self.model.matter.dereference(self.db)
        return


    def __getattr__(self, name):
        return getattr(self.model, name)


    def getForceConstantMatrixConstraints(self):
        if not hasattr(self, '_fcm_constraints'):
            finder = FCMConstraintsFinder(self.matter)
            self._fcm_constraints = finder.findall()
        return self._fcm_constraints
    

    def getFractionalCoordinates(self):
        matter = self.matter
        atomsrefset = matter.atoms
        c = [r.xyz for k,r in atomsrefset.dereference(self.db)]
        c = numpy.array(c)
        c.shape = -1, 3
        return c


    def countBonds(self):
        return self.model.bonds.count(self.db)


    def newBond(self):
        b = newBond(
            self.domaccessor,
            A=0, B=0, Boffset=[0,0,0], force_constant_matrix=m0,
            )
        
        self.setBond(self.countBonds(), b)
        return b
    

    def getBond(self, index):
        return self.model.bonds.getElement(str(index), self.db)
    

    def setBond(self, index, bond):
        self.model.bonds.setElement(str(index), bond, self.db)
        


class FCMConstraintsFinder(object):

    def __init__(self, matter):
        self.matter = matter


    def findall(self):
        # now only knows about fcc and bcc single atom
        if matter.lattice_system == 'cubic':
            if matter.lattice_centering == 'I' and len(matter.atom_symbols)==1:
                return self._handle_bcc()
            elif matter.lattice_centering == 'F' and len(matter.atom_symbols)==1:
                return self._handle_fcc()
        raise NotImplementedError


    def _handle_fcc(self):
        return [
            (0,0), (1,0,0), [
              M(0,0)==M(1,1),
              M(1,0)==M(0,1),
              M(0,2)==0,
              M(2,0)==0,
              M(1,2)==0,
              M(2,1)==0,
            ],
            (0,0), (1,0,0), [
              M(0,0)==M(1,1),
              M(1,0)==M(0,1),
              M(0,2)==0,
              M(2,0)==0,
              M(1,2)==0,
              M(2,1)==0,
            ],
            ]


    def _handle_bcc(self):
        return


from vnfb.utils.constraints import Variable
class M(Variable):
    def __init__(self, *indexes): self.indexes = indexes
    

from vnfb.dom.material_simulations.BvKModel import BvKModel
from vnfb.dom.material_simulations.BvKBond import BvKBond

import os, numpy

m0 = [
    [0,0,0],
    [0,0,0],
    [0,0,0],
    ]


def accessor():
    return Accessor()


# version
__id__ = "$Id$"

# End of file 
