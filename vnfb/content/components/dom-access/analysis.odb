# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

tablename='analysis'
from vnfb.components.DOMAccessor import DOMAccessor as base

class Accessor(base):

    def __init__(self):
        super(Accessor, self).__init__('analysis')
        return

#    def _getOrm(self):
#        orm = self.director.clerk.orm
#        # build orm for all dynamics types--orm 
#        #registers and stores these internally
#        from vsat.trajectory.MdDosCalc import MdDosCalc
#        from vsat.trajectory.FCsfCalc import FCsfCalc
#        orm(MdDosCalc)
#        orm(FCsfCalc)
#        return orm
#    orm = property(_getOrm)
#
#    def getAnalysisRecord(self, type, id):
#        orm = self.orm
#        db = orm.db
#        table = db.getTable(type)
#        return db.query(table).filter_by(id=id).one()
    
    def getAnalysisRecord(self, type, id):
        orm = self.director.clerk.orm
        db = orm.db
        table = self._getTable(type)
        return db.query(table).filter_by(id=id).one()

#    def getAnalysisRecord(self, type, id):
#        return self.getRecordByID(type, id)
    
    def getGeneralAnalysisRecord(self, id):
        orm = self.director.clerk.orm
        db = orm.db
        result = None
        for table in self.analysisTables():
            try:
                result = db.query(table).filter_by(id=id).one()
            except Exception as e:
                import traceback
                self._debug.log(traceback.format_exc())
                self._debug.log(e)
                db._sasession.rollback()
                #print e
                pass
            if result:
                break #assume only one record exists w/id
        if result==None: raise Exception("No analysis result found for id "+id)
        return result
    
    def getAnalysis(self, id):
        orm = self.director.clerk.orm
        record = self.getGeneralAnalysisRecord(id)
        return orm.record2object(record)

    def countAnalyses(self, filter=None, label=None, mine=False):
        db = self.db
        
        tables = self.analysisTables()
        
        qf = lambda table: self.makeQuery(table, filter=filter, label=label, mine=mine)

        qs = map(qf, tables)
        
        q = sqlalchemy.union_all(*qs)
        return q.alias('tocount').count().execute().fetchone()[0]

    def getAnalysisRecords(self, filter=None, order_by=None, 
                       reverse_order=None, slice=None, label=None, mine=False):
        db = self.db
        self._debug.log('filter: %r, order_by: %r, slice: %r' % (filter, order_by, slice))
        tables = self.analysisTables()
        qf = lambda table: self.makeQuery(table, filter=filter, label=label, mine=mine)

        qs = map(qf, tables)
        q = sqlalchemy.union_all(*qs)

        if order_by:
            q = q.order_by(order_by)
        if slice:
            if reverse_order:
                n = self.countAnalyses(filter=filter, label=label, mine=mine)
                slice = n-slice[1], n-slice[0]
            q = sqlalchemy.select(
                [q.alias('tmptoslice')],
                limit = slice[1]-slice[0],
                offset = slice[0])

        # only need gpointers to be returned
        q = q.alias('tmp')
        q1 = sqlalchemy.select(columns=['gptr'], from_obj=[q])

        #db._saengine.echo = True
        rows = q1.execute().fetchall()

        #and then map to records
        from dsaw.db.VersatileReference import vreference
        def _(row): return db.dereference(vreference(row[0]))
        
        ret = map(_, rows)
        if reverse_order:
            ret.reverse()
        return ret

    def makeQuery(self, table, filter=None, label=None, mine=False):
        'create a query for an analysis table with given filter'
        db = self.db
        if label:
            if filter: raise RuntimeError
            return self.makeLabeledQuery(label, table, mine=mine)
        
        sGP = db._tablemap.TableToSATable(global_pointer).alias('gptrs')
        st = db._tablemap.TableToSATable(table)   
        #
        cols = [
            st.c.id.label('id'),
            st.c.short_description.label('short_description'),
            sGP.c.type.label('type'),
            st.c.date.label('date'),
            st.c.globalpointer.label('gptr'),
            ]
        # where = st.c.globalpointer==sGP.c.id
        where = 'globalpointer=gptrs.id'
        if mine:
            username = self.director.sentry.username
            mine = "creator='%s'" % username
            where = '%s and %s' % (where, mine)
        #
        q = sqlalchemy.select(cols, where)
        #
        if filter:
            q = sqlalchemy.select([q.alias('analysis')], whereclause=filter)
        return q

    def makeLabeledQuery(self, label, table, mine=False):
        'create a query for an analysis table with a given filter'
        db = self.db
        
        labelq = self._select_labeled_entities_clause(label, tablename, db)
        simq = self._select_analysis_clause(table, db)
        simq = simq.alias('sims')

        cols = [
            simq.c.id.label('id'),
            simq.c.short_description.label('short_description'),
            labelq.c.type.label('type'),
            simq.c.date.label('date'),
            simq.c.globalpointer.label('globalpointer'),
            simq.c.creator.label('creator'),
            ]
        # where = simq.c.globalpointer==labelq.c.entity
        where = 'sims.globalpointer=labeled.entity'
        if mine:
            username = self.director.sentry.username
            mine = "sims.creator='%s'" % username
            where = '(%s) and %s' % (where, mine)
        
        q = sqlalchemy.select(cols, whereclause=where)
        
        return q
    
    
    def getComputationLabel(self, computation_id):
        computation = self.getAnalysis(computation_id)
        record = self.orm(computation)
        return record.short_description or record.id

    def getTables(self):
        return self.analysisTables()

    def analysisTables(self):
        self._establishGlobalPointers()
        return self._analysisTables()


    def _analysisTables(self):
        from vnfb.dom.analysis.analysis_types import typenames
        ormtables = map(self._getTable, typenames)
        return ormtables


    def _select_labeled_entities_clause(self, name, type, db):
        '''get the labeled entities for the given label (specified by name and type)

        cols:
          entity: global address of the entity
          type: type of the entity
        '''
        from vnfb.utils.query.labels import select_labeled_entities_clause
        return select_labeled_entities_clause(name, type, db).alias('labeled')


    def _select_analysis_clause(self, table, db):
        '''create a sqlalchemy select clause for a material analysis table

        cols:
          * id
          * short_description
          * type: type of the analysis (obtained from globaponter table)
          * date
          * globalpointer
        '''

        sGP = db._tablemap.TableToSATable(global_pointer)
        st = db._tablemap.TableToSATable(table)

        cols = [
            st.c.id.label('id'),
            st.c.short_description.label('short_description'),
            sGP.c.type.label('type'),
            st.c.date.label('date'),
            st.c.creator.label('creator'),
            st.c.globalpointer.label('globalpointer'),
            ]
        where = st.c.globalpointer==sGP.c.id
        try:
            simq = sqlalchemy.select(cols, where)
        except:
            import traceback
            raise RuntimeError, 'Failed to select required columns from analysis table %s.\n'\
                  'Original exception was:\n%s' % (table.getTableName(), traceback.format_exc())

        return simq


    def _establishGlobalPointers(self):
        # temp fix
        # the current way of querying will omit the records without global pointers
        # we have to establish global pointer for each reocrd without one
        db = self.db
        for table in self._analysisTables():
            rs = db.query(table).filter_by(globalpointer=None).all()
            for r in rs: r.establishGlobalPointer(db)
            continue
        return


from vnfb.dom.Label import Label
from dsaw.db.VersatileReference import global_pointer
import sqlalchemy

def accessor():
    return Accessor()


# version
__id__ = "$Id$"

# End of file 
