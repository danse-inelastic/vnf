# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                   Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from vnf.dom.Label import Label


from vnfb.components.DOMAccessor import DOMAccessor as base

class Accessor(base):


    def __init__(self, db):
        self.db = db
        super(Accessor, self).__init__('smartlabel-accessor')
        return


    def getLabels(self, table, creator=None, entity=None):
        'get all labels for the given table'

        db = self.db
        
        if creator is None:
            creator = self._getUsername()
        return db.query(Label).filter_by(
            creator=creator, targettable=table, entity=entity)\
            .all()


    def getLabelNames(self, table, creator=None):
        if creator is None:
            creator = self._getUsername()
        labels = self.getLabels(table, creator=creator, entity=None)
        return [l.labelname for l in labels]
    

    def isLabeled(self, entity, table, label, creator=None):
        'check if an entity is labled given label for the given table'

        gp = entity.globalpointer
        if not gp or not gp.id:
            # no global pointer, it should not be labeled
            return False
        
        db = self.db
        
        if creator is None:
            creator = self._getUsername()
        ptr = entity.globalpointer.id
        labels = db.query(Label).filter_by(
            creator=creator, labelname=label, entity=ptr, targettable=table)\
            .all()
        return bool(labels)


    def createLabel(self, label, table, entity=None):
        record = self.insertNewOwnedRecord(Label)
        record.labelname = label
        record.targettable = table
        if entity:
            record.entity = entity
        self.updateRecordWithID(record)
        return record


def accessor(db):
    return Accessor(db)


# version
__id__ = "$Id$"

# End of file 
