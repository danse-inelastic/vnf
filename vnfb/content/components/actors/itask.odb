#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from luban.content import load, select, alert

from luban.components.AuthorizedActor import AuthorizedActor as base


class Actor(base):


    class Inventory(base.Inventory):

        import pyre.inventory

        id = pyre.inventory.str(name='id')

    def checkProgress(self, director):
        itask = director.clerk.getRecordByID('itasks', self.inventory.id)

        from vnfb.utils.itask import progressbarID
        pbarid = progressbarID(itask)
        selectpbar = select(id=pbarid)
        
        if itask.state in ['running', 'finished']:
            return selectpbar.setAttr(
                percentage=itask.progress_percentage,
                status=itask.progress_text,
                )
        if itask.state in ['failed', 'cancelled']:
            # alert developers that an itask failed
            # username = director.sentry.username
            # user = director.clerk.getUser(username)
            # from vnfb.utils.communications import announce
            # announce(director, 'itask-failed', itask, user)
            # error message for user
            msg = 'itask #%s %s' % (itask.id, itask.state)
            try:
                beneficiary = itask.beneficiary and \
                              itask.beneficiary.dereference(director.clerk.db)
            except:
                beneficiary = None
            if beneficiary:
                msg += ' for %s#%s' % (beneficiary.__class__.__name__, beneficiary.id)
            if itask.progress_text:
                msg += ' at %s' % itask.progress_text
            #
            return [
                selectpbar.progressbar('cancel'),
                alert(msg),
                ]

        raise RuntimeError, "Unknown itask state: %s" % itask.state


    def __init__(self, name='itask'):
        super(Actor, self).__init__(name)
        return


def actor(): return Actor()


# version
__id__ = "$Id$"

# End of file 

