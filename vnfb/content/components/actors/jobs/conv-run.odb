#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

# XXX: Much of the functionality is borrowed from "jobs/submit" actor. Refactor!

import time

import os
from luban.content.ProgressBar import ProgressBar
from luban.content import load, select
from vnfb.utils import launch_detached, bindir
from vnfb.qeutils.qeutils import latestJob
from vnfb.qeutils.qeconst import JOB_STATE

import luban.content as lc
from vnfb.qeutils.qeconst import ID_CONV_JOBS
from vnfb.qeutils.qeutils import convJobId, convJobRowId

from luban.components.AuthorizedActor import AuthorizedActor as base
class Actor(base):

    class Inventory(base.Inventory):
        import pyre.inventory
        id          = pyre.inventory.str('id', default='')      # Simulation Id
        taskid      = pyre.inventory.str('taskid', default='')
        convid      = pyre.inventory.str('convid', default='')
        paramid     = pyre.inventory.str('paramid', default='')

        rownum      = pyre.inventory.int('rownum', default=0)
        colnum      = pyre.inventory.int('colnum', default=0)


    def default(self, director):
        "Not implemented"
        pass


    def run(self, director):
        "Submit job to the computing nodes. Trace job status."
        jTable          = lc.document()
        splitter        = jTable.splitter(orientation="vertical")
        self._jobTitle(splitter)
        self._jobTable(director, splitter)

        return [select(id=ID_CONV_JOBS).replaceContent(jTable),
                load(actor      ='jobs/conv-run',
                      routine   = 'addRow',
                      id        = self.id,
                      taskid    = self.taskid,
                      paramid   = self.paramid)]


    def _jobTitle(self, splitter):
        sP          = splitter.section(id="qe-tasks-label")
        sP.add(lc.paragraph(text="Convergence Jobs", Class="qe-section-inline"))
        sP.add(lc.document(Class="clear-both"))


    def _jobTable(self, director, splitter):
        visual   = 'material_simulations/espresso-convergence/table-jobs'
        sT          = splitter.section()                        # path indicator
        table       = director.retrieveVisual(  visual,
                                                director,
                                                id      = self.id,
                                                paramid = self.paramid,
                                                part    = "header")
        sT.add(table)

    
    def addRow(self, director):
        visual      = 'material_simulations/espresso-convergence/table-jobs'
        row         = director.retrieveVisual(  visual,
                                                director,
                                                id      = self.id,
                                                paramid = self.paramid,
                                                rownum  = self.rownum)
        action      = []
        action.append(select(id=convJobRowId(self.rownum)).replaceContent(row))
        action.append(load(actor    ='jobs/conv-run',
                          routine   = 'runJob',
                          id        = self.id,
                          taskid    = self.taskid,
                          paramid   = self.paramid,
                          rownum    = self.rownum))

        return action


    def runJob(self, director):
        self.submitJob(director)
        time.sleep(0.2)     # Give a bit time to generate job record

        return self.populateRow(director)

#        if self.colnum < 4:
#            action.append(load(actor    ='jobs/conv-run',
#                              routine   = 'setCell',
#                              id        = self.id,
#                              paramid   = self.paramid,
#                              colnum    = self.colnum + 1,
#                              rownum    = self.rownum))
#
#        if (self.colnum + 1) % 5 == 0 and self.rownum < 1:
#            action.append(load(actor      ='jobs/conv-run',
#                              routine   = 'addRow',
#                              id        = self.id,
#                              paramid   = self.paramid,
#                              rownum    = self.rownum + 1))


    def submitJob(self, director):
        "Spawns process that submits job to the computing nodes"
        cmd = os.path.join(bindir, "jobdriver.py")

        options =   { 'id':       self.inventory.id,
                      'taskid':   self.inventory.taskid,
                    }

        options = self._refine(options)
        optstr  = ' '.join([ '--%s="%s"' % (k,v) for k,v in options.iteritems() ])
        cmd     += ' ' + optstr

        launch_detached(cmd)


    def _refine(self, opts):
        "pyre complains about parameters like: '--subtype=', so we get rid of them"
        options     = {}
        for o in opts.keys():
            if opts[o].strip() != '':   # option is not empty
                options[o]  = opts[o]

        return options



    def populateRow(self, director):
        action      = []
        action.append(self.jobId(director))
        action.append(self.taskType())
        action.append(self.progressBar(director))
        action.append(self.results())
        action.append(self.optimal())
        
        return action


    def jobId(self, director):
        "Displays id of the current job"
        jobs        = director.clerk.getQEJobs(where="taskid='%s'" % self.taskid)

        if not jobs:
            return select(id=convJobId(self.rownum, 0)).replaceContent("None")

        job  = latestJob(jobs)
        link = lc.link(label   = job.id,
                       onclick = load(actor     = 'jobs/jobs-view',
                                      id        = self.id,
                                      taskid    = self.taskid,
                                      jobid     = job.id,
                                      type      = "PW"))     # XXX: Fix!!!
                        
        return select(id=convJobId(self.rownum, 0)).replaceContent(link)

        
    def taskType(self):
        return select(id=convJobId(self.rownum, 1)).replaceContent("PW")


    def progressBar(self, director):
        pbar    = ProgressBar( id           = self.pbarId(self.rownum),
                                status      = 'Submitting job ...',
                                percentage  = 30,
                                skip        = 2000,    # time interval?
                            )

        pbar.onchecking = load( actor    = 'jobs/conv-run',
                                routine  = 'checkStatus',
                                id        = self.id,
                                taskid    = self.taskid,
                                paramid   = self.paramid,
                                rownum    = self.rownum)

        # Temp
        pbar.onfinished  = [load(actor    = 'material_simulations/espresso-convergence/param-view',
                                 id       = self.id,
                                 convid   = self.convid,
                                 paramid  = self.paramid)]
                                 
#        pbar.onfinished  = [load(actor      = "jobs/conv-run",
#                                 routine    = "checkResults",
#                                 id         = self.id,
#                                 taskid     = self.taskid,
#                                 paramid    = self.paramid,
#                                 rownum     = self.rownum)]

        return select(id=convJobId(self.rownum, 2) ).replaceContent(pbar)


    def results(self):
        link    = "None"    #lc.link(label="ZZZZZ.tgz")
        return select(id=convJobId(self.rownum, 3) ).replaceContent(link)


    def optimal(self):
        return select(id=convJobId(self.rownum, 4) ).replaceContent("None")


    def checkStatus(self, director):
        selectpbar      = select(id = self.pbarId(self.rownum))
        job     = None
        jobs    = director.clerk.getQEJobs(where="taskid='%s'" % self.taskid)
        if jobs:
            job  = latestJob(jobs)

        state   = self._getStatus(job)
        return  selectpbar.setAttr( percentage  = state[0],
                                    status      = state[1],
                                    )

    def checkResults(self, director):
        # If optimal value, show the value
        # Otherwise add row and submit the job again!
        print "I am done!"


    def pbarId(self, rownum):
        PBAR_BASE   = "pbar"
        return '%s-%s' % (PBAR_BASE, rownum)

    
    def _getStatus(self, job):
        status  = (100, "Unknown status")
        if not job or not job.status in JOB_STATE.keys():
            return status

        return JOB_STATE[job.status]


    def __init__(self):
        super(Actor, self).__init__(name='jobs/submit')


    def _configure(self):
        super(Actor, self)._configure()
        self.id         = self.inventory.id
        self.taskid     = self.inventory.taskid
        self.convid     = self.inventory.convid
        self.paramid    = self.inventory.paramid

        self.rownum     = self.inventory.rownum
        self.colnum     = self.inventory.colnum


    def _init(self):
        super(Actor, self)._init()

def actor():
    return Actor()


__date__ = "$May 2, 2010 10:42:56 AM$"


