#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

import os
from luban.content.ProgressBar import ProgressBar
from luban.content import load, select
from luban.components.AuthorizedActor import AuthorizedActor as base
from vnfb.utils import launch_detached, bindir

class Actor(base):

    class Inventory(base.Inventory):
        import pyre.inventory
        id          = pyre.inventory.str('id', default='')      # Simulation Id
        taskid      = pyre.inventory.str('taskid', default='')
        subtype     = pyre.inventory.str('subtype', default='')


    def default(self, director):
        "Not implemented"
        pass
    

    def submit(self, director):
        "Submit job to the computing nodes. Trace job status."
        self.submitJob(director)    

        return self.progressBar(director)


    def submitJob(self, director):
        "Spawns process that submits job to the computing nodes"

        cmd = os.path.join(bindir, "qedriver.py")

        options =   {
                    'id':       self.inventory.id,
                    'taskid':   self.inventory.taskid,
                    'subtype':  self.inventory.subtype,
                    }

        optstr = ' '.join([ '--%s="%s"' % (k,v) for k,v in options.iteritems() ])
        cmd += ' ' + optstr

        launch_detached(cmd)
        return



    def progressBar(self, director):
        pbar    = ProgressBar(
                            id = 'pbar-%s' % self.taskid,
                            status = 'Submitting job...',
                            percentage = 0,
                            skip = 2000,
                            )

        pbar.onchecking = load(
                                actor   = 'jobs/submit',
                                routine = 'checkStatus',
                                taskid  = self.taskid,
                                )

        pbar.onfinished  = [
                            load(actor = "material_simulations/espresso/sim-view",
                                 id = self.id),
                            ]
        
        return select(id="run-task-%s" % self.taskid).replaceContent(pbar)


    def checkStatus(self, director):
        selectpbar      = select(id='pbar-%s' % self.taskid)
        return  selectpbar.setAttr(
                                    percentage=10,
                                    status="Submitting job...",
                                    )

    def __init__(self):
        super(Actor, self).__init__(name='jobs/submit')

        return


    def _configure(self):
        super(Actor, self)._configure()
        self.id         = self.inventory.id
        self.taskid     = self.inventory.taskid
        self.subtype    = self.inventory.subtype


    def _init(self):
        super(Actor, self)._init()
        self._files = []
        return

def actor():
    return Actor()


__date__ = "$Nov 4, 2009 9:27:51 AM$"


# ********************** DEAD CODE ***********************

#        extra_options = task.options
#        for i in range(len(extra_options)/2):
#            k = 'iworker.%s' % extra_options[2*i]
#            v = extra_options[2*i+1]
#            options[k] = v
#            continue


# id = 'itask-%s-pbar' % task.id,                                            )
#            link.onchecking = load(
#                actor='itask',
#                routine='checkProgress',
#                id = self._task.id,
#                )
# select(element=lc.paragraph('test')).show(),
#    def traceStatus(self, director):
#
#        pass
#
#    def submitProgress(self, director):
#        #time.sleep(2)
#        return self._setProgressBar()
#        return load(actor="material_simulations/espresso/sim-view",
#                    id=self.id)

