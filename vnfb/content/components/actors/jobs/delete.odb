#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from vnfb.qeutils.qegrid import QEGrid

from luban.content import select
from luban.content.Paragraph import Paragraph
from luban.content.Form import Form
from luban.content.FormSubmitButton import FormSubmitButton
from luban.content import load

import luban.content as lc
from luban.components.AuthorizedActor import AuthorizedActor as base

# Requires simulation id,
class Actor(base):

    class Inventory(base.Inventory):
        import pyre.inventory
        id      = pyre.inventory.str('id', default='')    # Simulation Id
        taskid  = pyre.inventory.str('taskid', default='')
        jobid   = pyre.inventory.str('jobid', default='')
        type    = pyre.inventory.str('type', default='')


    def default(self, director):
        return select(id='main-display-area').replaceContent(self.content(director))


    def content(self, director):

        def viewIndicator(director):
            qelink  = load( actor           = 'materialsimulation',
                            filter_key      = 'type',
                            filter_value    = 'qesimulations')

            path = []
            path.append(('Simulations ', load(actor='materialsimulation')))
            path.append(('Quantum Espresso ', qelink))
            path.append(('%s ' % self.id, load(actor    = 'material_simulations/espresso/sim-view',
                                               id       = self.id))
                        )
            path.append("Delete %s Task: %s" % (self.type, self.taskid))

            return director.retrieveVisual('view-indicator', path=path)

        doc         = lc.document(title="Delete %s Task: %s" % (self.type, self.taskid))
        splitter    = doc.splitter(orientation="vertical")
        sA          = splitter.section()
        sA.add(viewIndicator(director))
        sB          = splitter.section()
        sB.add(Paragraph(text="Warning: Deleting job will also delete results of the job"))
        sB.add(Paragraph(text="Are you sure you want to delete the job?"))
        sB.add(self._setForm())

        return doc


    def _setForm(self):
        form        = Form()
        submit      = FormSubmitButton(label="Delete")
        cancel      = lc.button(label="Cancel")
        cancel.onclick = load(actor = 'material_simulations/espresso/sim-view', id=self.id)

        st          = QEGrid(lc.grid()) # Submit Table
        st.addRow((submit, cancel), ("qe-action-accept", "qe-action-cancel"))

        form.add(st.grid())
        form.onsubmit   = select(element=form).submit(actor     = 'material_simulations/espresso/delete',
                                                      routine   = 'deleteRecord',
                                                      id        = self.id,
                                                      jobid     = self.jobid,
                                                      taskid    = self.taskid)

        return form


    def deleteRecord(self, director):
        """Delete task record"""
        self._deleteJobs(director)      # Not tested
        self._deleteLocalResults(director)   # Not tested
        self._deleteRemoteResults(director)   # Not tested

        return load(actor='material_simulations/espresso/sim-view', id=self.id)


    def _deleteJobs(self, director):
        """Deletes jobs"""
        job            = director.clerk.getQEJobs(id = self.jobid)
        if job:
            job.setDirector(director)
            job.deleteRecord()


    def _deleteLocalResults(self, director):
        "Delete local results. E.g. clean up directory"
        pass


    def _deleteRemoteResults(self, director):
        "Delete remote results. E.g. clean up directory"
        pass



    def __init__(self):
        super(Actor, self).__init__(name='jobs/delete')

        return


    def _configure(self):
        super(Actor, self)._configure()
        self.id             = self.inventory.id
        self.jobid          = self.inventory.jobid
        self.taskid         = self.inventory.taskid
        self.type           = self.inventory.type


    def _init(self):
        super(Actor, self)._init()
        return

def actor():
    return Actor()


__date__ = "$Nov 4, 2009 7:21:22 PM$"


