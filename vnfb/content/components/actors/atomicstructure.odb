#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from luban.content import load, select, alert
import luban.content as lc



# common actions
setpagetitle = select(id='').setAttr(title='Virtual neutron facility: atomic structures')


from  vnfb.components.visuals import set_contextual_help
sethelppage = set_contextual_help(
    page='UserGuide-atomicstructures', label='about atomicstructure')



from vnfb.components.MasterTable import FilterSyntaxError, MasterTableActor as base

class Actor(base):

    class Inventory(base.Inventory):

        import pyre.inventory

        id = pyre.inventory.str('id')
        description = pyre.inventory.str('description')
        
        formids = pyre.inventory.list('formids')
        viewid = pyre.inventory.str('viewid')


    def default(self, director):
        return self.showListView(director)


    def debug_tableview(self, director):
        p       = lc.page()
        doc     = p.document(id='main-display-area')
        doc.add(self.createListView(director))
        return p


    def replaceBodyFrameWithAtomicStructureList(self, director):
        body_frame          = select(id='body-frame')
        body_skeleton       = director.retrieveVisual(
            'body-skeleton', context='atomicstructure', director=director)
        main_display_area   = body_skeleton.find(id='main-display-area')

        try:
            atomicstructurelist = self.createListView(director)
        except FilterSyntaxError, msg:
            return alert('filter syntax error: %s' % msg)
            
        main_display_area.add(atomicstructurelist)

        material_portlet    = body_skeleton.find(id='main-portlet-my-atomicstructures')
        material_portlet.selected = 1

        shownewframe = body_frame.replaceContent(body_skeleton)
        return [
            shownewframe,
            setpagetitle,
            ]


    def showListView(self, director):
        try:
            view = self.createListView(director)
        except FilterSyntaxError, msg:
            return alert('filter syntax error: %s' % msg)
        return [
            select(id = 'main-display-area').replaceContent(view),
            setpagetitle,
            ] + sethelppage
    
            
    def createListView(self, director):
        order_by        = self.inventory.order_by
        reverse_order   = self.inventory.reverse_order
        number_records_per_page     = self.inventory.number_records_per_page
        page_number     = self.inventory.page_number

        filter_expr     = self.inventory.filter_expr
        filter_key      = self.inventory.filter_key
        filter_value    = self.inventory.filter_value

        label = self.inventory.label
        
        tableview = director.retrieveVisual(
                                            'atomicstructure/tableview',
                                            director,
                                            self.name,
                                            label           = label,
                                            filter_expr     = filter_expr,
                                            filter_key      = filter_key,
                                            filter_value    = filter_value,
                                            order_by        = order_by,
                                            reverse_order   = reverse_order,
                                            number_records_per_page = number_records_per_page,
                                            page_number     = page_number
                                            )
        return tableview


    def debug_newAtomicStructureForm(self, director):
        p       = lc.page()
        doc     = p.document(id='main-display-area')
        doc.add(self.newAtomicStructureForm(director))
        return p


    def newAtomicStructureForm(self, director):
        domaccess = director.retrieveDOMAccessor('atomicstructure')
        s = domaccess.newAtomicStructure()
        record = domaccess.orm(s)
        self.inventory.id = record.id
        return director.retrieveVisual('atomicstructure/new-structure',
                                        director    = director,
                                        id          = self.inventory.id)
        #return self.editAtomicStructureForm(director)


    def debug_editAtomicStructureForm(self, director):
        p       = lc.page()
        doc     = p.document(id='main-display-area')
        doc.add(self.editAtomicStructureForm(director))
        return p


    def editAtomicStructureForm(self, director):
        return director.retrieveVisual(
                                        'atomicstructure/edit-structure-form',
                                        director    = director,
                                        id          = self.inventory.id
                                      )


    def canceledit(self, director):
        domaccess = self._domaccess(director)
        id = self.inventory.id
        if domaccess.isTransient(id=id):
            s = domaccess.getAtomicStructure(id)
            record = domaccess.orm(s)
            domaccess.removeTransient(record=record)
            domaccess.orm.destroy(s)
        return self.showListView(director)


    def delete(self, director):
        domaccess = self._domaccess(director)
        id = self.inventory.id
        s = domaccess.getAtomicStructure(id)
        domaccess.orm.destroy(s)
        return


    def doneediting(self, director):
        actions = []; messages = []

        id = self.inventory.id
        domaccess = self._domaccess(director)
        struct = domaccess.getAtomicStructure(id)
        #
        if len(struct) ==0:
            messages.append('sorry. you have not added an atom to your structure.')
            viewid = self.inventory.viewid
            actions.append(select(id=viewid).find(name='atoms').addClass('highlighted'))
        
        formids = self.inventory.formids
        actions += [select(id=id).addClass('highlighted') for id in formids]
        n = len(formids)
        messages.append('sorry. there are %s forms to fill out. please look for highlighted sections.' % n)

        if len(actions):
            actions.append(alert('\n\n'.join(messages)))
            return actions

        # update the chemical formula
        record = domaccess.orm(struct)
        record.chemical_formula = struct.getChemicalFormula()
        domaccess.db.updateRecord(record)
        
        return self.showListView(director)


    def debug_overview(self, director):
        p       = lc.page()
        doc     = p.document(id='main-display-area')
        doc.add(self.createOverview(director))
        return p


    def showOverview(self, director):
        sethelppage = set_contextual_help(
            page='UserGuide-atomicstructures.html#overview-of-an-atomic-structure',
            )

        doc = self.createOverview(director)
        shownewdoc = select(id='main-display-area').replaceContent(doc)
        
        return sethelppage + [shownewdoc]
    
        
    def showDetailsview(self, director):
        doc = self.createDetailsview(director)
        return select(id='main-display-area').replaceContent(doc)
    
        
    def createOverview(self, director):
        id = self.inventory.id
        domaccess = self._domaccess(director)
        
        if not domaccess.isConstructued(id=id):
            # structure not ready
            doc = self.editAtomicStructureForm(director)
            
        else:
            # structure good
            doc = director.retrieveVisual(
                'atomicstructure/overview',
                director  = director,
                id        = self.inventory.id)
            
        return doc


    def createDetailsview(self, director):
        id = self.inventory.id
        domaccess = self._domaccess(director)
        
        if not domaccess.isConstructued(id=id):
            # structure not ready
            doc = self.editAtomicStructureForm(director)
            
        else:
            # structure good
            doc = director.retrieveVisual(
                'atomicstructure/viewdetails',
                director  = director,
                id        = self.inventory.id)
            
        return doc


    def changeDescriptionAndUpdateAtomicStructureView(self, director):
        id = self.inventory.id
        description = self.inventory.description
        domaccess = self._domaccess(director)
        domaccess.setDescription(id, description)
        return self.showOverview(director)


    def _defaults(self):
        super(Actor, self)._defaults()
        self.inventory.order_by = 'date'
        self.inventory.reverse_order = True
        return


    def _domaccess(self, director):
        return director.retrieveDOMAccessor(self.name)


    def __init__(self, name='atomicstructure'):
        super(Actor, self).__init__(name)
        return



def actor(): return Actor()


# version
__id__ = "$Id$"

# End of file 

