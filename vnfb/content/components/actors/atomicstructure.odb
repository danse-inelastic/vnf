#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from luban.content import load, select, alert
import luban.content as lc


from vnfb.components.MasterTable import FilterSyntaxError, MasterTableActor as base


class Actor(base):


    class Inventory(base.Inventory):

        import pyre.inventory

        id = pyre.inventory.str('id')
        description = pyre.inventory.str('description')


    def default(self, director):
        return self.showListView(director)


    def debug_tableview(self, director):
        p = lc.page()
        doc = p.document(id='main-display-area')
        doc.add(self.createListView(director))
        return p


    def replaceBodyFrameWithAtomicStructureList(self, director):
        body_frame = select(id='body-frame')
        body_skeleton = director.retrieveVisual('body-skeleton')
        main_display_area = body_skeleton.find(id='main-display-area')

        try:
            atomicstructurelist = self.createListView(director)
        except FilterSyntaxError, msg:
            return alert('filter syntax error: %s' % msg)
            
        main_display_area.add(atomicstructurelist)

        material_portlet = body_skeleton.find(id='main-portlet-my-atomicstructures')
        material_portlet.selected = 1
        
        return body_frame.replaceContent(body_skeleton)


    def showListView(self, director):
        try:
            view = self.createListView(director)
        except FilterSyntaxError, msg:
            return alert('filter syntax error: %s' % msg)
        return [
            select(id='main-display-area').replaceContent(view),
            ]
    
            
    def createListView(self, director):
        order_by = self.inventory.order_by
        reverse_order = self.inventory.reverse_order
        number_records_per_page = self.inventory.number_records_per_page
        page_number = self.inventory.page_number

        filter_expr = self.inventory.filter_expr
        filter_key = self.inventory.filter_key
        filter_value = self.inventory.filter_value

        label = self.inventory.label
        
        tableview = director.retrieveVisual(
            'atomicstructure/tableview',
            director, self.name,
            label = label,
            filter_expr=filter_expr, filter_key=filter_key, filter_value=filter_value,
            order_by=order_by,
            reverse_order=reverse_order,
            number_records_per_page=number_records_per_page,
            page_number=page_number)

        return tableview


    def debug_newAtomicStructureForm(self, director):
        p = lc.page()
        doc = p.document(id='main-display-area')
        doc.add(self.newAtomicStructureForm(director))
        return p


    def newAtomicStructureForm(self, director):
        return director.retrieveVisual(
            'atomicstructure/create-structure-form',
            director=director,
            id =self.inventory.id)


    def showOverview(self, director):
        doc = director.retrieveVisual(
            'atomicstructure/overview', director=director, id = self.inventory.id)
        return select(id='main-display-area').replaceContent(doc)


    def __init__(self, name='atomicstructure'):
        super(Actor, self).__init__(name)
        return



def actor(): return Actor()


# version
__id__ = "$Id$"

# End of file 

