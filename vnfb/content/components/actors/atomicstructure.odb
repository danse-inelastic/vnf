#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from luban.content import load, select, alert
import luban.content as lc


from vnfb.components.MasterTable import FilterSyntaxError, MasterTableActor as base


class Actor(base):


    class Inventory(base.Inventory):

        import pyre.inventory

        id = pyre.inventory.str('id')
        description = pyre.inventory.str('description')


    def default(self, director):
        return self.showListView(director)


    def replaceBodyFrameWithAtomicStructureList(self, director):
        body_frame = select(id='body-frame')
        body_skeleton = director.retrieveVisual('body-skeleton')
        main_display_area = body_skeleton.find(id='main-display-area')

        try:
            atomicstructurelist = self.createListView(director)
        except FilterSyntaxError, msg:
            return alert('filter syntax error: %s' % msg)
            
        main_display_area.add(atomicstructurelist)

        material_portlet = body_skeleton.find(id='main-portlet-my-atomicstructures')
        material_portlet.selected = 1
        
        return body_frame.replaceContent(body_skeleton)


    def showListView(self, director):
        try:
            view = self.createListView(director)
        except FilterSyntaxError, msg:
            return alert('filter syntax error: %s' % msg)
        return [
            select(id='main-display-area').replaceContent(view),
            ]
    
            
    def createListView(self, director):

        domaccess = self.getAtomicStructureAccess(director)
        
        from vnfb.components.MasterTable import MasterTableFactory, filtercompiler
        def countrecords(filter, label=None):
            return domaccess.countAtomicStructures(filter, label=label)
        def createtable(order_by, reverse_order, slice, filter, label=None):
            return self.createAtomicStructureTable(
                director,
                order_by=order_by,
                reverse_order=reverse_order,
                slice=slice,
                filter=filter,
                label=label)
        compilefilter = filtercompiler(columns, measure2dbcol)

        smartlabelaccess = director.retrieveDOMAccessor('smartlabel')
        def filterfromlabel(label):
            return smartlabelaccess.createFilterExprFromLabel(
                label, self.name)
        smartlabels = smartlabelaccess.getLabelNames(self.name)

        labelaccess = director.retrieveDOMAccessor('label')
        labels = labelaccess.getLabelNames(self.name)
            
        factory = MasterTableFactory(
            self.name, countrecords, createtable,
            compilefilter, filtercols,
            filterfromlabel, smartlabels, labels)

        order_by = self.inventory.order_by
        reverse_order = self.inventory.reverse_order
        number_records_per_page = self.inventory.number_records_per_page
        page_number = self.inventory.page_number

        filter_expr = self.inventory.filter_expr
        filter_key = self.inventory.filter_key
        filter_value = self.inventory.filter_value

        label = self.inventory.label
        
        tableview = factory.create(
            label = label,
            filter_expr=filter_expr, filter_key=filter_key, filter_value=filter_value,
            order_by=order_by,
            reverse_order=reverse_order,
            number_records_per_page=number_records_per_page,
            page_number=page_number)

        # add new button
        toolbar = tableview.find(id='atomicstructure-table-toptoolbar')
        #toolbar.add(Paragraph(text='|', Class='splitter'))
        #
        button = lc.button(label='New', tip='create new atomic structure', icon='new.png')
        toolbar.add(button)
        button.onclick = load(actor=self.name, routine='new')
        
        return tableview


    def createAtomicStructureTable(
        self, director,
        order_by=None, reverse_order=None, slice=None,
        filter=None,
        label=None):
        
        domaccess = self.getAtomicStructureAccess(director)
        atomicstructures = domaccess.getAtomicStructures(
            order_by=order_by, reverse_order=reverse_order, slice=slice,
            filter=filter,
            label=label,
            )

        cols = columns
        args = atomicstructures, cols, director
        thetable = director.retrieveComponent(
            'atomicstructure-table',
            factory="visual", args=args,
            vault=['visuals'])
        thetable.oncellchanged = select(element=thetable).notify(
            event='row-changed', actor='atomicstructuretable', routine='processRowChange')
        return thetable


    def __init__(self, name='atomicstructure'):
        super(Actor, self).__init__(name)
        return


    # db access
    def getAtomicStructureAccess(self, director):
        return director.retrieveDOMAccessor(self.name)

    
    def _getAtomicStructure(self, director):
        id = self.inventory.id
        return self.getAtomicStructureAccess(director).getAtomicStructure(id)


columns = [ 'selected', 'id', 'description', 'chemical_formula', 'created']
measure2dbcol = {
    'description': 'short_description',
    'created': 'date',
    }
filtercols = columns[1:]


def actor(): return Actor()


# version
__id__ = "$Id$"

# End of file 

