#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#



#
import luban.content as lc
from luban.content import select, load, alert


#
from vnfb.dom.material_simulations.Phonons import Phonons

from luban.components.Actor import Actor
import luban.orm
base = luban.orm.object2actor(Phonons)
class Actor(base):

    class Inventory(base.Inventory):

        import pyre.inventory

        ids = pyre.inventory.list(name='ids')


    def createGraphicalView(self, director):
        ids = self.inventory.ids
        if ids: return self._createGraphicalViewM(director)
        return self._createGraphicalView1(director)


    def _createGraphicalViewM(self, director):
        ids = self.inventory.ids
        nids = len(ids)
        nrows = (nids+1)/2
        doc = lc.document(Class='container')
        grid = lc.grid(); doc.add(grid)
        for i in range(nrows):
            row = grid.row()

            cell1 = row.cell();
            self.inventory.id = ids[2*i];
            cell1.add(self._createGraphicalView1(director))

            if 2*i+1 < nids:
                cell2 = row.cell();
                self.inventory.id = ids[2*i+1];
                cell2.add(self._createGraphicalView1(director))

            continue
        
        return doc


    def _createGraphicalView1(self, director):
        domaccess = self._domaccess(director)
        obj = self._load(director)
        if not obj: return
        orm = domaccess.orm
        db = orm.db
        
        record = orm(obj)

        # the document to build
        doc = lc.document(title='phonons %s' % record.id)

        # link to the computation
        origin = record.getOrigin(db)
        origin_link = lc.link(
            label='computed from %s %s' % (origin.getTableName(), origin.id),
            onclick = load(actor='computation', routine='view',
                           type = origin.getTableName(), id = origin.id)
            )
        doc.add(origin_link)
        
        # plot
        p = self._createPlot1(obj, director)
        doc.add(p)
        
        return doc


    def _createPlot1(self, disp, director):
        domaccess = self._domaccess(director)

        disp = domaccess.getDataForPhonons(disp)
        x, ys = disp.getDefaultDispersionPlot()
        
        # plot
        p = lc.plot2d()
        for i,y in enumerate(ys):
            p.curve(x=list(x), y=list(y), label=str(i))
            continue

        return p
        

    def _initComputationOrm(self, director):
        domaccess = director.retrieveDOMAccessor('computation')
        return domaccess.orm


    def _domaccess(self, director):
        self._initComputationOrm(director)
        return director.retrieveDOMAccessor('material_simulations/phonons')
            

def actor():
    return Actor('orm/phonons')


# version
__id__ = "$Id$"

# End of file 
