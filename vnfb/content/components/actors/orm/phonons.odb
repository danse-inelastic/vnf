#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#



#
import luban.content as lc
from luban.content import select, load, alert
import os, tempfile
import numpy as np

#
from vnfb.dom.material_simulations.Phonons import Phonons

from luban.components.Actor import Actor
import luban.orm
base = luban.orm.object2actor(Phonons)
class Actor(base):

    class Inventory(base.Inventory):

        import pyre.inventory

        ids = pyre.inventory.list(name='ids')


    def createGraphicalView(self, director):
        ids = self.inventory.ids
        if ids: return self._createGraphicalViewM(director)
        return self._createGraphicalView1(director)


    def _createGraphicalViewM(self, director):
        ids = self.inventory.ids
        nids = len(ids)
        nrows = (nids+1)/2
        doc = lc.document(Class='container')
        grid = lc.grid(); doc.add(grid)
        for i in range(nrows):
            row = grid.row()

            cell1 = row.cell();
            self.inventory.id = ids[2*i];
            cell1.add(self._createGraphicalView1(director))

            if 2*i+1 < nids:
                cell2 = row.cell();
                self.inventory.id = ids[2*i+1];
                cell2.add(self._createGraphicalView1(director))

            continue
        
        return doc


    def _createGraphicalView1(self, director):
        domaccess = self._domaccess(director)
        obj = self._load(director)
        if not obj: return
        orm = domaccess.orm
        db = orm.db
        record = orm(obj)
        # the document to build
        title='phonons %s' % record.id
        short_description = record.short_description
        if short_description:
            title += ': %s' % short_description
        doc = lc.document(title=title)
        # link to the computation
        try:
            origin = record.getOrigin(db)
        except:
            import traceback
            msg = traceback.format_exc()
            self._debug.log(msg)
            origin = None
        if origin:
            origin_link = lc.link(
                label='computed from %s %s' % (origin.getTableName(), origin.id),
                onclick = load(actor='computation', routine='view',
                               type = origin.getTableName(), id = origin.id)
                )
            doc.add(origin_link)
        # plot
        p, link = self._createPlotAndDataLink(obj, director)
        doc.add(p)
        doc.add(link)
        return doc

    def _createPlotAndDataLink(self, disp, director):
        domaccess = self._domaccess(director)
        record = domaccess.orm(disp)
        try:
            domaccess.standardizeDataInIDFFormat(record.id)
        except NotImplementedError:
            import traceback
            tb = traceback.format_exc()
            self._debug.log(tb)
            p = lc.paragraph()
            p.text = [
                'Plotting for phonons#%s failed: data missing or in wrong format' % (
                    record.id,),
                ]
            h = lc.htmldocument()
            return p,h
        try:
            disp = domaccess.getDataForPhonons(disp)
        except NotImplementedError:
            return lc.paragraph(text=['Parser for this data format is not yet implemented'])
        if not disp: return lc.paragraph(text=['Data missing'])
        x, ys, xticks = disp.getDefaultDispersionPlot()
        # plot
        caption = (
            'Horizontal axis: high-symmetry points in the reciprocal space. '
            'Vertical axis: energy in meV'
            )
        p = lc.plot2d(xticks=xticks, caption=caption)
        for i,y in enumerate(ys):
            p.curve(x=list(x), y=list(y), label=str(i))

        # download link
        label = 'Download dispersions'
        ondownload = load(
            actor=self.name, routine='getfile', id=self.inventory.id)
        downloadLink = lc.downloader(label=label, ondownload=ondownload)
        return p, downloadLink


    def getfile(self, director):
        disp = self._load(director)
        content = self._createDownloadContent(disp, director)
        filename = 'phonon-dispersions-%s.plot' % self.inventory.id
        return lc.file(filename=filename, content=content)
        

    def _createDownloadContent(self, disp, director):
        domaccess = self._domaccess(director)
        record = domaccess.orm(disp)
        domaccess.standardizeDataInIDFFormat(record.id)
        disp = domaccess.getDataForPhonons(disp)
        if not disp: 
            raise RuntimeError, "Dispersion data missing"
        x, ys, xticks = disp.getDefaultDispersionPlot()
        #
        content = []
        for point,label in xticks:
            content.append('# '+str(point)+' is '+label)
        for xval,yvals in zip(x, np.array(ys).transpose()):
            line = str(xval)+' '
            for yval in yvals:
                line+=str(yval)+' '
            content.append(line)
        return '\n'.join(content)


    def _initComputationOrm(self, director):
        domaccess = director.retrieveDOMAccessor('computation')
        return domaccess.orm


    def _domaccess(self, director):
        self._initComputationOrm(director)
        return director.retrieveDOMAccessor('material_simulations/phonons')
            

def actor():
    return Actor('orm/phonons')


# version
__id__ = "$Id$"

# End of file 
