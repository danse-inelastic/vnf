#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from luban.content import alert, load

from luban.components.AuthorizedActor import AuthorizedActor as base


class Actor(base):


    class Inventory(base.Inventory):

        import pyre.inventory
        table = pyre.inventory.str(name='table')
        label = pyre.inventory.str(name='label')
        filter_expr = pyre.inventory.str(name='filter_expr')
        filter_key = pyre.inventory.str(name='filter_key')
        filter_value = pyre.inventory.str(name='filter_value')


    def create(self, director):
        table = self.inventory.table
        label = self.inventory.label
        filter_expr = self.inventory.filter_expr
        filter_key = self.inventory.filter_key
        filter_value = self.inventory.filter_value
        
        if not label:
            return alert('Please specify a label.')

        if not filter_expr and not filter_value:
            return alert('Please input a filter value in the basic filter or a filter expression in the advanced filter')

        # get all my labels
        labelaccess = director.retrieveDOMAccessor('label')
        labels = labelaccess.getLabelNames(table)

        smartlabelaccess = director.retrieveDOMAccessor('smartlabelaccess')
        smartlabels = smartlabelaccess.getLabelNames(table)
        
        if label in labels or label in smartlabels:
            return alert('you already create this label: %s. Please use a different name.' % label)

        #
        slabel = director.clerk.insertNewOwnedRecord(SmartLabel)
        slabel.label = label
        slabel.filter_expr = filter_expr
        slabel.filter_key = filter_key
        slabel.filter_value = filter_value
        slabel.targettable = table
        director.clerk.updateRecordWithID(slabel)
        return load(actor=table, routine='showListView', label_index=len(labels)+1)
    

    def __init__(self, name='smartlabel'):
        super(Actor, self).__init__(name)
        return


def actor(): return Actor()


# version
__id__ = "$Id$"

# End of file 

