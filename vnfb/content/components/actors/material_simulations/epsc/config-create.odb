# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2011  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

from vnfb.qeutils.qeparser.qeinput import QEInput
from vnfb.dom.QEConfiguration import QEConfiguration
from vnfb.qeutils.qeutils import writeRecordFile, defaultInputName, subtypeMatdyn
#import vnfb.qeutils.filters as filterdir

from luban.content import load
from vnfb.components.EPSCGenerator import EPSCGenerator as base

class Actor(base):

    class Inventory(base.Inventory):
        import pyre.inventory
        
#        subtype     = pyre.inventory.str('subtype', default='')
#
#        # Specific for convergence tests
#        convid      = pyre.inventory.str('convid', default='')
#        paramid     = pyre.inventory.str('paramid', default='')


    def content(self, director):
        "Populates the content for creation of input configuration"
        title   = "Create Input Configuration" #: %s" % self.inventory.type
        label   = "Create Input Configuration"
        return self._document(director, title, label)


    def defaultForm(self, director, visual):
        "Default implementation of input form"
        visual_     = "material_simulations/epsc/input-default"

        return director.retrieveVisual(visual_,
                                       actor        = self.inventory,
                                       director     = director)


#    def createRecord(self, director):
#        "Create configuration record"
#        self._createDBRecord(director)
#        self._updateTaskRecord(director)    # For matdyn mostly
#        self._createFile(director)
#
#        if self.inventory.paramid != "":  # Specific for convergence tests
#            return load( actor    = 'material_simulations/espresso-convergence/param-view',
#                         id       = self.inventory.id,
#                         convid   = self.inventory.convid,
#                         paramid  = self.inventory.paramid)
#
#        return load(actor = 'material_simulations/epsc/sim-view')#, id = self.inventory.id)

#    def _createDBRecord(self, director):
#        # 'text' field is not stored
#        params  = {"taskid":        self.inventory.taskid,
#                   "filename":      self._fname(),          # Set default name if not filename specified
#                   "description":   subtypeMatdyn(self.inventory.subtype), # Store subtype for description
#                   "type":          self.inventory.type
#                   }
#        self.input  = QEConfiguration(director)
#        self.input.createRecord(params)
#
#
#    def _createFile(self, director):
#        "Writes configuration to file"
#        # fn (file name) is fixed and doesn't depend on the filename record
#        fn      = defaultInputName(self.inventory.type)
#
#        writeRecordFile(director.dds, self.input, fn, self.inventory.text)
#
#
#    def _updateTaskRecord(self, director):
#        if self.inventory.subtype == "":
#            return      # No update for empty subtype
#
#        task    = director.clerk.getQETasks(id = self.inventory.taskid)
#        params  = {"subtype": subtypeMatdyn(self.inventory.subtype),}
#        task.setDirector(director)
#        task.updateRecord(params)


#    def _fname(self):
#        # Filename is not set
#        if self.fname == '':
#            return defaultInputName(self.inventory.type)
#
#        return self.fname


    def __init__(self):
        super(Actor, self).__init__(name='material_simulations/epsc/config-create')


    def _configure(self):
        super(Actor, self)._configure()
#        self.subtype        = self.inventory.subtype
#
#        self.convid         = self.inventory.convid
#        self.paramid        = self.inventory.paramid


    def _init(self):
        super(Actor, self)._init()
        return

def actor():
    return Actor()

__date__ = "$Mar 22, 2011 4:08:46 PM$"


