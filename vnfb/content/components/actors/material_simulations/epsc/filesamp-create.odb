# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2011  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

from luban.content import select, load, alert
from vnfb.qeutils.qegrid import QEGrid
from vnfb.qeutils.qeconst import SIMCHAINS, MDSTEPS, ID_MD_LABEL, ID_MD_OPTIONS
from vnfb.qeutils.qeutils import selection2typekey, nonMDChain, noHyphen
from luban.content.FormCheckBox import FormCheckBox
from vnfb.dom.QESimulation import QESimulation

import luban.content as lc
from luban.components.AuthorizedActor import AuthorizedActor as base

from vnfb.epscutils.epscconst import *

class Actor(base):
    """ Create Material file"""

    class Inventory(base.Inventory):
        import pyre.inventory
        a     = pyre.inventory.str('a', default='0')
        b     = pyre.inventory.str('b', default='0')
        c     = pyre.inventory.str('c', default='0')
        ngrain  = pyre.inventory.str('ngrain', default='0')


    def default(self, director):
        return select(id='main-display-area').replaceContent(self.content(director))


    def content(self, director):
        def viewIndicator(director):
            path = []
            path.append(('Simulations ', load(actor='materialsimulation')))
            path.append(('Create New Simulation ', select(id='main-display-area').replaceContent(
                                                          load(actor='materialsimulation',
                                                               routine='newSimulation')
                                                          ))
                        )
            path.append(('EPSC', load(actor='material_simulations/epsc/sim-create')))
            path.append("Create Sample Configuration")
            
            return director.retrieveVisual('view-indicator', path=path)

        doc         = lc.document(title   = "Create Sample Configuration")
        splitter    = doc.splitter(orientation="vertical")
        sA          = splitter.section()
        sA.add(viewIndicator(director))
        sB          = splitter.section()
        visual  = 'material_simulations/epsc/filesamp-form'
        sB.add(director.retrieveVisual(visual, self.inventory, director))

        return doc


    def generateConfig(self, director):
        "Generates config file and redirects to general form"
        # Special cases
        texture = self.generateTexture(int(self.ngrain))

        # Config text
        config  = FILESAMP_T % (self.a, self.b, self.c, self.ngrain, texture)

        return director.redirect(actor   = 'material_simulations/epsc/config-create',
                                routine  = 'default',
                                text     = config,
#                                id      = self.inventory.id,
#                                taskid  = self.inventory.taskid,
                                type    = "filesamp")


    def generateTexture(self, ngrain):
        "Generates angle distribution for each grain"
        import random
        s   = ""
        for i in range(ngrain):
            s   += "\t%s\t%s\t%s\t1\n" % (360.0*random.random(),
                                     180.0*random.random(),
                                     360.0*random.random())
        return s



    def __init__(self):
        super(Actor, self).__init__(name='material_simulations/epsc/filesamp-create')


    def _configure(self):
        super(Actor, self)._configure()
        self.a       = self.inventory.a
        self.b       = self.inventory.b
        self.c       = self.inventory.c
        self.ngrain  = self.inventory.ngrain


    def _init(self):
        super(Actor, self)._init()
        return

def actor():
    return Actor()


__date__ = "$Mar 22, 2011 9:46:59 AM$"


