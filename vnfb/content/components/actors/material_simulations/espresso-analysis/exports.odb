#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

# NOT USED!

from vnfb.qeutils.qegrid import QEGrid

from luban.content import select
from luban.content import load

import luban.content as lc
from luban.components.AuthorizedActor import AuthorizedActor as base

# Requires simulation id, config id and config type: (id, configid, type)
class Actor(base):

    class Inventory(base.Inventory):
        import pyre.inventory
        simid       = pyre.inventory.str('simid', default='')
        simtype     = pyre.inventory.str('simtype', default='')
        type        = pyre.inventory.str('type', default='')  


    def default(self, director):
        return select(id='main-display-area').replaceContent(self.content(director))


    def content(self, director):

        def viewIndicator(director):
            path = []
            path.append(('Simulations ', load(actor='materialsimulation')))
            path.append(('Quantum Espresso ', load(actor='materialsimulation')))
            path.append(('%s ' % self.simid, load(actor    = 'material_simulations/espresso/sim-view',
                                               id       = self.simid)))

            path.append('Export Simulation Results')

            return director.retrieveVisual('view-indicator', path=path)

        doc         = lc.document(title="Export Simulation Results")
        splitter    = doc.splitter(orientation="vertical")
        sA          = splitter.section()
        sA.add(viewIndicator(director))
        sC          = splitter.section(id="qe-section-actions") # For future

        return doc


    def __init__(self):
        super(Actor, self).__init__(name='material_simulations/espresso-analysis/exports')

        return


    def _configure(self):
        super(Actor, self)._configure()
        self.simid          = self.inventory.simid
        self.simtype        = self.inventory.simtype
        self.type           = self.inventory.type


    def _init(self):
        super(Actor, self)._init()
        return

def actor():
    return Actor()

__date__ = "$Mar 22, 2010 11:15:27 PM$"


