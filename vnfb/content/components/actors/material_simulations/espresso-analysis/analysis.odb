import os.path
#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

# Depricated file!!!

# Use matplotlib and QECalc to analyze results

import os
from vnfb.qeutils.qeutils import stamp2date
from vnfb.qeutils.qeutils import qejob
from vnfb.qeutils.qeutils import parseFile, parsePHFile
from vnfb.qeutils.qeconst import LINKORDER, SIMCHAINS
from vnfb.qeutils.qegrid import QEGrid
from vnfb.qeutils.results.resultinfo import ResultInfo
from vnfb.qeutils.taskinfo import TaskInfo
from vnfb.qeutils.qeutils import latestJob

import luban.content as lc
from luban.content import select, load
from luban.content.HtmlDocument import HtmlDocument

from vnfb.components.QEAnalysis import QEAnalysis as base
class Actor(base):

    class Inventory(base.Inventory):
        import pyre.inventory
        id          = pyre.inventory.str('id', default='')          # Simulation Id


    def default(self, director):
        return select(id='main-display-area').replaceContent(self.content(director))


    def content(self, director):
        self.id         = self.inventory.id
        self._director  = director
        sim             = director.clerk.getQESimulations(id=self.id)   # Not None
        self._simlist   = self._getSimlist(sim.type)
        self._simtype   = self._getType(sim.type)
        simtasks        = director.clerk.getQESimulationTasks(where="simulationid='%s'" % self.id)
        taskslist       = self._tasksList(simtasks)
        jobslist        = self._jobsList(taskslist)
        inputslist      = self._inputsList(taskslist)
        self._jitlist    = zip(jobslist, inputslist, taskslist) # Jobs - Input list


        doc         = lc.document(title="Analysis of Simulation Results")
        splitter    = doc.splitter(orientation="vertical")
        sA          = splitter.section()
        sA.add(self._viewIndicator(director))
        sB          = splitter.section(id="qe-section-actions")
        self._showActions(sB, sim)               # Show actions
        sC          = splitter.section()
        self._showData(sC)                  # Show data
        sD          = splitter.section()

        return doc


    def _showActions(self, section, sim):  #, inputs
        container   = lc.splitter(orientation="horizontal", id="qe-splitter-analysis") #"vertical")#
        section.add(container)
        self._backAction(container)
        self._outputAction(container, sim)
        self._exportAction(container, sim)

        section.add(lc.document(Class="clear-both"))


    def _outputAction(self, container, sim):
        "Simulation output files"
        #container   = lc.splitter(orientation="horizontal") #"vertical")#
        sA          = container.section(Class="qe-section-text-output")
        sA.add(HtmlDocument(text="Outputs: "))
        sB          = container.section()

        for l in self._simlist:
            sB.add(lc.link(label=l,
                                    Class="qe-action-edit",
                                    onclick = load(actor      = 'material_simulations/espresso/analysis',
                                                     id         = self.id))
                            )


    def _exportAction(self, container, sim):
        "Button related to export"
        sA          = container.section()
        if self._simtype    == "Multiple Phonon":   # Make sure that jobs exist with DOS or Dispersion
            self._showPhononDos(sA, sim)
            self._showPhononDispersion(sA, sim)
        

    def _showPhononDos(self, section, sim):
        linkDos     = lc.link(label="Export Phonon DOS",
                            Class="qe-action-edit",
                            onclick = load(actor        = 'material_simulations/espresso/phonondos',
                                            routine     = 'create',
                                            simid       = self.inventory.id))
        linkDos.tip = "Export Phonon DOS to Atomic Structure"
        
        # Uncomment
#        if self._phononDosCreated(sim):     # Check if DOS created
#            linkDos.label   = "Phonon DOS"
#            linkDos.onclick = load(actor        = 'atomicstructure',
#                                    routine     = 'showOverview',
#                                    id          = sim.structureid)  # matter id

        section.add(linkDos)


    def _showPhononDispersion(self, section, sim):
       linkDisp     = lc.link(label="Export Phonon Dispersion",
                            Class="qe-action-edit",
                            onclick = load(actor        = 'material_simulations/espresso/phonons',
                                            routine     = 'create',
                                            simid       = self.inventory.id))
       linkDisp.tip = "Export Phonon Dispersion to Atomic Structure"
       section.add(linkDisp)


    def _phononDosCreated(self, sim):
        job         = qejob(self._director, self.id, LINKORDER["MATDYN"])
        # data.idf file exists:
        #   - job is succefully completed
        #   - results are downloaded (matdyn.dos)
        #   - phonondoses record is created,
        #   - dos is converted and copied to data.idf file
        #
        path        = self._phononDosFile()
        if job and os.path.exists(path):    # XXX (Wrong assumption) Change to: data.idf exists
            return True

        return False
        

    def _showData(self, section):
        "Shows electron's data"
#        filename    = self._pwOutputFile()
#        if filename is None:
#            return
#
#        #self._
#        # output exists
#        section.add(lc.paragraph(text="Electron System", Class="qe-section"))
#        table       = QEGrid(lc.grid(Class = "qe-table"))
#        section.add(table.grid())
#
#        from qecalc.qetask.pwtask import PWTask
#
#        config  = "[pw.x]\npwOutput: %s" % filename
#
#        pw = PWTask(configString=config)
#        pw.output.parse()
#        tEnergy     = pw.output.property('total energy', withUnits=True)
#        fEnergy     = pw.output.property('fermi energy', withUnits=True)
#
#        tEnergyStr  = "None"
#        fEnergyStr  = "None"
#
#        # Change interface?
#        if tEnergy != (None, None):
#            tEnergyStr  = "%s %s" % (tEnergy[0][0], tEnergy[1])
#
#        if fEnergy != (None, None):
#            fEnergyStr  = "%s %s" % (fEnergy[0][0], fEnergy[1])
#
#        table.addRow(('Total Energy:', tEnergyStr))
#        table.addRow(('Fermi Energy:', fEnergyStr))
#        table.setColumnStyle(0, "qe-cell-param")
#
#
#
#
#    def _pwOutputFile(self):
#        "Retruns absolute path of the PW output file"
#        # Example: "/home/dexity/exports/vnf/vnfb/content/data/tmp/tmpTsdw21/4ICDAVNK/4I2NPMY4ni.scf.in.out"
#        for jit in self._jitlist:
#            if jit[0] is None:   # If job is None
#                continue
#
#            if jit[1] is not None and jit[2].type == "PW":   # PW type
#                dataroot    = self._dataroot()
#                taskinfo    = TaskInfo(simid = self.id, type = "PW")
#                results     = ResultInfo(self._director, jit[0], taskinfo)
#                if results.ready():
#                    file        = "%s%s.out" % (jit[1].id, jit[1].filename)
#                    path        = os.path.join(results.tardir(), file)
#                    filepath    = os.path.join(dataroot, path)
#                    return filepath
#
#        return None
#
#
#
#    def _dataroot(self):
#        dds = self._director.dds
#        return os.path.abspath(dds.dataroot)






def actor():
    return Actor(name='material_simulations/espresso-analysis/analysis')


__date__ = "$Dec 13, 2009 1:01:27 AM$"


