#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from luban.content import load, select

from luban.content.Document import Document
from luban.content.Link import Link


from luban.components.Actor import Actor as base


class Actor(base):


    class Inventory(base.Inventory):

        import pyre.inventory

        simulationId = pyre.inventory.str('simulationId', default = '')

        structureId = pyre.inventory.str('structureId', default = '')
        short_description = pyre.inventory.str('short_description', default = '' )
        short_description.meta['tip'] = 'A short description'
        inputFileContents = pyre.inventory.str('inputFileContents', default='')
        runtype = pyre.inventory.str('runtype', default='')
        creator = pyre.inventory.str('creator', default='')
        description = pyre.inventory.str('description', default='')
        
        potentialContent = pyre.inventory.str('potentialContent', default='')
        potential_name = pyre.inventory.str('potential_name', default='')
        potential_filename = pyre.inventory.str('potential_filename', default='')
        potentialCreator = pyre.inventory.str('potentialCreator', default='')
        potentialDescription = pyre.inventory.str('potentialDescription', default='')

    def start(self, director):
        
        domaccess = director.retrieveDOMAccessor('atomicstructure')
        structure = domaccess.getAtomicStructureRecord(self.inventory.structureId)
        structurelabel = structure.chemical_formula or structure.id
        
        title = 'Forcefield simulation of %s' % (structurelabel,)
        wizard = Document(id='forcefieldwizard-start', title=title)

        link = Link(label='back to Matter\ %s' % structurelabel)
        link.onclick = load(
            actor='atomicstructure', routine='editAtomicStructureForm',
            id=structure.id)
        wizard.add(link)
        
        form = self.startform(director)
        wizard.add(form)
        
        return select(id='main-display-area').replaceContent(wizard)


    def startform(self, director):
        from luban.content.Splitter import Splitter
        from luban.content.Form import Form
        from luban.content.FormTextField import FormTextField
        from luban.content.FormSelectorField import FormSelectorField
        self.inventory.simulationId = director.getGUID()
        
        form = Form(
            id='forcefield-wizard-startform',
            title='')
        args = {
            'simulationId': self.inventory.simulationId,
            #'simulationType': '',
            'structureId': self.inventory.structureId,
            #'coordinateType':simulation.matter.
            }
        callbackArgs = {
            'cgihome':director.weaver.htmlbase+director.weaver.controllerurl,
            'sentry.username':director.sentry.username,
            'sentry.ticket':director.sentry.ticket,
#            'actor': self.name,
            }
        args.update(callbackArgs)
        
        from vnfb.components.JnlpFile import JnlpFile
        jnlpFile = JnlpFile(
            resources=('GULP.jar', 'j2ssh.jar', 'commons-logging.jar','pg74.216.jdbc3.jar'),
            mainClass='javagulp.controller.LaunchAtomSim',
            programArguments = args,
            fileName='gulpLauncher'
            )
        relativeLocationOfFile = jnlpFile.writeJnlp(director)
        
        p = form.paragraph()
        p.text = ['''AtomSim uses efficient forcefield
        techniques for simulating larger systems.  Its capabilities include forcefields from 
        a large number of trial functions, phonon / molecular dynamics / optimization, experimental data fitting,
        and crystal property calculation.''']
        
        from luban.content.HtmlDocument import HtmlDocument
        h = HtmlDocument()
        h.text = ['<br><center><a href="'+relativeLocationOfFile+'"><img src="images/webstart.gif" alt="GulpUi"/></a></center>']
        form.add(h)
        p = form.paragraph()
        p.text = ['''Press "Launch" above to activate AtomSim in Web Start mode.  Note: you must have
        a Java Virtual Machine (JVM) installed.  If you do not, clicking "Launch" will likely cause your browser to alert you to this
        and install one automatically.  It is highly recommended to use the JVM from Sun Microsystems.  The OpenJDK (default on Ubuntu OS)
        does not work due to bugs in their webstart launcher.''']
        next = form.submitbutton(label="next")
        from luban.content import select
#        form.onsubmit = director.redirect(actor = 'job', routine = 'create', 
#                                 computation_type = 'material_simulations.GulpSettingsHolder.GulpSettingsHolder', 
#                                 computation_id = self.inventory.simulationId)
        
        form.onsubmit = select(element=form).submit(
            actor = 'material_simulations/forcefieldwizard',
            routine = 'configureSubmissionQueue',
            simulationId = self.inventory.simulationId,
            )
        return form

    def storeInputFile(self, director):
        # this method is called by the java web start gui (AtomSim)
        orm = director.clerk.orm
        
        # first store the potential
        #self.storePotential(director)--> TODO: this is already stored by gulpUi so don't need to re-store
        
        #TODO: make it so it will load settings back in if restarting
        # then store the settings
        from memd.gulp.GulpSettings import GulpSettings
        gulpSettings = GulpSettings()
        gulpSettings.runtype = self.inventory.runtype
        #gulpSettings.inputFileContents = self.inventory.inputFileContents
        #gulpSettings.potential_name = self.inventory.potential_name
        domaccess = director.retrieveDOMAccessor('atomicstructure')
        structure = domaccess.getAtomicStructure(self.inventory.structureId)
        gulpSettings.structure = structure
        #since the potential has already been stored, we just get it 
        from memd.gulp.GulpPotential import GulpPotential
        try:
            record = orm.db.query(orm(GulpPotential)).filter_by(
                        potential_name = self.inventory.potential_name).one()
        except Exception, err:
            print err
            self.storePotential(director)
            record = orm.db.query(orm(GulpPotential)).filter_by(
                        potential_name = self.inventory.potential_name).one()
        gulpSettings.potential = orm.record2object(record)

        #save the settings
        orm.save(gulpSettings, save_not_owned_referred_object=0)
        # these last few lines will eventually be taken care of by the orm
        #create data directory for the simulation if necessary
        datadir = director.dds.abspath(orm(gulpSettings))
        if not os.path.exists(datadir): 
            os.makedirs(datadir)

        inputFilePath = director.dds.abspath(orm(gulpSettings), filename=GulpSettings.inputFile)
        open(inputFilePath, 'w').write(self.inventory.inputFileContents)
        
        #these lines should be executed right before the job is submitted
        #get the potential from the database
        gulpPotential = gulpSettings.potential
        potentialPath = director.dds.abspath(orm(gulpPotential), filename=gulpPotential.filename)
        potentialContent = open(potentialPath).read()
        #write the potential in the simulation directory
        simulationPotential = director.dds.abspath(orm(gulpSettings), filename=gulpPotential.filename)
        open(simulationPotential, 'w').write(potentialContent)        
        return 'success'
    
    def storePotential(self, director):
        orm = director.clerk.orm
        from memd.gulp.GulpPotential import GulpPotential
        try:
            record = orm.db.query(orm(GulpPotential)).filter_by(
                                potential_name = self.inventory.potential_name).one()
            gulpPotential = orm.record2object(record)
        except Exception, err:
            print err
            print 'creating new potential'
            gulpPotential = GulpPotential()
        gulpPotential.filename = self.inventory.potential_filename
        gulpPotential.creator = self.inventory.potentialCreator
        gulpPotential.description = self.inventory.potentialDescription
        gulpPotential.potential_name = self.inventory.potential_name
        orm.save(gulpPotential)
        #put the potential in the potentials subdirectory
        libfile = director.dds.abspath(orm(gulpPotential), 
                                             filename = gulpPotential.filename)
        libDirectory,file = os.path.split(libfile)
        if not os.path.exists(libDirectory):
            try:
                os.makedirs(libDirectory)
            except Exception, err:
                raise RuntimeError, "unable to create directory %r. %s: %s" % (
                    self.path, err.__class__.__name__, err)
        open(libfile, 'w').write(self.inventory.potentialContent)
        #server = director.clerk.dereference(job.server)
        director.dds.remember(orm(gulpPotential), files=[gulpPotential.filename])
        return 'success'

    def startFormShowError(self, director, errors=None):
        from luban.content import select
        return [
            select(id='%s-input' % name).showError(text)
            for name, text in errors.iteritems()
            ]
    
    def __init__(self, name='forcefieldwizard'):
        super(Actor, self).__init__(name)
        return
    
    def configureSubmissionQueue(self, director):
        return director.redirect(actor = 'job', routine = 'create', 
                                 computation_type = 'material_simulations.GulpSettingsHolder.GulpSettingsHolder', 
                                 computation_id = self.inventory.simulationId)
       
#        id = self.inventory.id
#        
#        main = page._body._content._main
#        document = main.document(title='Atomic-level Simulation with Forcefields' )
#
#        p = document.paragraph()
#        p.text = ['Your gulp simulation #%s is ready for submission.' % id]
#        
#        p = document.paragraph()
#        action = actionRequireAuthentication(
#            label = 'start',
#            actor = 'gulpsimulationwizard', 
#            sentry = director.sentry,
#            routine = 'submitSimulation',
#            id=id, type=type,
#            )
#        submit_link = action_link(action, director.cgihome)
#        
#        action = actionRequireAuthentication(
#            label = 'save it for later submission',
#            actor = 'gulpsimulationwizard', 
#            sentry = director.sentry,
#            routine = 'saveSimulation',
#            id=id, type=type,
#            )
#        save_link = action_link(action, director.cgihome)
#        
#        action = actionRequireAuthentication(
#            label = 'delete',
#            actor = 'gulpsimulationwizard', 
#            sentry = director.sentry,
#            routine = 'cancel',
#            id=id, type=type,
#            )
#        delete_link = action_link(action, director.cgihome)
#
#        p.text = [
#            'You can %s this simulation, or %s, or %s it.' % (submit_link, save_link, delete_link),
#            ]
#        return page

import os
def isConfigured(sim, director):
    path = director.dds.abspath(sim, filename=GulpSimulation.CONFIGURATION_FILE)
    if os.path.exists(path): return True
    return False

from vnf.dom.GulpSimulation import GulpSimulation


def actor(): return Actor()


# version
__id__ = "$Id$"

# End of file 

