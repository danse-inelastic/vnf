#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


import luban.content as lc
from luban.content import select, load, alert


from luban.components.AuthorizedActor import AuthorizedActor as base


class Actor(base):


    class Inventory(base.Inventory):

        import pyre.inventory

        id = pyre.inventory.str('id')


    def createSQEDocForAtomicStructure(self, director):
        doc = lc.document(title='S(Q,E)')
        
        atomicstructureaccess = director.retrieveDOMAccessor('atomicstructure')
        structrecord = atomicstructureaccess.getAtomicStructureRecord(self.inventory.id)
        
        sqeaccess = director.retrieveDOMAccessor('sqe')
        sqes = sqeaccess.getSQEs(atomicstructure=structrecord)
        
        if not sqes:
            doc.paragraph(text=['There is no S(Q,E) calculated.'])
        elif len(sqes)==1:
            sqe = sqes[0]
            doc1 = doc.document(Class='container')
            doc1.paragraph(text=['loading sqe. please wait...'])
            doc1.oncreate = select(element=doc1).replaceContent(
                load(actor='orm/sqes', routine='createGraphicalView', id=sqe.id)
                )
        else:
            doc1 = doc.document(Class='container')
            doc1.paragraph(text=['loading sqe curves. please wait...'])
            ids = [sqe.id for sqe in sqes]
            doc1.oncreate = select(element=doc1).replaceContent(
                load(actor='orm/sqes', routine='createGraphicalView', ids=ids)
                )
            
        newsqecomputation = lc.load(
            actor='material_simulations/sqe_calculators', routine='start',
            atomicstructure_id = self.inventory.id
            )
        link = lc.link(label='Start a new sqe computation', onclick=newsqecomputation)
        doc.add(link)

        return doc


    def __init__(self, name='getsqeresults'):
        super(Actor, self).__init__(name)
        return


def actor(): return Actor()


# version
__id__ = "$Id$"

# End of file 

