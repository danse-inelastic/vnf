#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

from vnfb.qeutils.qeparser.qeinput import QEInput
from vnfb.dom.QEConfiguration import QEConfiguration
from vnfb.qeutils.qeutils import writeRecordFile, defaultInputName, subtypeMatdyn
import vnfb.qeutils.filters as filterdir

from luban.content import load
from vnfb.components.QEGenerator import QEGenerator as base

class Actor(base):

    class Inventory(base.Inventory):
        import pyre.inventory
        subtype     = pyre.inventory.str('subtype', default='')

        # Specific for convergence tests
        convid      = pyre.inventory.str('convid', default='')
        paramid     = pyre.inventory.str('paramid', default='')


    def content(self, director):
        "Populates the content for creation of input configuration"
        title   = "Create Input Configuration: %s" % self.inventory.type
        label   = "Create Input Configuration"
        return self._document(director, title, label)


    def defaultForm(self, director, visual):
        "Default implementation of input form"
        visual_     = "material_simulations/espresso/input-default"

        return director.retrieveVisual(visual_,
                                       actor        = self.inventory,
                                       director     = director)


    def createRecord(self, director):
        "Create configuration record"
        self._createDBRecord(director)
        self._updateTaskRecord(director)    # For matdyn mostly
        self._createFile(director)

        if self.paramid != "":  # Specific for convergence tests
            return load( actor    = 'material_simulations/espresso-convergence/param-view',
                         id       = self.id,
                         convid   = self.convid,
                         paramid  = self.paramid)

        return load(actor = 'material_simulations/espresso/sim-view', id = self.id)

    def _createDBRecord(self, director):
        # 'text' field is not stored
        params  = {"taskid":        self.inventory.taskid,
                   "filename":      self._fname(),          # Set default name if not filename specified
                   "description":   subtypeMatdyn(self.inventory.subtype), # Store subtype for description
                   "type":          self.inventory.type
                   }
        self.input  = QEConfiguration(director)
        self.input.createRecord(params)


    def _createFile(self, director):
        "Writes configuration to file"
        # fn (file name) is fixed and doesn't depend on the filename record
        fn      = defaultInputName(self.inventory.type)        
        input   = QEInput(config=self.inventory.text, type=self.inventory.type)

        # Create proper filter object
        filter  = filterdir.filterFactory(self.inventory.type)
        filter.apply(input)             # Apply filter to input
        fconfig = input.toString()      # Filtered config input
        print fconfig
        writeRecordFile(director.dds, self.input, fn, fconfig)


    def _updateTaskRecord(self, director):
        if self.inventory.subtype == "":
            return      # No update for empty subtype

        task    = director.clerk.getQETasks(id = self.taskid)
        params  = {"subtype": subtypeMatdyn(self.inventory.subtype),}
        task.setDirector(director)
        task.updateRecord(params)


    def _fname(self):
        # Filename is not set
        if self.fname == '':
            return defaultInputName(self.inventory.type)
        
        return self.fname


    def _verify(self):
        #Note:
        #   - Do not allow the following characters in the input filename:
        #	"/"
        #	"'"
        #	"""
        #   - filename should not be empty
        pass

    def __init__(self):
        super(Actor, self).__init__(name='material_simulations/espresso/input-create')


    def _configure(self):
        super(Actor, self)._configure()
        self.subtype        = self.inventory.subtype

        self.convid         = self.inventory.convid
        self.paramid        = self.inventory.paramid


    def _init(self):
        super(Actor, self)._init()
        return

def actor():
    return Actor()


__date__ = "$Jan 13, 2010 10:50:06 AM$"


