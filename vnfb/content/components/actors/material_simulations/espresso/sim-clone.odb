#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

from vnfb.utils.qeconst import PACKAGES, SIMULATIONS, TYPES
from vnf.dom.QESimulation import QESimulation

from luban.content import select
from luban.content.Paragraph import Paragraph
from luban.content.Document import Document
from luban.content.HtmlDocument import HtmlDocument
from luban.content import load
from luban.content.Link import Link
from luban.content.Form import Form
from luban.content.Button import Button

import luban.content as lc
from luban.components.AuthorizedActor import AuthorizedActor as base

class Actor(base):

    class Inventory(base.Inventory):
        import pyre.inventory
        # Add tips for each parameter?

        id          = pyre.inventory.str('id', default='')      # Simulation Id
        sname       = pyre.inventory.str('sname', default='')
        simtype     = pyre.inventory.str('simtype', default='')
        description = pyre.inventory.str('description', default='')
        label       = pyre.inventory.str('label', default='')

    def default(self, director):
        return select(id='main-display-area').replaceContent(self.content(director))


    def content(self, director):
        sim     = director.clerk.getQESimulations(id=self.id)
        
        def viewIndicator(director):
            path = []
            path.append(('Simulations ', load(actor='materialsimulation')))
             # Stub, should filter by simulation type
            path.append(('Quantum Espresso ', load(actor='materialsimulation')))
            path.append(('%s ' % self.id, load(actor    = 'material_simulations/espresso/sim-view',
                                               id       = self.id))
                        )
            path.append('Clone')

            return director.retrieveVisual('view-indicator', path=path)

        doc         = lc.document(title   = 'Clone Simulation: %s' % sim.sname)
        splitter    = doc.splitter(orientation="vertical")
        sA          = splitter.section()
        sA.add(viewIndicator(director))
        sB          = splitter.section()

        form        = Form(title='Clone Quantum Espresso Simulation')
        sname       = form.text(name="sname", label='Simulation Name', value=sim.sname)
        simtype     = form.selector(name="simtype", label='Simulation Type',
                                    entries=enumerate(SIMULATIONS),
                                    selection=self.simtypeValue(sim.type))
        description = form.text(name="description", label='Description', value=sim.short_description)   # Make as textarea
        label       = form.text(name="label", label='Label', value=sim.label)
        submit      = form.submitbutton(label="Create New Simulation")
        form.onsubmit   = select(element=form).submit(actor = 'material_simulations/espresso/sim-clone', routine = 'createRecord', id=self.id)

        # TODO: "Cancel" button looks UGLY
        cancel      = lc.link(label="Cancel")
        cancel.onclick = load(actor = 'material_simulations/espresso/sim-view', id=self.id)
        form.add(cancel)
        sB.add(form)

        return doc


    def simtypeValue(self, simtype):
        for i in range(len(SIMULATIONS)):
            if SIMULATIONS[i] == simtype:
                return i

        return 0


    def createRecord(self, director):
        """Creates record in the database """
        self.verify()
        sim             = director.clerk.getQESimulations(id=self.id)

        s   = self._createSimRecord(director)
        return load(actor='materialsimulation')  # Redirection to the page


    def _createSimRecord(self, director):
        """Create simulation record"""
        simtype = SIMULATIONS[int(self.simtype)]
        params  = {"sname": self.sname,
                   "type": simtype,
                   "creator":       director.sentry.username,
                   "short_description":   self.description,
                   "label":         self.label}
        s       = QESimulation()
        s.setDirector(director)
        s.createRecord(params)
        return s


    # stub
    def verify(self):
        """Verify data first """
        pass


    def _configure(self):
        super(Actor, self)._configure()
        self.id          = self.inventory.id
        self.sname       = self.inventory.sname
        self.simtype     = self.inventory.simtype
        self.description = self.inventory.description
        self.label       = self.inventory.label

        return


    def __init__(self):
        super(Actor, self).__init__(name='material_simulations/espresso/sim-clone')

        return


    def _init(self):
        super(Actor, self)._init()
        return

def actor():
    return Actor()


__date__ = "$Nov 2, 2009 3:19:32 PM$"


