#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

from vnfb.utils.qeutils import stamp2date
from vnfb.utils.qechain import QEChain
from vnfb.utils.qeparams import QEParams
from vnfb.utils.qeserver import QEServer

from luban.content.Splitter import Splitter

from luban.content import select
from luban.content.Paragraph import Paragraph
from luban.content.Document import Document
from luban.content.HtmlDocument import HtmlDocument
from luban.content import load
from luban.content.Link import Link

import luban.content as lc
from luban.components.AuthorizedActor import AuthorizedActor as base
class Actor(base):

    class Inventory(base.Inventory):
        import pyre.inventory
        id      = pyre.inventory.str('id', default='')      # Simulation Id


    def default(self, director):
        return select(id='main-display-area').replaceContent(self.content(director))


    def content(self, director):
        sim     = director.clerk.getQESimulations(id=self.id)
        
        def viewIndicator(director):
            path = []
            path.append(('Simulations ', load(actor='materialsimulation')))
             # Stub, should filter by simulation type
            path.append(('Quantum Espresso ', load(actor='materialsimulation')))
            path.append(self.id)

            return director.retrieveVisual('view-indicator', path=path)

        doc         = lc.document(title   = 'Simulation Name: %s' % sim.sname)
        splitter    = doc.splitter(orientation="vertical")
        sA          = splitter.section()
        sA.add(viewIndicator(director))
        
        sC          = splitter.section()
        self.showLinks(sC)

        sB          = splitter.section()
        table   = self.showSim(sB, sim)
        self.showSettings(director, table)
        self.showServer(director, table)
        self.showJobs(director, table)
        self.showInputFiles(director, sB, table, sim.type)
        self.showRefs(sB)
        
        return doc

    def showLinks(self, document):
        document.add(lc.button(label="Edit",
                              onclick = load(actor='material_simulations/espresso/sim-edit',
                              id=self.id)))
        document.add(lc.button(label="Delete",
                              onclick = load(actor='material_simulations/espresso/sim-delete',
                              id=self.id)))
        document.add(lc.button(label="Clone",
                              onclick = load(actor='material_simulations/espresso/sim-clone',
                              id=self.id)))
        document.add(lc.document(Class="clear-both"))


    def showSim(self, document, sim):
        """Shows simulation data"""
        if sim: # ?
            table   = lc.grid()
            document.add(table)

            # Description row
            row     = table.row()
            cell    = row.cell()
            cell.add('Description: ')
            cell    = row.cell()
            cell.add(sim.short_description)

            # Type row
            row     = table.row()
            cell    = row.cell()
            cell.add('Type: ')
            cell    = row.cell()
            cell.add(sim.type)

            # Package row
            row     = table.row()
            cell    = row.cell()
            cell.add('Package: ')
            cell    = row.cell()
            cell.add(sim.package)

            # Label row
            row     = table.row()
            cell    = row.cell()
            cell.add('Label: ')
            cell    = row.cell()
            cell.add(sim.label)

            # Created row
            row     = table.row()
            cell    = row.cell()
            cell.add('Created: ')
            cell    = row.cell()
            cell.add(stamp2date(sim.date))

            return table


    def showInputFiles(self, director, document, table, type):
        """Shows chain of configuration files"""
        #document.add(Document(Class="clear-both"))
        row     = table.row()
        cell    = row.cell()
        cell.add('Input Files: ')
        cell    = row.cell()
        cell.add("")

        document.add(Paragraph(text=""))
        splitter = QEChain(director, type)

        document.add(splitter.chain(self.id))


    def showSettings(self, director, table):
        params  = QEParams(director)
        link    = params.getLink(self.id)

        row     = table.row()
        cell    = row.cell()
        cell.add("Simulation Parameters: ")
        cell    = row.cell()
        cell.add(link)


    def showServer(self, director, table):
        server  = QEServer(director)
        link    = server.getServer(self.id)

        row     = table.row()
        cell    = row.cell()
        cell.add("Default Server: ")
        cell    = row.cell()
        cell.add(link)


    def showJobs(self, director, table):
        """Adds list of job ids to the document"""

        jobsdoc = Document(Class="display-inline")
        joblist  = self.jobs(director)

        if len(joblist) != 0:
            for job in joblist:
                jobsdoc.add(Link(label=job.id, Class="action-link",
                                 onclick=load(actor="jobs/view",
                                 routine="link", id=job.id))
                            )
        else:
            jobsdoc.add(Paragraph(text="None", Class="action-link"))

        row     = table.row()
        cell    = row.cell()
        cell.add("Jobs: ")
        cell    = row.cell()
        cell.add(jobsdoc)


    # TODO: Should have "Submit to Queue" only
    def showRefs(self, document):
        """Adds References"""
        document.add(Document(Class="clear-both"))   # Empty document
        refsdoc = Document(Class="display-block")
        refsdoc.add(lc.button(label="Submit to Queue", onclick=load(actor="material_simulations/espresso/sim-view",
                                                               routine="checkSubmit",
                                                               id=self.id)))
        document.add(refsdoc)
        document.add(lc.document(Class="clear-both"))


    def checkSubmit(self):
        # Check config inputs
        # Check settings
        # If check failed, go to error page (with link "Go Back")
        #return load(actor="jobs/submitted", routine="submit", id=self.id)
        return load(actor="materialsimulation")


    def jobs(self, director):
        joblist = []
        jobs = director.clerk.getQEJobs(where="simulationid='%s'" % self.id)
        for job in jobs:
            if job:
                joblist.append(job)

        return joblist



    def __init__(self):
        super(Actor, self).__init__(name='material_simulations/espresso/sim-view')

        return


    def _configure(self):
        super(Actor, self)._configure()
        self.id = self.inventory.id
        return


    def _init(self):
        super(Actor, self)._init()
        return

def actor():
    return Actor()


#def table(matsims, cols, director):
#    """Table of simulations parameters"""
#
#    from luban.content.table import Model, View, Table
#    from luban.content import load
#    from luban.content.Link import Link
#
#    class model(Model):
#        parameter        = Model.descriptors.str(name='parameter')
#        value            = Model.descriptors.str(name='value')
#
#
#    columns = [
#        View.Column(label='', measure='parameter'),
#        View.Column(label='', measure='value'),
#        ]
#
#    view = View(columns=columns, editable=False)
#
#    def getSelected(matter): return False
#    def getId(matsim):
#        label = matsim.id
#        link = Link(
#            label = label,
#            onclick = load(
#                actor='materialsimulation', routine='showMaterialSimulation',
#                id = matsim.id,
#                type = matsim.__class__.name,
#                )
#            )
#        return link
#    def getDescription(matsim):
#        return matsim.short_description
#    def getCreated(exp):
#        date = exp.date
#        return str(date)
#    def getType(matsim):
#        return matsim.__class__.name
#    def getMatter(matsim):
#        matter = matsim.matter
#        if not matter or not matter.id: return 'not defined'
#        try:
#            matter = director.clerk.db.dereference(matter)
#        except:
#            return 'matter %s not found' % matter.id
#        identifier = matter.short_description or matter.chemical_formula
#        return identifier
#
#    import operator
#    value_generators    = [ eval('get'+col.measure.capitalize())
#                            for col in view.columns]
#    record2tuple        = lambda record: [g(record) for g in value_generators]
#    data                = map(record2tuple, matsims)
#
#    table = Table(model=model, data=data, view=view, id='matsim-table')
#    return table


__date__ = "$Nov 2, 2009 3:15:35 PM$"

