#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

import os

from vnfb.utils.qeutils import stamp2date, makedirs
from vnfb.utils.qeutils import addRow
from vnfb.utils.qechain import QEChain
from vnfb.utils.qeparams import QEParams
from vnfb.utils.qeserver import QEServer
from vnfb.utils.qeconst import SIMCHAINS

from luban.content.Splitter import Splitter

from luban.content import select
from luban.content.Paragraph import Paragraph
from luban.content.Document import Document
from luban.content.HtmlDocument import HtmlDocument
from luban.content import load
from luban.content.Link import Link

import luban.content as lc
from luban.components.AuthorizedActor import AuthorizedActor as base
class Actor(base):

    class Inventory(base.Inventory):
        import pyre.inventory
        id      = pyre.inventory.str('id', default='')      # Simulation Id


    def default(self, director):
        return select(id='main-display-area').replaceContent(self.content(director))


    def content(self, director):
        sim         = director.clerk.getQESimulations(id=self.id)
        self.type   = sim.type
        
        def viewIndicator(director):
            path = []
            path.append(('Simulations ', load(actor='materialsimulation')))
             # Stub, should filter by simulation type
            path.append(('Quantum Espresso ', load(actor='materialsimulation')))
            path.append(self.id)

            return director.retrieveVisual('view-indicator', path=path)

        doc         = lc.document(title   = 'Simulation Name: %s' % sim.sname)
        splitter    = doc.splitter(orientation="vertical")
        sA          = splitter.section()
        sA.add(viewIndicator(director))
        
        sC          = splitter.section()
        self.showActions(sC)
        splitter.section(id="input-error-area")


        sB          = splitter.section()
        table   = self.showSim(sB, sim)
        self.showSettings(director, table)
        self.showServer(director, table)
        self.showJobs(director, table)
        self.showInputFiles(director, sB, table, sim.type)
        self.showSubmit(sB)
        
        return doc

    def showActions(self, document):
        document.add(lc.button(label="Edit",
                              onclick = load(actor='material_simulations/espresso/sim-edit',
                              id=self.id)))
        document.add(lc.button(label="Delete",
                              onclick = load(actor='material_simulations/espresso/sim-delete',
                              id=self.id)))
        document.add(lc.button(label="Clone",
                              onclick = load(actor='material_simulations/espresso/sim-clone',
                              id=self.id)))
        document.add(lc.document(Class="clear-both"))


    def showSim(self, document, sim):
        """Shows simulation data"""
        if sim: # ?
            table   = lc.grid()
            document.add(table)

            addRow(table, 'Description: ', sim.short_description)
            addRow(table, 'Type: ', sim.type)
            addRow(table, 'Package: ', sim.package)
            addRow(table, 'Label: ', sim.label)
            addRow(table, 'Created: ', stamp2date(sim.date))

            return table


    def showInputFiles(self, director, document, table, type):
        """Shows chain of configuration files"""
        from vnfb.utils.qeutils import addRow
        addRow(table, 'Input Files: ', '')

        document.add(Paragraph(text=""))
        splitter = QEChain(director, type)

        document.add(splitter.chain(self.id))


    def showSettings(self, director, table):
        params  = QEParams(director)
        link    = params.getLink(self.id)

        addRow(table, "Simulation Parameters: ", link)


    def showServer(self, director, table):
        server  = QEServer(director)
        link    = server.getServer(self.id)

        addRow(table, "Default Server: ", link)


    def showJobs(self, director, table):
        """Adds list of job ids to the document"""

        jobsdoc = Document(Class="display-inline")
        joblist  = self.jobs(director)

        if len(joblist) != 0:
            for job in joblist:
                jobsdoc.add(Link(label=job.id, Class="action-link",
                                 onclick=load(actor="jobs/view",
                                 routine="link", id=job.id))
                            )
        else:
            jobsdoc.add(Paragraph(text="None", Class="action-link"))

        addRow(table, "Jobs: ", jobsdoc)


    # TODO: Should have "Submit to Queue" only
    def showSubmit(self, document):
        """Adds References"""
        document.add(Document(Class="clear-both"))   # Empty document
        refsdoc = Document(Class="display-block")
        refsdoc.add(lc.button(label="Submit to Queue", onclick=load(actor="material_simulations/espresso/sim-view",
                                                               routine="checkSubmit",
                                                               id=self.id)))
        document.add(refsdoc)
        document.add(lc.document(Class="clear-both"))


    def checkSubmit(self, director):
        """Checks if the simulation can be submitted to jobs queue"""
        errors  = {}
        self._checkInputs(director, errors)
        
        # Check settings # Not sure if I need it now
        # If check failed, go to error page (with link "Go Back")
        #return load(actor="jobs/submitted", routine="submit", id=self.id)
        if errors:
            return self.formError(errors)


        return load(actor="materialsimulation")

    def _checkInputs(self, director, errors):
        """Checks config inputs"""
        sim     = director.clerk.getQESimulations(id = self.id)
        inputs  = director.clerk.getQEConfigurations(where = "simulationid='%s'" % self.id)
        chain   = SIMCHAINS[sim.type]
        if not self._isComplete(chain, inputs):
            errors['input']  = "Error: One of the configuration inputs are missing"
            return

        self._storeFiles(director, inputs)


    def _isComplete(self, chain, inputs):
        test    = [0 for i in range(len(chain))]
        types   = self._getInputTypes(inputs)

        for i in range(len(types)):    # Check if inputs has all the values from chain list
            for j in range(len(chain)):
                if types[i] == chain[j]:
                    test[j] = 1

        if test.count(0) == 0:  # No zeros left, then set is complete
            return True

        return False


    def _getInputTypes(self, inputs):
        """Converts configuration entries to """
        types   = []
        for i in inputs:
            if i.text != '':
                types.append(i.type)

        return types


    def _storeFiles(self, director, inputs):
        """Temp solution. Stores files from configuration input strings """
        
        dds = director.dds
        for o in inputs:
            filename    = dds.abspath(o, filename = o.type)
            self._writeContent(dds, o, filename, o.text)


    def _writeContent(self, dds, record, filename, content):
        """Writes content of the configuration input to file"""
        path    = dds.abspath(record)
        makedirs(path)
        open(filename, 'w').write(content)


    def formError(self, errors):
        return [
                select(id='%s-error-area' % key).replaceContent(value)
                    for key, value in errors.iteritems()
                ]


    def jobs(self, director):
        joblist = []
        jobs = director.clerk.getQEJobs(where="simulationid='%s'" % self.id)
        for job in jobs:
            if job:
                joblist.append(job)

        return joblist



    def __init__(self):
        super(Actor, self).__init__(name='material_simulations/espresso/sim-view')

        return


    def _configure(self):
        super(Actor, self)._configure()
        self.id = self.inventory.id
        return


    def _init(self):
        super(Actor, self)._init()
        return

def actor():
    return Actor()


__date__ = "$Nov 2, 2009 3:15:35 PM$"

