#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

from vnfb.utils.qeutils import stamp2date

from luban.content import select
from luban.content.Paragraph import Paragraph
from luban.content.Document import Document
from luban.content.HtmlDocument import HtmlDocument
from luban.content import load
from luban.content.Link import Link
from luban.content.Splitter import Splitter
from luban.content.FormSelectorField import FormSelectorField
from luban.content.FormRadioBox import FormRadioBox
from luban.content.Form import Form
from luban.content.Tabs import Tabs
from luban.content.Button import Button

import luban.content as lc
from luban.components.AuthorizedActor import AuthorizedActor as base

# Requires simulation id, config id and config type: (id, configid, type)
class Actor(base):

    class Inventory(base.Inventory):
        import pyre.inventory
        id          = pyre.inventory.str('id', default='')          # Simulation Id
        configid    = pyre.inventory.str('configid', default='')    # Configuration Id

    def default(self, director):
        return select(id='main-display-area').replaceContent(self.content(director))


    def content(self, director):
        self._sim       = director.clerk.getQESimulations(id=self.id)
        self._settings  = director.clerk.getQEConfigurations(id=self.configid)    # type=settings

        def viewIndicator(director):
            path = []
            path.append(('Simulations ', load(actor='materialsimulation')))
            path.append(('Quantum Espresso ', load(actor='materialsimulation')))
            path.append(('%s ' % self.id, load(actor    = 'material_simulations/espresso/sim-view',
                                               id       = self.id)))

            path.append('Settings Configuration')

            return director.retrieveVisual('view-indicator', path=path)

        doc         = lc.document(title="Settings Configuration: %s" % self.filename(self._settings))
        splitter    = doc.splitter(orientation="vertical")
        sA          = splitter.section()
        sA.add(viewIndicator(director))
        sB          = splitter.section()

        self.showLinks(sB)    # Finish
        self.showConfig(sB, self._settings)

        return doc


    def showLinks(self, document):  #, inputs
        document.add(Link(label="Edit", Class="action-link",
                          onclick = load(actor      = 'material_simulations/espresso/settings-edit',
                                         id         = self.id,
                                         configid   = self.configid))
                    )
        document.add(Link(label="Delete", Class="action-link",
                          onclick = load(actor      = 'material_simulations/espresso/settings-delete',
                                         id         = self.id,
                                         configid   = self.configid))
                    )

                    
    def showConfig(self, document, settings):
        (self._parser, fp)    = self.parser(settings)
        document.add(Paragraph(text="File Name: %s" % self.filename(settings)) )
        document.add(Paragraph(text="Server Name: %s" % self._get("server", "server-name")))
        document.add(Paragraph(text="Number of Processors: %s" % self._get("server", "num-proc")))
        document.add(Paragraph(text="Number of Nodes: %s" % self._get("server", "num-nodes")))
        document.add(Paragraph(text="Processors Per Node: %s" % self._get("server", "proc-per-node")))
        document.add(Paragraph(text="Npool: %s" % self._get("server", "npool")))
        document.add(Paragraph(text="Executable: %s" % self._get("server", "executable")))
        document.add(Paragraph(text="Additional Parameters: %s" % self._get("server", "params")))
        document.add(Paragraph(text="Modules: %s" % self._get("server", "modules")))


    def parser(self, settings):
        import ConfigParser
        import StringIO

        if settings:
            # check if settings[0] isinstanceof Configuration
            config  = settings.text

            if config:  # Important: Implies that it has sections already
                fp  = StringIO.StringIO(config)
                parser  = ConfigParser.ConfigParser()
                parser.readfp(fp)
                return (parser, fp)

        return (None, None)


    def _get(self, section, param):
        if self._parser:
            return self._parser.get(section, param)

        return ''
    

    def filename(self, input):
        if input:
            return input.filename

        return ""


    def __init__(self):
        super(Actor, self).__init__(name='material_simulations/espresso/settings-view')

        return


    def _configure(self):
        super(Actor, self)._configure()
        self.id             = self.inventory.id
        self.configid       = self.inventory.configid

    def _init(self):
        super(Actor, self)._init()
        return

def actor():
    return Actor()



__date__ = "$Nov 11, 2009 1:03:02 PM$"


