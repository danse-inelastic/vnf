#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

from luban.content import select, load
from vnfb.qeutils.qegrid import QEGrid
from vnfb.qeutils.qeconst import SIMCHAINS, MDSTEPS, ID_MD_LABEL, ID_MD_OPTIONS
from vnfb.qeutils.qeutils import selection2simtype
from luban.content.FormCheckBox import FormCheckBox
from vnfb.utils.serverlist import ServerList
from vnfb.dom.QESimulation import QESimulation

import luban.content as lc
from luban.components.AuthorizedActor import AuthorizedActor as base

class Actor(base):
    """ Create Quantum Espresso simulation"""

    class Inventory(base.Inventory):
        import pyre.inventory
        sname       = pyre.inventory.str('sname', default='')
        simtype     = pyre.inventory.str('simtype', default='')
        description = pyre.inventory.str('description', default='')
        label       = pyre.inventory.str('label', default='')
        server      = pyre.inventory.str('server', default='')
        structureid = pyre.inventory.str('structureid', default='')

        # Molecular dynamics steps
        electronmin    = pyre.inventory.bool(name='electronmin', default=False)

#MDSTEPS["electron-min"] = "Electronic Minimization"
#MDSTEPS["ion-min"]      = "Ion Minimization"
#MDSTEPS["ion-random"]   = "Ions Randomization"
#MDSTEPS["quenching"]    = "Electrons and Ions Quenching"
#MDSTEPS["dynamics"]     = "Electron and Ion Dynamics"
#MDSTEPS["thermostat"]   = "Electron and Ion Dynamics with Nose Thermostat"


    def default(self, director):
        return select(id='main-display-area').replaceContent(self.content(director))


    def content(self, director):
        def viewIndicator(director):
            path = []
            path.append(('Simulations ', load(actor='materialsimulation')))
            path.append(('Create New Simulation ', select(id='main-display-area').replaceContent(
                                                          load(actor='materialsimulation',
                                                               routine='newSimulation')
                                                          ))
                        )
            path.append('Quantum Espresso')
            return director.retrieveVisual('view-indicator', path=path)

        doc         = lc.document(title   = "Create New Simulation")
        splitter    = doc.splitter(orientation="vertical")
        sA          = splitter.section()
        sA.add(viewIndicator(director))
        sB          = splitter.section()
        visual  = 'material_simulations/espresso/form-sim-create'
        sB.add(director.retrieveVisual(visual, self.inventory, director))

        return doc


    def showOptions(self, director):
        " Displays 'Select Atomic Structure' page"
        doc = lc.document(title='Select Atomic Structure')
        doc.Class = 'mastertable-as-selector-panel'

        # the container of the atomicstructure selector
        container = doc.document(id     = 'atomicstructure-selector-container',
                                 Class  = 'master-table-wrapper')
        container.oncreate = select(element=container).append(
                                            load(actor='selectoneatomicstructure',
                                                 routine='createListView')
                                    )

        # the button
        b = lc.button(label='Select')
        doc.add(b)
        b.onclick = load(actor          = self.name,
                         structureid    = select(id='atomicstructure-table').table(
                                                        'getIdentifiersForSelectedRow',
                                                        colname = 'selectone')
            )
        return select(id='main-display-area').replaceContent(doc)




    def showMDOptions(self, director):
        label   = lc.document()
        options = lc.document()
        actions = []
        
        if selection2simtype(self.simtype) == "molecular-dynamics":
            label.add("Steps: *")
            options.add(self._mdOptions(director))

        actions.append(select(id=ID_MD_LABEL).replaceContent(label))
        actions.append(select(id=ID_MD_OPTIONS).replaceContent(options))

        return actions


    def _mdOptions(self, director):
        "Displays molecular dynamics steps"
        table       = QEGrid(lc.grid())
        

#        box     = FormCheckBox(name="electronmin", checked = True)
#        print self._noHyphen("hello-world-blah")
#        label   = "Hi"
#        table.addRow((box, label))

        #print dir(box)
        for s in MDSTEPS.keys():
            box     = FormCheckBox(name=self._noHyphen(s), checked = self._checked(s))
            label   = MDSTEPS[s]
            table.addRow((box, label))

        return table.grid()


    def _noHyphen(self, str):
        "Removes hyphen from a string"
        # Input: hello-world, Output: helloworld
        list    = str.split("-")
        s       = ""
        for l in list:
            s   += l

        return s


    def _checked(self, step):
        "Takes molecular dynamics step and decides if to check them"
        CHECKED = ["electron-min", "thermostat"]
        if step in CHECKED:
            return True

        return False


    def createRecord(self, director):
        """Create simulation record"""
        print self.electronmin
        print self.simtype
        
#        self._verify()
#        keys    = SIMCHAINS.keys()
#        simtype = keys[int(self.simtype)]
#        servers = ServerList(director)
#
#        params  = {"sname":         self._sname(),
#                   "type":          simtype,
#                   "creator":       director.sentry.username,
#                   "short_description":   self._description(),
#                   "label":         self.label,
#                   "serverid":      servers.id(self.server),
#                   "structureid":   self.structureid
#                   }
#        sim     = QESimulation(director)
#        sim.createRecord(params)
#        sim.establishGlobalPointer(director.clerk.db)
#
#        return load(actor='material_simulations/espresso/sim-view', id = sim.id)


    def _description(self):
        # Description is not set
        if self.description == '':
            return "QE simulation"

        return self.description

    def _sname(self):
        # Simulation name is not set
        if self.sname == '':
            return "Default"

        return self.sname

    # stub
    def _verify(self):
        """Verify data first """
        pass


    def __init__(self):
        super(Actor, self).__init__(name='material_simulations/espresso/sim-create')

        return


    def _configure(self):
        super(Actor, self)._configure()
        self.sname       = self.inventory.sname
        self.simtype     = self.inventory.simtype
        self.description = self.inventory.description
        self.label       = self.inventory.label
        self.server      = self.inventory.server
        self.structureid = self.inventory.structureid

        self.electronmin = self.inventory.electronmin


    def _init(self):
        super(Actor, self)._init()
        return

def actor():
    return Actor()

__date__ = "$Nov 10, 2009 11:02:01 AM$"


#    def processSelection(self, director):
#        return alert('selected structure %s' % self.inventory.selected)

