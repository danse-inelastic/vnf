#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

from vnfb.utils.qeconst import PARSERS
from vnfb.utils.qegrid import QEGrid

from luban.content import select
from luban.content import load
from luban.content.FormSelectorField import FormSelectorField
from luban.content.FormTextArea import FormTextArea
from luban.content.FormTextField import FormTextField
from luban.content.FormSubmitButton import FormSubmitButton
from luban.content.Form import Form

import luban.content as lc
from luban.components.AuthorizedActor import AuthorizedActor as base

# Requires simulation id,
class Actor(base):

    class Inventory(base.Inventory):
        import pyre.inventory
        id          = pyre.inventory.str('id', default='')          # Simulation Id
        configid    = pyre.inventory.str('configid', default='')    # Configuration Id
        taskid      = pyre.inventory.str('taskid', default='')
        type        = pyre.inventory.str('type', default='')        # Type of the configuration file
        fname       = pyre.inventory.str('fname', default='')
        description = pyre.inventory.str('description', default='')
        parser      = pyre.inventory.str('parser', default='')
        text        = pyre.inventory.str('text', default='')


    def default(self, director):
        return select(id='main-display-area').replaceContent(self.content(director))


    def content(self, director):
        #self._sim   = director.clerk.getQESimulations(id=self.id)
        input = director.clerk.getQEConfigurations(id=self.configid)

        def viewIndicator(director):
            path = []
            path.append(('Simulations ', load(actor='materialsimulation')))
             # Stub, should filter by simulation type
            path.append(('Quantum Espresso ', load(actor='materialsimulation')))
            path.append(('%s ' % self.id, load(actor    = 'material_simulations/espresso/sim-view',
                                               id       = self.id))
                        )
            path.append(('%s Task ' % self.type, load(actor    = 'material_simulations/espresso/task-view',
                                                      id       = self.id,
                                                      taskid   = self.taskid,
                                                      type     = self.type)))

            path.append("Edit Configuration Input: %s" % input.filename)

            return director.retrieveVisual('view-indicator', path=path)

        doc         = lc.document(title="Edit Configuration Input: %s" % input.filename)
        splitter    = doc.splitter(orientation="vertical")
        sA          = splitter.section()
        sA.add(viewIndicator(director))
        sB          = splitter.section()
        sB.add(self._setForm(input))

        return doc


    def _setForm(self, input):
        "Sets create new settings form"

        form        = Form(id='create-simulation-form')
        table       = QEGrid(lc.grid(Class="qe-form"))
        form.add(table.grid())

        fname           = FormTextField(name = "fname", value = input.filename)
        description     = FormTextField(name = "description", value=input.description)   # Make as textarea
        parser          = FormSelectorField(name="parser",
                                            entries=enumerate(PARSERS)) # No choice :)
        text            = FormTextArea(name="text", value=input.text)

        submit      = FormSubmitButton(label="Edit Configuration Input")
        cancel      = lc.button(label="Cancel")
        cancel.onclick  = load(actor = 'material_simulations/espresso/sim-view', id=self.id)

        st          = QEGrid(lc.grid()) # Submit Table
        st.addRow((submit, cancel), ("qe-action-accept", "qe-action-cancel"))

        table.addRow(("Name:", fname))
        table.addRow(("Description:", description))
        table.addRow(("Parser:", parser))
        table.addRow(("Configuration:", text))
        table.addRow(("", st.grid()))

        table.setColumnStyle(0, "qe-form-label")
        table.setColumnStyle(1, "qe-form-field")

        form.onsubmit   = select(element=form).submit(actor     = 'material_simulations/espresso/input-edit',
                                                      routine   = 'updateRecord',
                                                      configid  = self.configid,
                                                      taskid    = self.taskid,
                                                      id        = self.id)

        return form


    def updateRecord(self, director):
        """Update configuration record"""
        params  = {"filename":      self.fname,
                   "description":   self.description,
                   "parser":        PARSERS[int(self.parser)],
                   "text":          self.text}

        input     = director.clerk.getQEConfigurations(id=self.configid)
        input.setDirector(director)
        input.updateRecord(params)

        return load(actor='material_simulations/espresso/sim-view', id=self.id)


    def __init__(self):
        super(Actor, self).__init__(name='material_simulations/espresso/input-edit')

        return


    def _configure(self):
        super(Actor, self)._configure()
        self.id             = self.inventory.id
        self.taskid         = self.inventory.taskid
        self.configid       = self.inventory.configid
        self.type           = self.inventory.type
        self.fname          = self.inventory.fname
        self.description    = self.inventory.description
        self.parser         = self.inventory.parser
        self.text           = self.inventory.text


    def _init(self):
        super(Actor, self)._init()
        return

def actor():
    return Actor()

__date__ = "$Nov 9, 2009 5:07:11 PM$"


