#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

from vnfb.utils.qeconst import PARSERS

from luban.content import select
from luban.content.Paragraph import Paragraph
from luban.content.Document import Document
from luban.content.HtmlDocument import HtmlDocument
from luban.content import load
from luban.content.Link import Link
from luban.content.Splitter import Splitter
from luban.content.FormSelectorField import FormSelectorField
from luban.content.FormRadioBox import FormRadioBox
from luban.content.Form import Form
from luban.content.Tabs import Tabs
from luban.content.Button import Button

import luban.content as lc
from luban.components.AuthorizedActor import AuthorizedActor as base

# Requires simulation id,
class Actor(base):

    class Inventory(base.Inventory):
        import pyre.inventory
        id          = pyre.inventory.str('id', default='')          # Simulation Id
        configid    = pyre.inventory.str('configid', default='')    # Configuration Id
        type        = pyre.inventory.str('type', default='')        # Type of the configuration file
        fname       = pyre.inventory.str('fname', default='')
        description = pyre.inventory.str('description', default='')
        parser      = pyre.inventory.str('parser', default='')
        text        = pyre.inventory.str('text', default='')


    def default(self, director):
        return select(id='main-display-area').replaceContent(self.content(director))


    def content(self, director):
        self._sim   = director.clerk.getQESimulations(id=self.id)
        self._input = director.clerk.getQEConfigurations(id=self.configid)

        def viewIndicator(director):
            path = []
            path.append(('Simulations ', load(actor='materialsimulation')))
             # Stub, should filter by simulation type
            path.append(('Quantum Espresso ', load(actor='materialsimulation')))
            path.append(('%s ' % self.id, load(actor    = 'material_simulations/espresso/sim-view',
                                               id       = self.id))
                        )
            path.append("Edit Configuration: %s" % self.type)

            return director.retrieveVisual('view-indicator', path=path)

        doc         = lc.document(title="Edit Configuration: %s" % self.type)
        splitter    = doc.splitter(orientation="vertical")
        sA          = splitter.section()
        sA.add(viewIndicator(director))
        sB          = splitter.section()


        form        = Form(title = "Edit Quantum Espresso PW Configuration")
        fname       = form.text(name="fname", label='File Name', value=self._input.filename)
        description = form.text(name="description", label='Description', value=self._input.description)
        parser      = form.selector(name="parser", label='Parser', entries=enumerate(PARSERS))  # Doesn't do anything
        text        = form.textarea(name="text", label='Config Text', value=self._input.text)
        submit      = form.submitbutton(label="Edit Configuration")
        form.onsubmit   = select(element=form).submit(actor     = 'material_simulations/espresso/input-edit',
                                                      routine   = 'updateRecord',
                                                      id        = self.id,
                                                      configid  = self.configid)   # no type

        # TODO: "Cancel" button looks UGLY
        cancel      = lc.link(label="Cancel")
        cancel.onclick = load(actor = 'material_simulations/espresso/sim-view', id=self.id)
        form.add(cancel)
        sB.add(form)

        return doc


    def updateRecord(self, director):
        """Update configuration record"""
        params  = {"filename":      self.fname,
                   "description":   self.description,
                   "parser":        PARSERS[int(self.parser)],
                   "text":          self.text}
        self._input     = director.clerk.getQEConfigurations(id=self.configid)
        self._input.setDirector(director)
        self._input.updateRecord(params)
        return load(actor='material_simulations/espresso/sim-view', id=self.id)


    def __init__(self):
        super(Actor, self).__init__(name='material_simulations/espresso/input-add')

        return


    def _configure(self):
        super(Actor, self)._configure()
        self.id             = self.inventory.id
        self.configid       = self.inventory.configid
        self.type           = self.inventory.type
        self.fname          = self.inventory.fname
        self.description    = self.inventory.description
        self.parser         = self.inventory.parser
        self.text           = self.inventory.text

    def _init(self):
        super(Actor, self)._init()
        return

def actor():
    return Actor()

__date__ = "$Nov 9, 2009 5:07:11 PM$"


