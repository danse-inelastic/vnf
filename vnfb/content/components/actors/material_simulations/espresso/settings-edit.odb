#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

from vnfb.utils.qeconst import SERVERS

from luban.content import select
from luban.content.Paragraph import Paragraph
from luban.content.Document import Document
from luban.content.HtmlDocument import HtmlDocument
from luban.content import load
from luban.content.Link import Link
from luban.content.Splitter import Splitter
from luban.content.FormSelectorField import FormSelectorField
from luban.content.FormRadioBox import FormRadioBox
from luban.content.Form import Form
from luban.content.Tabs import Tabs
from luban.content.Button import Button

import luban.content as lc
from luban.components.AuthorizedActor import AuthorizedActor as base

# Requires simulation id,
class Actor(base):

    class Inventory(base.Inventory):
        import pyre.inventory
        id          = pyre.inventory.str('id', default='')          # Simulation Id
        configid    = pyre.inventory.str('configid', default='')    # Configuration Id
        filename    = pyre.inventory.str('filename', default='')
        description = pyre.inventory.str('description', default='')
        servername  = pyre.inventory.str('servername', default='')
        numproc     = pyre.inventory.int('numproc', default=0)
        numnodes    = pyre.inventory.int('numnodes', default=0)
        procpernode = pyre.inventory.int('procpernode', default=0)
        npool       = pyre.inventory.int('npool', default=0)
        executable  = pyre.inventory.str('executable', default='')
        params      = pyre.inventory.str('params', default='')
        modules     = pyre.inventory.str('modules', default='')

    def default(self, director):
        return select(id='main-display-area').replaceContent(self.content(director))


    def content(self, director):
        self._sim       = director.clerk.getQESimulations(id=self.id)
        self._settings  = director.clerk.getQEConfigurations(id=self.configid)

        (self._parser, fp)  = self.parser(self._settings)

        def viewIndicator(director):
            path = []
            path.append(('Simulations ', load(actor='materialsimulation')))
             # Stub, should filter by simulation type
            path.append(('Quantum Espresso ', load(actor='materialsimulation')))
            path.append(('%s ' % self.id, load(actor    = 'material_simulations/espresso/sim-view',
                                               id       = self.id))
                        )
            path.append("Edit Settings Configuration")

            return director.retrieveVisual('view-indicator', path=path)

        doc         = lc.document(title="Edit Settings Configuration")
        splitter    = doc.splitter(orientation="vertical")
        sA          = splitter.section()
        sA.add(viewIndicator(director))
        sB          = splitter.section()

        form            = Form(title="Edit Quantum Espresso Settings Configuration")
        filename        = form.text(name="filename", label='File Name', value=self._filename(self._settings))
        servername      = form.selector(name="servername", label='Server Name', entries=enumerate(SERVERS)) # value?
        numproc         = form.text(name="numproc", label='Number of Processors', value=self._get("server", "num-proc"))
        numnodes        = form.text(name="numnodes", label='Number of Nodes', value=self._get("server", "num-nodes"))
        procpernode     = form.text(name="procpernode", label='Processors Per Node', value=self._get("server", "proc-per-node"))
        npool           = form.text(name="npool", label='Npool', value=self._get("server", "npool"))
        executable      = form.text(name="executable", label='Executable', value=self._get("server", "executable"))
        params          = form.text(name="params", label='Additional Parameters', value=self._get("server", "params"))
        modulesespresso    = form.text(name="modules", label='Modules', value=self._get("server", "modules"))

        submit          = form.submitbutton(label="Edit Settings Configuration")
        form.onsubmit   = select(element=form).submit(actor     = 'material_simulations/espresso/settings-edit',
                                                      routine   = 'updateRecord',
                                                      id        = self.id,
                                                      configid  = self.configid)

        # TODO: "Cancel" button looks UGLY
        cancel      = lc.link(label="Cancel")
        cancel.onclick = load(actor = 'material_simulations/espresso/sim-view', id=self.id)
        form.add(cancel)
        sB.add(form)

        return doc


    def updateRecord(self, director):
        """Update settings record"""
        self._settings     = director.clerk.getQEConfigurations(id=self.configid)
        self._settings.setDirector(director)

        params  = {"filename":      self.filename,
                   "text":          self._text()}
                   #"description":   self.description,  # I don't really need description at this point!
                   
        self._settings.updateRecord(params)
        return load(actor = 'material_simulations/espresso/sim-view', id=self.id)


    def _text(self):
        """Returns text based on set parameters"""
        import ConfigParser
        import StringIO

        parser  = ConfigParser.ConfigParser()
        fp  = StringIO.StringIO()
        parser.read(fp)

        if parser:
            parser.add_section("server")
            parser.set("server", "server-name", SERVERS[int(self.servername)])
            parser.set("server", "num-proc", self.numproc)
            parser.set("server", "num-nodes", self.numnodes)
            parser.set("server", "proc-per-node", self.procpernode)
            parser.set("server", "npool", self.npool)
            parser.set("server", "executable", self.executable)
            parser.set("server", "params", self.params)
            parser.set("server", "modules", self.modules)

            parser.write(fp)
            return fp.getvalue()

        return ''
    

    def parser(self, settings):
        import ConfigParser
        import StringIO

        if settings:
            # check if settings[0] isinstanceof Configuration
            config  = settings.text

            if config:  # Important: Implies that it has sections already
                fp  = StringIO.StringIO(config)
                parser  = ConfigParser.ConfigParser()
                parser.readfp(fp)
                return (parser, fp)

        return (None, None)


    def _get(self, section, param):
        if self._parser:
            return self._parser.get(section, param)

        return ''


    def _filename(self, input):
        if input:
            return input.filename

        return ""


    def __init__(self):
        super(Actor, self).__init__(name='material_simulations/espresso/settings-edit')

        return


    def _configure(self):
        super(Actor, self)._configure()
        self.id             = self.inventory.id
        self.configid       = self.inventory.configid
        self.filename       = self.inventory.filename
        self.description    = self.inventory.description
        self.servername     = self.inventory.servername
        self.numproc        = self.inventory.numproc
        self.numnodes       = self.inventory.numnodes
        self.procpernode    = self.inventory.procpernode
        self.npool          = self.inventory.npool
        self.executable     = self.inventory.executable
        self.params         = self.inventory.params
        self.modules        = self.inventory.modules


    def _init(self):
        super(Actor, self)._init()
        return

def actor():
    return Actor()




__date__ = "$Nov 11, 2009 1:03:02 PM$"


