#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

from vnfb.qeutils.qegrid import QEGrid

from luban.content import select
from luban.content import load
from luban.content.Form import Form
from luban.content.FormSelectorField import FormSelectorField
from luban.content.FormTextField import FormTextField
from luban.content.FormSubmitButton import FormSubmitButton
from vnfb.qeutils.qeconst import PROCESSORS, NOPARALSIM, SIMTYPE

import luban.content as lc
from luban.components.AuthorizedActor import AuthorizedActor as base

class Actor(base):

    class Inventory(base.Inventory):
        import pyre.inventory
        id          = pyre.inventory.str('id', default='')          # Simulation Id
        configid    = pyre.inventory.str('configid', default='')
        sname       = pyre.inventory.str('sname', default='')
        description = pyre.inventory.str('description', default='') # Not used
        numproc     = pyre.inventory.int('numproc', default=0)


    def default(self, director):
        return select(id='main-display-area').replaceContent(self.content(director))


    def content(self, director):
        sim       = director.clerk.getQESimulations(id=self.id)
        settings  = director.clerk.getQESettings(id=self.configid)


        def viewIndicator(director):
            path = []
            path.append(('Simulations ', load(actor='materialsimulation')))
             # Stub, should filter by simulation type
            path.append(('Quantum Espresso ', load(actor='materialsimulation')))
            path.append(('%s ' % self.id, load(actor    = 'material_simulations/espresso/sim-view',
                                               id       = self.id))
                        )
            path.append("Edit Settings Configuration")

            return director.retrieveVisual('view-indicator', path=path)

        doc         = lc.document(title="Edit Settings Configuration")
        splitter    = doc.splitter(orientation="vertical")
        sA          = splitter.section()
        sA.add(viewIndicator(director))
        sB          = splitter.section()
        sB.add(self._setForm(sim, settings))

        return doc


    def _setForm(self, sim, settings):
        "Edit settings form"
        form        = Form(id='create-simulation-form')
        table       = QEGrid(lc.grid(Class="qe-form"))
        form.add(table.grid())

        numproc         = FormSelectorField(name        = "numproc",
                                            entries     = self._procOptions(sim),
                                            selection   = self._procSelected(settings))
        sname           = FormTextField(name = "sname", value = settings.sname)
        description     = FormTextField(name = "description", value=settings.description)   # Make as textarea

        submit      = FormSubmitButton(label="Edit Settings Configuration")
        cancel      = lc.button(label="Cancel")
        cancel.onclick  = load(actor = 'material_simulations/espresso/sim-view', id=self.id)

        st          = QEGrid(lc.grid()) # Submit Table
        st.addRow((submit, cancel), ("qe-action-accept", "qe-action-cancel"))

        table.addRow(("Number of Processors: *", numproc))
        table.addRow(("Name:", sname))
        table.addRow(("Description:", description))
        table.addRow(("", st.grid()))

        table.setColumnStyle(0, "qe-form-label")
        table.setColumnStyle(1, "qe-form-field")

        form.onsubmit   = select(element=form).submit(actor     = 'material_simulations/espresso/settings-edit',
                                                      routine   = 'updateRecord',
                                                      id        = self.id,
                                                      configid  = self.configid)

        return form
    

    def _procSelected(self, settings):
        "Return selected order"
        # Because of the bug in FormSelectorField we will just return the number of cores
        return settings.numproc


    def _procOptions(self, sim):
        "Available options for number of cores"
        DEFAULT     = enumerate(PROCESSORS)
        if not sim:
            return DEFAULT

        for k in SIMTYPE.keys():
            if SIMTYPE[k] == sim.type and k in NOPARALSIM:
                return enumerate((1,))  # Single core
                
        return DEFAULT
    

    def updateRecord(self, director):
        """Update settings record"""
        settings     = director.clerk.getQESettings(id=self.configid)
        settings.setDirector(director)

        params  = {"sname":         self.sname,
                   "description":   self.description,  # I don't really need description at this point!
                   "numproc":       PROCESSORS[int(self.numproc)],
                  }                   
        settings.updateRecord(params)
        
        return load(actor = 'material_simulations/espresso/sim-view', id=self.id)


    def __init__(self):
        super(Actor, self).__init__(name='material_simulations/espresso/settings-edit')

        return


    def _configure(self):
        super(Actor, self)._configure()
        self.id             = self.inventory.id
        self.configid       = self.inventory.configid
        self.sname          = self.inventory.sname
        self.description    = self.inventory.description
        self.numproc        = self.inventory.numproc


    def _init(self):
        super(Actor, self)._init()
        return

def actor():
    return Actor()




__date__ = "$Nov 11, 2009 1:03:02 PM$"


