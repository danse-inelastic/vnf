#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

import os
import time
import shutil
from vnfb.qeutils.qeutils import analyseActor
from vnfb.qeutils.qeutils import qeinput, packname, resultsdir
import idf.DOS
import idf.Polarizations
import idf.Omega2
from qecalc.qetask.qeparser.pwinput import PWInput
from qecalc.qetask.matdyntask import MatdynTask
from luban.components.AuthorizedActor import AuthorizedActor as base

CONVERT_DELAY   = 7     # 7 sec
C               = 29979245800.0
TWO_PI          = 2.*3.14159265
TO_THZ          = 0.0299792458
A2B             = 1.889725989   # Angstroms to bohrs
PI              = 3.14159265

PHONON_FILES    = ("Polarizations", "Omega2", "Qgridinfo")

# XXX: Let users know that the Phonons are created!
# XXX: Input files for tasks are used. Gives error if they are missing or inappropriate
# XXX: Make sure that simtype is passed!

# Requires simulation id, config id and config type: (id, configid, type)
class Actor(base):

    class Inventory(base.Inventory):
        import pyre.inventory
        simid       = pyre.inventory.str('simid', default='')
        simtype     = pyre.inventory.str('simtype', default='')


    def create(self, director):
        "Create Phonons on Grid in idf format"
        self._mddir = self._matdynpath(director)
        #print self._mddir
        self._convertResults(director)
        self._createRecord(director)
        self._createLocation(director)
        self._relocateResults(director)

        return director.redirect(actor   = analyseActor(self.simtype),
                                 routine = 'default',
                                 id      = self.simid,
                                 simtype = self.simtype)


    # XXX: Check if the DOS is converted correctly!
    def _convertResults(self, director):
        """Convert matdyn output (matdyn.modes, matdyn.freq, matdyn.dos) to
        DOS, Polarizations, Omega2 file to jobs temp directory
        """
        settingString   = self._setSettings(director)
        matdyn = MatdynTask( configString = settingString)
        #matdyn.syncSetting()
        matdyn.input.parse()
        matdyn.output.parse()
        Pols, Freqs, qPoints = matdyn.output.property('multi phonon')
        
        self._createPolarizations(director, matdyn, Pols)
        self._createOmega2(director, matdyn, Freqs)
        self._createQgridinfo(director, matdyn)

        time.sleep(CONVERT_DELAY)   # Wait for a while to make sure that file are created


    def _setSettings(self, director):
        "Returns settings string for MATDYN task"
        mddir       = self._matdynpath(director)    # Returns directory where the matdyn data are stored
        # Get matdyn input file
        mdinput     = qeinput(director, self.simid, "MATDYN")
        mdinp       = packname(mdinput.id, "matdyn.in")
        mdinp       = os.path.join(mddir, mdinp)
        flvec       = os.path.join(mddir, "matdyn.modes")
        flfrq       = os.path.join(mddir, "matdyn.freq")

        # Configuration setting for QECalc
        settingString = """[matdyn.x]
matdynInput = %s
flvec = %s
flfrq = %s
""" % (mdinp, flvec, flfrq)

        return settingString


    def _createPolarizations(self, director, matdyn, pols):
        "Creates Polarizations file"
        mddir       = self._matdynpath(director)
        pol         = os.path.join(mddir, "Polarizations")
        idf.Polarizations.write(pols, pol, 'Polarizations')


    def _createOmega2(self, director, matdyn, freqs):
        "Creates Omega2 file"
        mddir       = self._matdynpath(director)
        omega2      = os.path.join(mddir, "Omega2")
        idf.Omega2.write( (freqs*C*TWO_PI)**2, omega2, '')


    def _createQgridinfo(self, director, matdyn):
        "Creates Qgridinfo file"
        mddir       = self._matdynpath(director)
        qinfo       = os.path.join(mddir, "Qgridinfo")
        nqGrid      = self._nqgrid(matdyn)
        recipLattice    = self._recipLattice(director, matdyn)
        self._genQgridinfo(qinfo, nqGrid, recipLattice)


    #XXX: Check if nk1, nk2, nk3 are present in matdyn.in!
    def _nqgrid(self, matdyn):
        "Returns list of nq values on grid. Example: [4, 4, 4]"
        nl = matdyn.input.namelist("input") 
        return [int(nl.param("nk1")), int(nl.param("nk2")), int(nl.param("nk3"))]
        

    def _recipLattice(self, director, matdyn):
        "Returns reciprocal lattice"
        pwdir       = self._pwpath(director)
        pwinput     = qeinput(director, self.simid, "PW")
        pwinp       = packname(pwinput.id, "pw.in")
        pwinp       = os.path.join(pwdir, pwinp)
        pwInput     = PWInput(filename = pwinp)
        pwInput.parse()
        return pwInput.structure.lattice.diffpy().reciprocal().base*2.0*PI*A2B


    def _genQgridinfo(self, filename, nqGrid, recipLattice):
        s = ''
        for i in range(3):
            s = s + 'b%d = %# .8f , %# .8f , %# .8f\nn%d = %d\n'%(i+1, \
            recipLattice[i,0], recipLattice[i,1], recipLattice[i,2], i+1, nqGrid[i])

        open(filename, 'w').write(s)


    def _matdynpath(self, director):
        # Example: mddir   = "/home/dexity/exports/vnf/vnfb/content/data/tmp/tmpTRqFuy/8CNH5MUJ"
        return resultsdir(director, self.simid, "MATDYN", subtype="dispersion")    # tmp results directory


    def _pwpath(self, director):
        # Example: pwdir   = "/home/dexity/exports/vnf/vnfb/content/data/tmp/tmpTRqFuy/8CNH5MUJ"
        return resultsdir(director, self.simid, "PW")    # tmp results directory


    def _createRecord(self, director):
        """Creates 'phonons' record (taken from: vnfb/components/ComputationResultRetriever.py)
        Notes:
            - Sets phonid
        """
        from vnfb.dom.material_simulations.Phonons import PhononsTable
        domaccessor = director.retrieveDOMAccessor('material_simulations/phonons')
        orm         = domaccessor.orm   # ?
        clerk       = director.clerk
        computation = clerk.getQESimulations(id = self.simid)
        record      = clerk.insertNewOwnedRecord(PhononsTable, owner = computation.creator)
        self._phonid    = record.id

        # The result record should know where it comes from
        computation.results.add(record, clerk.db)
        record.matter = computation.structureid
        clerk.db.updateRecord(record)


    def _createLocation(self, director):
        "Creates directory to store DOS file (data.idf)"
        phonpath    = self._phonpath(director)
        if not os.path.exists(phonpath):
            os.makedirs (phonpath)


    def _relocateResults(self, director):
        "Copy from tmp/ directory to phonons directory"
        mddir       = resultsdir(director, self.simid, "MATDYN")
        dest        = self._phonpath(director)
        for file in PHONON_FILES:
            src         = os.path.join(mddir, file)   # XXX Check if it exists
            shutil.copy(src, dest)


    def _phonpath(self, director):
        "Returns phonondoses directory corresponding to id (set in _createRecord())"
        # Example: phonons/3TUHW54R/data.idf/
        dataroot    = self._dataroot(director)
        pid         = os.path.join("phonons", self._phonid) # Phonons id
        dir         = os.path.join(dataroot, pid)
        dir         = os.path.join(dir, "data.idf") # Specific for "dispersion"
        return dir


    def _dataroot(self, director):
        "Returns data root path"
        dds = director.dds
        return os.path.abspath(dds.dataroot)


    def _testIDF(self):
        pass

    def __init__(self):
        super(Actor, self).__init__(name='material_simulations/espresso/phonons')

        return


    def _configure(self):
        super(Actor, self)._configure()
        self.simid       = self.inventory.simid
        self.simtype     = self.inventory.simtype


    def _init(self):
        super(Actor, self)._init()
        return

def actor():
    return Actor()


__date__ = "$Jan 18, 2010 10:30:39 PM$"


