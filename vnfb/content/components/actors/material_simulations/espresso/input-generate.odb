#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

from vnf.dom.QEConfiguration import QEConfiguration
from vnfb.utils.qeconst import PARSERS, TYPE
from vnfb.utils.qegrid import QEGrid

from luban.content import select
from luban.content import load

import luban.content as lc
from luban.components.AuthorizedActor import AuthorizedActor as base

# Requires simulation id, 
class Actor(base):

    class Inventory(base.Inventory):
        import pyre.inventory
        id          = pyre.inventory.str('id', default='')          # Simulation Id
        taskid      = pyre.inventory.str('taskid', default='')
        type        = pyre.inventory.str('type', default='')        # Type of the configuration file
        fname       = pyre.inventory.str('fname', default='')
        description = pyre.inventory.str('description', default='')
        text        = pyre.inventory.str('text', default='')


    def default(self, director):
        return select(id='main-display-area').replaceContent(self.content(director))


    def content(self, director):

        def viewIndicator(director):
            path = []
            path.append(('Simulations ', load(actor='materialsimulation')))
            path.append(('Quantum Espresso ', load(actor='materialsimulation')))
            path.append(('%s ' % self.id, load(actor    = 'material_simulations/espresso/sim-view',
                                               id       = self.id)))
            path.append(('%s Task ' % self.type, load(actor    = 'material_simulations/espresso/task-view',
                                                      id       = self.id,
                                                      taskid   = self.taskid,
                                                      type     = self.type)))

            path.append('Set Parameters')
            
            return director.retrieveVisual('view-indicator', path=path)

        doc         = lc.document(title   = "Create Input Configuration: %s" % self.type)
        splitter    = doc.splitter(orientation="vertical")
        sA          = splitter.section()
        sA.add(viewIndicator(director))
        sB          = splitter.section()
        sB.add(self._setForm(director))

        return doc


    def _setForm(self, director):
        "Sets create new settings form"
        # Remove "PW" case when atomic structure connector is implemented
#        if self.type == "PW":
#            visual  = "material_simulations/espresso/input-default"
#            return director.retrieveVisual(visual, actor = self)


        if self.type in TYPE:
            visual  = "material_simulations/espresso/input-%s" % self.type.lower()
            return director.retrieveVisual(visual, actor = self)

        visual  = "material_simulations/espresso/input-default"
        return director.retrieveVisual(visual, actor = self)

    def __init__(self):
        super(Actor, self).__init__(name='material_simulations/espresso/input-generate')

        return


    def _configure(self):
        super(Actor, self)._configure()
        self.id             = self.inventory.id
        self.taskid         = self.inventory.taskid
        self.type           = self.inventory.type
        self.fname          = self.inventory.fname
        self.description    = self.inventory.description
        self.text           = self.inventory.text


    def _init(self):
        super(Actor, self)._init()
        return

def actor():
    return Actor()

__date__ = "$Nov 9, 2009 4:09:15 PM$"





