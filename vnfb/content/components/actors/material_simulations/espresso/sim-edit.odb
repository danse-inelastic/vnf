#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

"""
TODO: Handle cases when:
    - simulation type changes (simtype)
    - server change (server)

Notes:
    - Atomic structure cannot be changed

Question:
    - What happens to tasks?
"""

from vnfb.utils.serverlist import ServerList
from vnfb.utils.qegrid import QEGrid
from vnfb.utils.qeconst import SIMULATIONS

from luban.content import select
from luban.content import load
from luban.content.FormSelectorField import FormSelectorField
from luban.content.FormTextField import FormTextField
from luban.content.FormSubmitButton import FormSubmitButton
from luban.content.Form import Form

import luban.content as lc
from luban.components.AuthorizedActor import AuthorizedActor as base

class Actor(base):

    class Inventory(base.Inventory):
        import pyre.inventory
        # Add tips for each parameter?

        id          = pyre.inventory.str('id', default='')      # Simulation Id
        sname       = pyre.inventory.str('sname', default='')
        simtype     = pyre.inventory.str('simtype', default='')
        description = pyre.inventory.str('description', default='')
        label       = pyre.inventory.str('label', default='')
        server      = pyre.inventory.str('server', default='')


    def default(self, director):
        return select(id='main-display-area').replaceContent(self.content(director))

    def content(self, director):
        # What if record is not present?
        sim = director.clerk.getQESimulations(id=self.id)
        def viewIndicator(director):
            path = []
            path.append(('Simulations ', load(actor='materialsimulation')))
             # Stub, should filter by simulation type
            path.append(('Quantum Espresso ', load(actor='materialsimulation')))
            path.append(('%s ' % self.id, load(actor= 'material_simulations/espresso/sim-view',
                    id= self.id)))
            path.append('Edit')
            return director.retrieveVisual('view-indicator', path=path)
        doc         = lc.document(title   = 'Edit Simulation: %s' % sim.sname)
        splitter    = doc.splitter(orientation="vertical")
        sA          = splitter.section()
        sA.add(viewIndicator(director))
        sB          = splitter.section()
        types       = []
        types.append(sim.type)
        sB.add(self._setForm(director, sim))
        return doc
    
    def _setForm(self, director, sim):
        # Set servers first
        servers     = ServerList(director)
        serversList = servers.list()
        form        = Form()
        table       = QEGrid(lc.grid(Class="qe-form"))
        form.add(table.grid())
        sname       = FormTextField(name = "sname", value = sim.sname)
        simtype     = FormSelectorField(name="simtype",
                                        entries=enumerate(SIMULATIONS),
                                        selection=self.simtypeValue(sim.type))
        description = FormTextField(name="description", value=sim.short_description)   # Make as textarea
        label       = FormTextField(name="label", value=sim.label)
        server      = FormSelectorField(name="server",
                                        entries=enumerate(serversList),
                                        selection=servers.selected(sim.serverid))
        submit      = FormSubmitButton(label="Save Changes")
        cancel      = lc.button(label="Cancel")
        cancel.onclick = load(actor = 'material_simulations/espresso/sim-view', id=self.id)
        st          = QEGrid(lc.grid()) # Submit Table
        st.addRow((submit, cancel), ("qe-action-accept", "qe-action-cancel"))
        table.addRow(("Type:", simtype))
        table.addRow(("Name:", sname))
        table.addRow(("Description:", description))
        table.addRow(("Label:", label))
        table.addRow(("Server:", server))
        table.addRow(("", st.grid()))
        table.setColumnStyle(0, "qe-form-label")
        table.setColumnStyle(1, "qe-form-field")
        form.onsubmit = select(element=form).submit(actor     = 'material_simulations/espresso/sim-edit',
                                                      routine   = 'updateRecord',
                                                      id        = sim.id)
        return form

    def simtypeValue(self, simtype):
        for i in range(len(SIMULATIONS)):
            if SIMULATIONS[i] == simtype:
                return i
        return 0

    def updateRecord(self, director):
        """Updates record in the database """
        self._verify()
        simtype     = SIMULATIONS[int(self.simtype)]
        servers     = ServerList(director)
        sim             = director.clerk.getQESimulations(id=self.id)   # ?
        if sim:
            params  = {"sname":         self.sname,
                       "type":          simtype, # Type cannot be updated
                       "short_description":   self.description,
                       "label":         self.label,
                       "serverid":      servers.id(self.server)
                       }
            sim.setDirector(director)
            sim.updateRecord(params)
        return load(actor='material_simulations/espresso/sim-view', id=self.id)  # Redirection to the page

    # stub
    def _verify(self):
        """Verify data first """
        pass


    def _configure(self):
        super(Actor, self)._configure()
        self.id          = self.inventory.id
        self.sname       = self.inventory.sname
        self.simtype     = self.inventory.simtype
        self.description = self.inventory.description
        self.label       = self.inventory.label
        self.server      = self.inventory.server

        return


    def __init__(self):
        super(Actor, self).__init__(name='material_simulations/espresso/sim-edit')

        return


    def _init(self):
        super(Actor, self)._init()
        return

def actor():
    return Actor()



__date__ = "$Nov 2, 2009 3:15:49 PM$"



# Example of using 'selection' option

#        simtype     = form.selector(name="simtype", label='Simulation Type',
#                                    entries=enumerate(SIMULATIONS),
#                                    selection=self.simtypeValue(sim.type))

#    def simtypeValue(self, simtype):
#        for i in range(len(SIMULATIONS)):
#            if SIMULATIONS[i] == simtype:
#                return i
#
#        return 0
