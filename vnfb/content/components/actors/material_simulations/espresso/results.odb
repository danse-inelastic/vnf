import os.path
#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

# Use matplotlib and QECalc to analyze results

import os
from vnfb.utils.qeutils import stamp2date
from vnfb.utils.qeutils import qejob
from vnfb.utils.qeutils import parseFile, parsePHFile
from vnfb.utils.qegrid import QEGrid
from vnfb.utils.qeresults import QEResults
from vnfb.utils.qetaskinfo import TaskInfo
from vnfb.utils.qeutils import latestJob

from luban.content import select
from luban.content import load

import luban.content as lc
from luban.components.AuthorizedActor import AuthorizedActor as base

# Requires simulation id, config id and config type: (id, configid, type)
class Actor(base):

    class Inventory(base.Inventory):
        import pyre.inventory
        id          = pyre.inventory.str('id', default='')          # Simulation Id


    def default(self, director):
        return select(id='main-display-area').replaceContent(self.content(director))


    def content(self, director):
        self.id         = self.inventory.id
        self._director  = director
        sim         = director.clerk.getQESimulations(id=self.id)   # Not None
        self._simlist   = self._getSimlist(sim.type)
        simtasks        = director.clerk.getQESimulationTasks(where="simulationid='%s'" % self.id)
        taskslist       = self._tasksList(simtasks)
        jobslist        = self._jobsList(taskslist)
        inputslist      = self._inputsList(taskslist)
        self._jitlist    = zip(jobslist, inputslist, taskslist) # Jobs - Input list

        def viewIndicator(director):
            path = []
            path.append(('Simulations ', load(actor='materialsimulation')))
            path.append(('Quantum Espresso ', load(actor='materialsimulation')))
            path.append(('%s ' % self.id, load(actor    = 'material_simulations/espresso/sim-view',
                                               id       = self.id)))

            path.append('Simulation Results')

            return director.retrieveVisual('view-indicator', path=path)

        doc         = lc.document(title="Simulation Results")
        splitter    = doc.splitter(orientation="vertical")
        sA          = splitter.section()
        sA.add(viewIndicator(director))
        sB          = splitter.section(id="qe-section-actions")
        self._showActions(sB, sim)               # Show actions
        sC          = splitter.section()
        self._showData(sC)                  # Show data
        sD          = splitter.section()

        self._showPlot(director, sD)        # Electron DOS
        self._showPhononPlot(director, sD)  # Phonon DOS

        return doc


    def _showActions(self, section, sim):  #, inputs
        section.add(lc.link(label="Back",
                            Class="qe-action-back",
                            onclick = load(actor      = 'material_simulations/espresso/sim-view',
                                             id         = self.id))
                    )

        self._showPhononDos(section, sim)
        self._showPhononDispersion(section, sim)
        #self._showElectrons(section)
        #self._showPhonons(section)
        section.add(lc.document(Class="clear-both"))


    def _showPhononDos(self, section, sim):
        linkDos     = lc.link(label="Create Phonon DOS",
                            Class="qe-action-edit",
                            onclick = load(actor        = 'material_simulations/espresso/phonondos',
                                            routine     = 'create',
                                            simid       = self.inventory.id))

        # Uncomment
#        if self._phononDosCreated(sim):     # Check if DOS created
#            linkDos.label   = "Phonon DOS"
#            linkDos.onclick = load(actor        = 'atomicstructure',
#                                    routine     = 'showOverview',
#                                    id          = sim.structureid)  # matter id

        section.add(linkDos)


    def _phononDosCreated(self, sim):
        job         = qejob(self._director, self.id, "MATDYN")
        # data.idf file exists:
        #   - job is succefully completed
        #   - results are downloaded (matdyn.dos)
        #   - phonondoses record is created,
        #   - dos is converted and copied to data.idf file
        #
        path        = self._phononDosFile()
        if job and os.path.exists(path):    # XXX (Wrong assumption) Change to: data.idf exists
            return True

        return False
        

    def _showPhononDispersion(self, section, sim):
       linkDisp     = lc.link(label="Create Phonon Dispersion",
                            Class="qe-action-edit",
                            onclick = load(actor        = 'material_simulations/espresso/phonons',
                                            routine     = 'create',
                                            simid       = self.inventory.id))
       section.add(linkDisp)


    def _showElectrons(self, section):
        section.add(lc.link(label="Electrons",
                            Class="qe-action-edit",
                            onclick = load(actor      = 'material_simulations/espresso/results',
                                             id         = self.id))
                    )
        

    def _showPhonons(self, section):
        section.add(lc.link(label="Phonons",
                            Class="qe-action-edit",
                            onclick = load(actor      = 'material_simulations/espresso/results',
                                             id         = self.id))
                    )



    def _showData(self, section):
        "Shows electron's data"
        filename    = self._pwOutputFile()
        if filename is None:
            return

        # output exists
        section.add(lc.paragraph(text="Electron System", Class="qe-section"))
        table       = QEGrid(lc.grid(Class = "qe-table"))
        section.add(table.grid())

        from qecalc.qetask.pwtask import PWTask
        
        config  = "[pw.x]\npwOutput: %s" % filename

        pw = PWTask(configString=config)
        pw.output.parse()
        tEnergy     = pw.output.property('total energy', withUnits=True)
        fEnergy     = pw.output.property('fermi energy', withUnits=True)

        tEnergyStr  = "None"
        fEnergyStr  = "None"

        # Change interface?
        if tEnergy == (None, None):
            tEnergyStr  = "%s %s" % (tEnergy[0][0], tEnergy[1])

        if fEnergy == (None, None):
            fEnergyStr  = "%s %s" % (fEnergy[0][0], fEnergy[1])
            
        table.addRow(('Total Energy:', tEnergyStr))
        table.addRow(('Fermi Energy:', fEnergyStr))
        table.setColumnStyle(0, "qe-cell-param")


    def _showPlot(self, director, section):
        "Plot electron DOS"
        dosfile      = self._dosFile()

        if dosfile is None:
            return

        section.add(lc.paragraph(text="Electron DOS", Class="qe-section"))

        # Populate 'x', 'y' and 'z' (cumulative) lists from file
        (e,  up,  down,  cum) = parseFile(dosfile)
        
        plot = lc.plot2d(Class="default-size-plot")
        plot.curve(x=e, y=up, label='Spin Up')
        plot.curve(x=e, y=down, label='Spin Down')

        section.add(plot)


    def _showPhononPlot(self, director, section):
        "Plot electron DOS"
        dosfile      = self._phononDosFile()

        if dosfile is None:
            return

        # Populate D(E) list from file
        data    = parsePHFile(dosfile)
        if data is None:
            return

        (e,  state) = data
        plot = lc.plot2d(Class="default-size-plot")
        plot.curve(x=e, y=state, label='Phonon DOS')

        section.add(lc.paragraph(text="Phonon DOS", Class="qe-section"))
        section.add(plot)


    # DOS simulation task. Should have ni.dos file
    def _dosFile(self):
        "Retruns absolute path of the DOS file"
        # Example: "/home/dexity/exports/vnf/vnfb/content/data/tmp/tmpVr7_LD/4IJW2PEI/ni.dos" v
        for jit in self._jitlist:
            if jit[0] is None:   # If job is None
                continue

            if jit[1] is not None and jit[2].type == "DOS":   # DOS type
                dataroot    = self._dataroot()
                taskinfo    = TaskInfo(simid = self.id, type = "DOS")
                results     = QEResults(self._director, jit[0], taskinfo)
                if results.ready():
                    path        = os.path.join(results.tardir(), "ni.dos")  # dos name is hardcoded
                    filepath    = os.path.join(dataroot, path)
                    return filepath
            
        return None

    # MATDYN simulation task. Should have matdyn.dos file
    def _phononDosFile(self):
        "Returns absolute path of the MATDYN file"
        # Example: "/home/dexity/exports/vnf/vnfb/content/data/tmp/tmpVr7_LD/4IJW2PEI/matdyn.dos" 
        for jit in self._jitlist:
            if jit[0] is None:   # If job is None
                continue

            if jit[1] is not None and jit[2].type == "MATDYN":   # MATDYN type
                dataroot    = self._dataroot()
                taskinfo    = TaskInfo(simid = self.id, type = "MATDYN")
                results     = QEResults(self._director, jit[0], taskinfo)
                if results.ready():
                    path        = os.path.join(results.tardir(), "matdyn.dos")  # dos name is hardcoded
                    filepath    = os.path.join(dataroot, path)
                    return filepath

        return None


    def _pwOutputFile(self):
        "Retruns absolute path of the PW output file"
        # Example: "/home/dexity/exports/vnf/vnfb/content/data/tmp/tmpTsdw21/4ICDAVNK/4I2NPMY4ni.scf.in.out"
        for jit in self._jitlist:
            if jit[0] is None:   # If job is None
                continue

            if jit[1] is not None and jit[2].type == "PW":   # PW type
                dataroot    = self._dataroot()
                taskinfo    = TaskInfo(simid = self.id, type = "PW")
                results     = QEResults(self._director, jit[0], taskinfo)
                if results.ready():
                    file        = "%s%s.out" % (jit[1].id, jit[1].filename)
                    path        = os.path.join(results.tardir(), file)
                    filepath    = os.path.join(dataroot, path)
                    return filepath

        return None



    def _dataroot(self):
        dds = self._director.dds
        return os.path.abspath(dds.dataroot)


    def _jobsList(self, taskslist):
        jobslist    = []
        for t in taskslist:
            jobslist.append(self._jobObject(t))

        return jobslist


    def _jobObject(self, task):
        "Job object"
        if task is None:
            return None

        jobs    = self._director.clerk.getQEJobs(where="taskid='%s'" % task.id)
        if jobs:    # Pick the latest job
            return latestJob(jobs)

        return None


    def _inputsList(self, taskslist):
        inputslist    = []
        for t in taskslist:
            inputslist.append(self._inputObject(t))

        return inputslist


    def _inputObject(self, task):
        "Input object"
        if task is None:
            return None

        inputs    = self._director.clerk.getQEConfigurations(where="taskid='%s'" % task.id)
        if inputs and inputs[0]:    # Pick the first
            return inputs[0]

        return None


    def __init__(self):
        super(Actor, self).__init__(name='material_simulations/espresso/results')

        return


    def _configure(self):
        super(Actor, self)._configure()
        self.id             = self.inventory.id

    def _init(self):
        super(Actor, self)._init()
        return



    # REFACTOR: Dumplicated from vnfb.utils.qetasks.py
    def _type(self, colnum):
        "Returns task type"
        return self._simlist[colnum]

    # REFACTOR: Dumplicated from vnfb.utils.qetasks.py
    def _tasknum(self):
        "Returns number of tasks"
        return len(self._simlist)


    # REFACTOR: Dumplicated from vnfb.utils.qetasks.py
    def _tasksList(self, simtasks):
        taskslist   = []
        for type in self._simlist:
            taskslist.append(self._taskObject(simtasks, type))

        return taskslist


    # REFACTOR: Dumplicated from vnfb.utils.qetasks.py
    def _taskObject(self, simtasks, type):
        """
        Return task object in simtasks of type 'type' or None otherwise
        """
        for st in simtasks:
            if st.taskid != '': # Avoid dangling references
                task    = self._director.clerk.getQETasks(id = st.taskid)
                if task is not None and task.type    == type:
                    return task

        return None


    # REFACTOR: Dumplicated from vnfb.utils.qetasks.py
    def _getSimlist(self, type):
        from vnfb.utils.qeconst import SIMCHAINS
        if type in SIMCHAINS:
            return SIMCHAINS[type]

        return ()




def actor():
    return Actor()


__date__ = "$Dec 13, 2009 1:01:27 AM$"


