import os.path
#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

# Use matplotlib and QECalc to analyze results

import os
from vnfb.utils.qeutils import stamp2date
from vnfb.utils.qeutils import parseFile
from vnfb.utils.qegrid import QEGrid
from vnfb.utils.qeresults import QEResults

from luban.content import select
from luban.content import load

import luban.content as lc
from luban.components.AuthorizedActor import AuthorizedActor as base

# Requires simulation id, config id and config type: (id, configid, type)
class Actor(base):

    class Inventory(base.Inventory):
        import pyre.inventory
        id          = pyre.inventory.str('id', default='')          # Simulation Id


    def default(self, director):
        return select(id='main-display-area').replaceContent(self.content(director))


    def content(self, director):
        self._director  = director
        sim         = director.clerk.getQESimulations(id=self.id)   # Not None
        self._simlist   = self._getSimlist(sim.type)
        simtasks        = director.clerk.getQESimulationTasks(where="simulationid='%s'" % self.id)
        taskslist       = self._tasksList(simtasks)
        jobslist        = self._jobsList(taskslist)
        inputslist      = self._inputsList(taskslist)
        self._jitlist    = zip(jobslist, inputslist, taskslist) # Jobs - Input list

        def viewIndicator(director):
            path = []
            path.append(('Simulations ', load(actor='materialsimulation')))
            path.append(('Quantum Espresso ', load(actor='materialsimulation')))
            path.append(('%s ' % self.id, load(actor    = 'material_simulations/espresso/sim-view',
                                               id       = self.id)))

            path.append('Simulation Results')

            return director.retrieveVisual('view-indicator', path=path)

        doc         = lc.document(title="Simulation Results")
        splitter    = doc.splitter(orientation="vertical")
        sA          = splitter.section()
        sA.add(viewIndicator(director))
        sB          = splitter.section(id="qe-section-actions")
        self._showActions(sB)               # Show actions
        sC          = splitter.section()
        self._showData(sC)                  # Show data
        sD          = splitter.section()
        self._showPlot(director, sD)        # Show plot

        return doc


    def _showActions(self, section):  #, inputs
        section.add(lc.link(label="Back",
                            Class="qe-action-back",
                            onclick = load(actor      = 'material_simulations/espresso/sim-view',
                                             id         = self.id))
                    )

        section.add(lc.link(label="Electrons",
                            Class="qe-action-edit",
                            onclick = load(actor      = 'material_simulations/espresso/results',
                                             id         = self.id))
                    )

        section.add(lc.link(label="Phonons",
                            Class="qe-action-edit",
                            onclick = load(actor      = 'material_simulations/espresso/results',
                                             id         = self.id))
                    )

        section.add(lc.document(Class="clear-both"))


    def _showData(self, section):
        section.add(lc.paragraph(text="Electron System", Class="qe-section"))
        table       = QEGrid(lc.grid(Class = "qe-table"))
        section.add(table.grid())

        filename    = self._pwOutputFile()
        if filename:    # output exists
            tEnergy     = self.getTotalEnergy(filename)
            fEnergy     = self.getFermiEnergy(filename)

            table.addRow(('Total Energy:', "%s %s" % tEnergy))
            table.addRow(('Fermi Energy:', "%s %s" % fEnergy))

            table.setColumnStyle(0, "qe-cell-param")


    def getTotalEnergy(self, filename):
        """
        Borrowed from QECalc
        Extract total energy value from pwscf output
        """
        #read Espresso output into memory:
        file = open(filename)
        pwscfOut = file.readlines()
        posList =  [i for i,line in enumerate(pwscfOut) if '!    total energy' in line]
        return (float(pwscfOut[posList[-1]].split()[4]), 'Ry')


    def getFermiEnergy(self, filename):
        """
        Borrowed from QECalc
        Extract Fermi energy value from pwscf output
        """
        #read Espresso output into memory:
        file = open(filename)
        pwscfOut = file.readlines()
        posList =  [i for i,line in enumerate(pwscfOut) if 'the Fermi energy is' in line]
        return (float(pwscfOut[posList[-1]].split()[4]), 'eV')


    def _showPlot(self, director, section):
        section.add(lc.paragraph(text="Electron DOS", Class="qe-section"))
        section.add(self.electronDOS())


    def electronDOS(self):
        "Plot electron DOS"
        dosfile      = self._dosFile()

        if dosfile is None:
            return ""

        # Populate 'x', 'y' and 'z' (cumulative) lists from file
        (e,  up,  down,  cum) = parseFile(dosfile)

        plot = lc.plot2d(width=500, height=350)

        plot.curve(x=e, y=up, label='Spin Up')
        plot.curve(x=e, y=down, label='Spin Down')

        return plot


    def _dosFile(self):
        "Retruns absolute path of the DOS file"
        # Example: "/home/dexity/exports/vnf/vnfb/content/data/tmp/tmpVr7_LD/4IJW2PEI/ni.dos" v
        for jit in self._jitlist:
            if jit[0] is None:   # If job is None
                continue

            if jit[1] is not None and jit[2].type == "DOS":   # DOS type
                dataroot    = self._dataroot()
                results      = QEResults(self._director, jit[0])
                if results.ready():
                    path        = os.path.join(results.tardir(), "ni.dos")  # dos name is hardcoded
                    filepath    = os.path.join(dataroot, path)
                    #print filepath
                    return filepath
            
        return None


    def _pwOutputFile(self):
        "Retruns absolute path of the PW output file"
        # Example: "/home/dexity/exports/vnf/vnfb/content/data/tmp/tmpTsdw21/4ICDAVNK/4I2NPMY4ni.scf.in.out"
        for jit in self._jitlist:
            if jit[0] is None:   # If job is None
                continue

            if jit[1] is not None and jit[2].type == "PW":   # PW type
                dataroot    = self._dataroot()
                results      = QEResults(self._director, jit[0])
                if results.ready():
                    file        = "%s%s.out" % (jit[1].id, jit[1].filename)
                    path        = os.path.join(results.tardir(), file)
                    filepath    = os.path.join(dataroot, path)
                    return filepath

        return None



    def _dataroot(self):
        dds = self._director.dds
        return os.path.abspath(dds.dataroot)


    def _jobsList(self, taskslist):
        jobslist    = []
        for t in taskslist:
            jobslist.append(self._jobObject(t))

        return jobslist


    def _jobObject(self, task):
        "Job object"
        if task is None:
            return None

        jobs    = self._director.clerk.getQEJobs(where="taskid='%s'" % task.id)
        if jobs and jobs[0]:    # Pick the first
            return jobs[0]

        return None


    def _inputsList(self, taskslist):
        inputslist    = []
        for t in taskslist:
            inputslist.append(self._inputObject(t))

        return inputslist


    def _inputObject(self, task):
        "Input object"
        if task is None:
            return None

        inputs    = self._director.clerk.getQEConfigurations(where="taskid='%s'" % task.id)
        if inputs and inputs[0]:    # Pick the first
            return inputs[0]

        return None




    def __init__(self):
        super(Actor, self).__init__(name='material_simulations/espresso/results')

        return


    def _configure(self):
        super(Actor, self)._configure()
        self.id             = self.inventory.id

    def _init(self):
        super(Actor, self)._init()
        return



    # REFACTOR: Dumplicated from vnfb.utils.qetasks.py
    def _type(self, colnum):
        "Returns task type"
        return self._simlist[colnum]

    # REFACTOR: Dumplicated from vnfb.utils.qetasks.py
    def _tasknum(self):
        "Returns number of tasks"
        return len(self._simlist)


    # REFACTOR: Dumplicated from vnfb.utils.qetasks.py
    def _tasksList(self, simtasks):
        taskslist   = []
        for type in self._simlist:
            taskslist.append(self._taskObject(simtasks, type))

        return taskslist


    # REFACTOR: Dumplicated from vnfb.utils.qetasks.py
    def _taskObject(self, simtasks, type):
        """
        Return task object in simtasks of type 'type' or None otherwise
        """
        for st in simtasks:
            if st.taskid != '': # Avoid dangling references
                task    = self._director.clerk.getQETasks(id = st.taskid)
                if task is not None and task.type    == type:
                    return task

        return None


    # REFACTOR: Dumplicated from vnfb.utils.qetasks.py
    def _getSimlist(self, type):
        from vnfb.utils.qeconst import SIMCHAINS
        if type in SIMCHAINS:
            return SIMCHAINS[type]

        return ()




def actor():
    return Actor()


__date__ = "$Dec 13, 2009 1:01:27 AM$"


