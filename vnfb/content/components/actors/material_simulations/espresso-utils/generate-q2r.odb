#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

import os
from vnfb.utils.qeparser.qeinput import QEInput
from vnfb.utils.qeparser.namelist import Namelist

from luban.components.AuthorizedActor import AuthorizedActor as base

# Requires simulation id,
class Actor(base):

    class Inventory(base.Inventory):
        import pyre.inventory
        id          = pyre.inventory.str('id', default='')          # Simulation Id
        taskid      = pyre.inventory.str('taskid', default='')
        zasr        = pyre.inventory.str('zasr', default='')        # Type of the configuration file

    def generateInput(self, director):
        return director.redirect(actor   = 'material_simulations/espresso/input-create',
                                routine = 'default',
                                text    = self._input(director),
                                id      = self.inventory.id,
                                taskid  = self.inventory.taskid)

    def _input(self, director):
        input      = QEInput(type='q2r')
        nl  = Namelist("input")

        path    = self._dynpath(director)   
        fildyn  = os.path.join(path, "matdyn")  # "matdyn" - default value for PH fildyn

        nl.add("fildyn", "'%s'" % fildyn)
        nl.add("zasr", self.inventory.zasr)
        nl.add("flfrc", "'ni.fc'")  # XXX
        input.addNamelist(nl)
        return input.toString()


    # TODO: Test!!!
    def _dynpath(self, director):
        "Returns the path of the directory where dyn file are located. E.g.: phonon directory"
        path    = ""
        simtasks = director.clerk.getQESimulationTasks(where="simulationid='%s'" % self.id)
        for st in simtasks:
            tasks   = director.clerk.getQETasks(where="id='%s' AND type='PH'" % st.taskid)
            if tasks:   # First found tasks
                break
        
        if not tasks:
            return path

        task    = tasks[0]
        if not task:
            return path
        
        jobs    = director.clerk.getQEJobs(where="taskid='%s'" % task.id)
        if len(jobs) > 0:
            # Find job of PH task
            job = jobs[0]   # XXX

            if job:
                server  = director.clerk.getServers(id=job.serverid)
                path    = os.path.join(server.workdir, job.id)

        return path

    def __init__(self):
        super(Actor, self).__init__(name='material_simulations/espresso-utils/generate-q2r')

        return


    def _configure(self):
        super(Actor, self)._configure()
        self.id             = self.inventory.id
        self.taskid         = self.inventory.taskid
        self.zasr           = self.inventory.zasr


    def _init(self):
        super(Actor, self)._init()
        return

def actor():
    return Actor()

__date__ = "$Jan 13, 2010 4:29:22 AM$"

