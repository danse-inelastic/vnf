#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

import os
from vnfb.utils.qeparser.qeinput import QEInput
from vnfb.utils.qeparser.namelist import Namelist
from vnfb.utils.qegrid import QEGrid
from vnfb.utils.qeutils import remoteResultsPath
from vnfb.utils.qeconst import PREFIX, MATDYN_METHOD
from vnfb.utils.qeutils import inputRecord, readRecordFile, defaultInputName
from vnfb.utils.qeutils import qeinput, packname, resultsdir

from qecalc.qetask.qeparser.pwinput import PWInput
from qecalc.qetask.qeparser.matdyninput import MatdynInput
from vnfb.utils.qecalcutils import kmesh

from luban.content.FormTextField import FormTextField
from luban.content.FormSubmitButton import FormSubmitButton
from luban.content import select
from luban.content import load
import luban.content as lc

from luban.components.AuthorizedActor import AuthorizedActor as base
NK  = 16

# Requires simulation id,
class Actor(base):

    class Inventory(base.Inventory):
        import pyre.inventory
        id          = pyre.inventory.str('id', default='')          # Simulation Id
        taskid      = pyre.inventory.str('taskid', default='')
        type        = pyre.inventory.str('type', default='')
        structureid = pyre.inventory.str('structureid', default='')
        method      = pyre.inventory.str('method', default='')      # dos, or dispersion
        nk1         = pyre.inventory.str('nk1', default='')        # Type of the configuration file
        nk2         = pyre.inventory.str('nk2', default='')
        nk3         = pyre.inventory.str('nk3', default='')

    def default(self, director):
        return select(id='main-display-area').replaceContent(self.content(director))


    def content(self, director):
        def viewIndicator(director):
            path = []
            path.append(('Simulations ', load(actor='materialsimulation')))
            path.append(('Quantum Espresso ', load(actor='materialsimulation')))
            path.append(('%s ' % self.id, load(actor    = 'material_simulations/espresso/sim-view',
                                               id       = self.id)))

            path.append(('%s Task ' % self.type, load(actor    = 'material_simulations/espresso/task-view',
                                                      id       = self.id,
                                                      taskid   = self.taskid,
                                                      type     = self.type)))
            path.append("Set Parameters")

            return director.retrieveVisual('view-indicator', path=path)

        doc         = lc.document(title   = "Create Input Configuration: %s" % self.type)
        splitter    = doc.splitter(orientation="vertical")
        sA          = splitter.section()
        sA.add(viewIndicator(director))
        sB          = splitter.section()
        sB.add(self._setForm(director))

        return doc
        

    def _setForm(self, director):
        form        = lc.form(id='create-simulation-form')
        table       = QEGrid(lc.grid(Class="qe-form"))
        form.add(table.grid())

        nk1         = FormTextField(name = "nk1", value = NK)
        nk2         = FormTextField(name = "nk2", value = NK)
        nk3         = FormTextField(name = "nk3", value = NK)

        submit      = FormSubmitButton(label="Generate Input Configuration")
        cancel      = lc.button(label="Cancel")
        cancel.onclick  = load(actor = 'material_simulations/espresso/sim-view', id=self.id)

        st          = QEGrid(lc.grid()) # Submit Table
        st.addRow((submit, cancel), ("qe-action-accept", "qe-action-cancel"))

        table.addRow(("nk1:", nk1))
        table.addRow(("nk2:", nk2))
        table.addRow(("nk3:", nk3))
        table.addRow(("", st.grid()))

        table.setColumnStyle(0, "qe-form-label")
        table.setColumnStyle(1, "qe-form-field")

        form.onsubmit   = select(element=form).submit(actor     = 'material_simulations/espresso-utils/generate-matdyn',
                                                      routine   = 'generateInput',
                                                      id        = self.id,
                                                      taskid    = self.taskid,
                                                      type      = self.inventory.type,
                                                      method    = self.inventory.method)    # Pass also method

        return form


    def generateInput(self, director):
        return director.redirect(actor   = 'material_simulations/espresso/input-create',
                                routine = 'default',
                                text    = self._input(director),
                                id      = self.inventory.id,
                                taskid  = self.inventory.taskid,
                                type    = self.inventory.type,
                                subtype = self._subtype())


    # XXX: nk points still should be present in the input file
    def _input(self, director):
        matdynInput = self._matdynInput(director)

        method      = self._subtype()
        if method == "dispersion":
            qpoints = self._qpoints(director, matdynInput)
            matdynInput.qpoints.set(qpoints)
            # Add nk points?
            nl  = matdynInput.namelists["input"]
            nl.add("nk1", self.nk1)
            nl.add("nk2", self.nk2)
            nl.add("nk3", self.nk3)
        
        return matdynInput.toString()


    def _subtype(self):
        "Returns subtype of simulation: 'dos' or 'dispersion'"
        methods     = MATDYN_METHOD.keys()
        option      = int(self.inventory.method)
        return methods[option]


    def _matdynInput(self, director):
        "Returns input object that can be later on used to add parameters"
        # E.g.: /home/dexity/espresso/qejobs/643E2QQI/ni.fc
        path    = remoteResultsPath(director, self.inventory.id, "Q2R")   #self._fcpath(director)
        path    = os.path.join(path, "%s.fc" % PREFIX)

        input   = MatdynInput()
        nl      = Namelist("input")
        nl.add("asr", self._asr(director))
        nl.add("flfrc", "'%s'" % path)
        nl.add("dos", ".true.")
        nl.add("nk1", self.nk1)
        nl.add("nk2", self.nk2)
        nl.add("nk3", self.nk3)

        # Add amasses
        list    = self._amasses(director)
        for m in list:
            nl.add(m[0], m[1])

        input.addNamelist(nl)
        return input


    # XXX: Take 'asr' parameter from Q2R instead of setting it manually
    def _asr(self, director):
        return "'crystal'"

    def _qpoints(self, director, mdinput):
        "Returns qpoints"
        pwdir       = self._pwpath(director)
        pwfile      = qeinput(director, self.id, "PW")
        pwpath      = packname(pwfile.id, "pw.in")
        pwpath      = os.path.join(pwdir, pwpath)
        pwInput     = PWInput(filename = pwpath)
        pwInput.parse()

        nl          = mdinput.namelist("input")
        # Populate grid
        nqGrid      = [int(nl.param("nk1")), int(nl.param("nk2")), int(nl.param("nk3"))]
        # XXX Handle case when parameters are not are not set
        qpoints     = kmesh.kMeshCart(nqGrid, pwInput.structure.lattice.reciprocalBase())

        return qpoints


    def _pwpath(self, director):
        # Example: pwdir   = "/home/dexity/exports/vnf/vnfb/content/data/tmp/tmpTRqFuy/8CNH5MUJ"
        return resultsdir(director, self.id, "PW")    # tmp results directory


    # Copied from generate-phr.py
    def _amasses(self, director):
        """Returns list of tuples with amass label and mass value from PW input configuration
        Example: [("amass(1)", "35.5"), ("amass(2)", "54.3")]
        """
        list    = []    # amass list
        masses  = self._masses(director)
        for l in range(len(masses)):
            list.append(("amass(%s)" % str(l+1), masses[l][1]))

        return list

    # Copied from generate-q2r.py
    def _masses(self, director):
        # PW configuration input
        pwinput     = inputRecord(director, self.inventory.id, "PW")
        fname       = defaultInputName(pwinput.type)
        text        = readRecordFile(director.dds, pwinput, fname)
        pw          = QEInput(config = text)
        pw.parse()

        list        = []
        # List of atom of format: [('Ni', '52.98', 'Ni.pbe-nd-rrkjus.UPF'), (...)]
        atoms       = pw.structure()
        for a in atoms:
            list.append((a[0], a[1]))

        return list


    def __init__(self):
        super(Actor, self).__init__(name='material_simulations/espresso-utils/generate-matdyn')

        return


    def _configure(self):
        super(Actor, self)._configure()
        self.id             = self.inventory.id
        self.taskid         = self.inventory.taskid
        self.type           = self.inventory.type
        self.structureid    = self.inventory.structureid
        self.method         = self.inventory.method
        self.nk1            = self.inventory.nk1
        self.nk2            = self.inventory.nk2
        self.nk3            = self.inventory.nk3


    def _init(self):
        super(Actor, self)._init()
        return

def actor():
    return Actor()


__date__ = "$Jan 13, 2010 4:29:22 AM$"

