#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

from vnfb.utils.parser.qeinput import QEInput
from vnfb.utils.parser.namelist import Namelist
from vnfb.utils.parser.card import Card

from luban.components.AuthorizedActor import AuthorizedActor as base

# Requires simulation id,
class Actor(base):

    class Inventory(base.Inventory):
        import pyre.inventory
        id          = pyre.inventory.str('id', default='')          # Simulation Id
        taskid      = pyre.inventory.str('taskid', default='')
        pseudo      = pyre.inventory.str('pseudo', default='')
        lattice     = pyre.inventory.str('lattice', default='')
        ecutwfc     = pyre.inventory.str('ecutwfc', default='')
        ecutrho     = pyre.inventory.str('ecutrho', default='')
        smearing    = pyre.inventory.str('smearing', default='')
        nk1         = pyre.inventory.str('nk1', default='')        # Type of the configuration file
        nk2         = pyre.inventory.str('nk2', default='')
        nk3         = pyre.inventory.str('nk3', default='')


    def generateInput(self, director):
        input      = QEInput(type='pw')
        nl  = Namelist("system")
        nl.add("ecutwfc", self.inventory.ecutwfc)
        nl.add("ecutrho", self.inventory.ecutrho)
        nl.add("smearing", self.inventory.smearing)
        c   = Card("k_points")
        c.setArg("automatic")
        input.addNamelist(nl)
        input.addCard(c)
        str   = input.toString()
        return director.redirect(actor   = 'material_simulations/espresso/input-create',
                                routine = 'default',
                                text    = str,
                                id      = self.inventory.id,
                                taskid  = self.inventory.taskid)

    def __init__(self):
        super(Actor, self).__init__(name='material_simulations/espresso-utils/generate-ph')

        return


    def _configure(self):
        super(Actor, self)._configure()
        self.id             = self.inventory.id
        self.taskid         = self.inventory.taskid
        self.pseudo         = self.inventory.pseudo
        self.lattice        = self.inventory.lattice
        self.ecutwfc        = self.inventory.ecutwfc
        self.ecutrho        = self.inventory.ecutrho
        self.smearing       = self.inventory.smearing
        self.nk1            = self.inventory.nk1
        self.nk2            = self.inventory.nk2
        self.nk3            = self.inventory.nk3


    def _init(self):
        super(Actor, self)._init()
        return

def actor():
    return Actor()

__date__ = "$Jan 13, 2010 4:29:22 AM$"

