#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from luban.content import load, select

from luban.components.Actor import Actor as base


class Actor(base):


    class Inventory(base.Inventory):

        import pyre.inventory

        id = pyre.inventory.str('id')

        matter_type = pyre.inventory.str('matter_type')
        matter_id = pyre.inventory.str('matter_id')

        short_description = pyre.inventory.str('short_description', default = '' )
        short_description.meta['tip'] = 'A short description'
        
        engine = pyre.inventory.str('engine', default='vasp')
        engine.validator=pyre.inventory.choice(['vasp', 'ab init'])
        engine.meta['tip'] = 'Ab initio engine'
        
        xcFunctional = pyre.inventory.str('xcFunctional', default='PAW-PBE')
        xcFunctional.meta['tip'] = 'Exchange correlation functional'
        
        kineticEnergyCutoff = pyre.inventory.float('kineticEnergyCutoff', default=140.0)
        kineticEnergyCutoff.meta['tip'] = 'Kinetic energy cutoff'

        #monkhorstPackMesh.meta['tip'] = 'Monkhorst pack mesh'
        nKx = pyre.inventory.int('nKx')
        nKy = pyre.inventory.int('nKy')
        nKz = pyre.inventory.int('nKz')


    def start(self, director):
        view = self.startform(director)
        return select(id='main-display-area').replaceContent(view)


    def startform(self, director):

        record = self._getSimulation(director)
        
        from luban.content.Splitter import Splitter
        from luban.content.Form import Form
        from luban.content.FormTextField import FormTextField
        from luban.content.FormSelectorField import FormSelectorField
        
        form = Form(
            id='abinitio-wizard-startform',
            title='Ab initio electronic structure simulation')

        short_description = form.text(
            name='short_description',
            label='Name of this calculation',
            value = record.short_description)

        subdoc = form.document(
            id='abinitio-wizard-start-form-settings-container',
            title = 'Electronic structure settings',
            )

        # drop down menu for abinitio engine: [vasp, (abinit)]
        choices=['vasp', 'quantum espresso (comming soon)']

        # temporary hack to disallowing access to vasp
        blacklist = ['demo', 'reviewer']
        if director.sentry.username in blacklist:
            del choices[choices.index('vasp')]

        entries=zip(choices,choices)

        eng=str(record.engine)
        engine = FormSelectorField(
            id='engine-selector',
            name = 'engine',
            entries = entries,
            label = 'Electronic Structure Engine',
            selection = eng)
        subdoc.add(engine)

        # drop down menu XC-functional type:
        choices=[
            'PAW-PBE', 
            'PAW-GGA', 
            'PAW-LDA',
            'USPP-GGA',
            'USPP-LDA',
            ]
        entries=zip(choices, choices)

        xcFunctional = FormSelectorField(
            id='xcf-selector',
            name = 'xcFunctional',
            entries = entries,
            label = 'Exchange correlation functional',
            selection = record.xcFunctional,
            )
        subdoc.add(xcFunctional)
        
        kineticEnergyCutoff = FormTextField(
            name='kineticEnergyCutoff',
            label='Kinetic energy cutoff (eV)',
            value = str(record.kineticEnergyCutoff))
        subdoc.add(kineticEnergyCutoff)

        box = Splitter(id='nkpts-container')
        subdoc.add(box)
        nKx = FormTextField(
            id = 'text2',
            name='nKx',
            label = 'Number of k-points (a*)',
            value = str(record.monkhorstPackMesh[0]))
        box.section().add(nKx)
        nKy = FormTextField(
            id = 'text3',
            name='nKy',
            label = 'Number of k-points (b*)',
            value = str(record.monkhorstPackMesh[1]))       
        box.section().add(nKx)
        nKz = FormTextField(
            id = 'text4',
            name='nKz',
            label = 'Number of k-points (c*)',
            value = str(record.monkhorstPackMesh[2]))     
        box.section().add(nKx)

        next = form.submitbutton(label="next")
        
        return form


    def _getSimulation(self, director):
        return director.clerk.getRecordByID(AbInitio, self.inventory.id)
    

    def __init__(self, name='abinitiowizard'):
        super(Actor, self).__init__(name)
        return



from vnf.dom.AbInitio import AbInitio


def actor(): return Actor()


# version
__id__ = "$Id$"

# End of file 

