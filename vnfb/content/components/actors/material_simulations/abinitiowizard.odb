#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from luban.content import load, select

from luban.content.Document import Document
from luban.content.Link import Link


from luban.components.Actor import Actor as base


class Actor(base):


    class Inventory(base.Inventory):

        import pyre.inventory

        id = pyre.inventory.str('id')

        matter_type = pyre.inventory.str('matter_type')
        matter_id = pyre.inventory.str('matter_id')

        short_description = pyre.inventory.str('short_description', default = '' )
        short_description.meta['tip'] = 'A short description'
        
        engine = pyre.inventory.str('engine', default='vasp')
        engine.validator=pyre.inventory.choice(['vasp', 'ab init'])
        engine.meta['tip'] = 'Ab initio engine'
        
        xcFunctional = pyre.inventory.str('xcFunctional', default='PAW-PBE')
        xcFunctional.meta['tip'] = 'Exchange correlation functional'
        
        kineticEnergyCutoff = pyre.inventory.float('kineticEnergyCutoff', default=140.0)
        kineticEnergyCutoff.meta['tip'] = 'Kinetic energy cutoff'

        #monkhorstPackMesh.meta['tip'] = 'Monkhorst pack mesh'
        nKx = pyre.inventory.int('nKx')
        nKy = pyre.inventory.int('nKy')
        nKz = pyre.inventory.int('nKz')


    def start(self, director):
        assert self.inventory.id == ''

        matter = self._getMatter(director)
        matterlabel = matter.short_description or matter.chemical_formula or matter.id
        title = 'Ab initio electronic structure simulation of %s' % (matterlabel,)
        wizard = Document(id='abinitiowizard-start', title=title)

        link = Link(label='back to Matter\ %s' % matterlabel)
        link.onclick = load(
            actor='matter', routine='showMaterialView',
            id=matter.id, type=matter.name)
        wizard.add(link)
        
        form = self.startform(director)
        wizard.add(form)
        
        return select(id='main-display-area').replaceContent(wizard)


    def restart(self, director):
        id = self.inventory.id
        assert id

        simulation = self._getSimulation(director)
        matter = simulation.matter.dereference(director.clerk.db)
        
        matterlabel = matter.short_description or matter.chemical_formula or matter.id
        title = 'Ab initio electronic structure simulation of %s: #%s' % (matterlabel, id)
        wizard = Document(id='abinitiowizard-start', title=title)

        link = Link(label='back to Matter\ %s' % matterlabel)
        link.onclick = load(
            actor='matter', routine='showMaterialView',
            id=matter.id, type=matter.name)
        wizard.add(link)
        
        form = self.startform(director)
        wizard.add(form)
        
        return select(id='main-display-area').replaceContent(wizard)


    def startform(self, director):

        id = self.inventory.id
        if id:
            record = self._getSimulation(director)
        else:
            record = AbInitio()
        
        from luban.content.Splitter import Splitter
        from luban.content.Form import Form
        from luban.content.FormTextField import FormTextField
        from luban.content.FormSelectorField import FormSelectorField
        
        form = Form(
            id='abinitio-wizard-startform',
            title='Ab initio electronic structure simulation')

        short_description = form.text(
            id='short_description-input',
            name='short_description',
            label='Name of this calculation',
            value = record.short_description)

        subdoc = form.document(
            id='abinitio-wizard-start-form-settings-container',
            title = 'Electronic structure settings',
            )

        # drop down menu for abinitio engine: [vasp, (abinit)]
        choices=['vasp', 'quantum espresso (comming soon)']

        # temporary hack to disallowing access to vasp
        blacklist = ['demo', 'reviewer']
        if director.sentry.username in blacklist:
            del choices[choices.index('vasp')]

        entries=zip(choices,choices)

        eng=str(record.engine)
        engine = FormSelectorField(
            id='engine-input',
            name = 'engine',
            entries = entries,
            label = 'Electronic Structure Engine',
            selection = eng)
        subdoc.add(engine)

        # drop down menu XC-functional type:
        choices=[
            'PAW-PBE', 
            'PAW-GGA', 
            'PAW-LDA',
            'USPP-GGA',
            'USPP-LDA',
            ]
        entries=zip(choices, choices)

        xcFunctional = FormSelectorField(
            id='xcFunctional-input',
            name = 'xcFunctional',
            entries = entries,
            label = 'Exchange correlation functional',
            selection = record.xcFunctional,
            )
        subdoc.add(xcFunctional)
        
        kineticEnergyCutoff = FormTextField(
            id = 'kineticEnergyCutoff-input',
            name='kineticEnergyCutoff',
            label='Kinetic energy cutoff (eV)',
            value = str(record.kineticEnergyCutoff))
        subdoc.add(kineticEnergyCutoff)

        box = Splitter(id='nkpts-container')
        subdoc.add(box)
        nKx = FormTextField(
            id = 'nKx-input',
            name='nKx',
            label = 'Number of k-points (a*)',
            value = str(record.monkhorstPackMesh[0]))
        box.section().add(nKx)
        nKy = FormTextField(
            id = 'nKy-input',
            name='nKy',
            label = 'Number of k-points (b*)',
            value = str(record.monkhorstPackMesh[1]))       
        box.section().add(nKy)
        nKz = FormTextField(
            id = 'nKz-input',
            name='nKz',
            label = 'Number of k-points (c*)',
            value = str(record.monkhorstPackMesh[2]))     
        box.section().add(nKz)

        next = form.submitbutton(label="next")
        
        from luban.content import select
        form.onsubmit = select(element=form).submit(
            actor = 'material_simulations/abinitiowizard',
            routine = 'processStartForm',
            id = self.inventory.id,
            matter_type = self.inventory.matter_type,
            matter_id = self.inventory.matter_id,
            )
        
        return form


    def processStartForm(self, director):

        # should verify inputs here....
        errors = {}
        short_description = self.inventory.short_description
        if not short_description:
            errors['short_description'] = 'Description cannot be empty'
        
        if errors:
            return self.startFormShowError(director, errors=errors)
        
        # store data
        id = self.inventory.id
        if id:
            record = self._getSimulation(director)
        else:
            record = director.clerk.insertNewOwnedRecord(AbInitio)
            matter = self._getMatter(director)
            record.matter = matter
        
        props = [
            'short_description',
            'engine',
            'xcFunctional',
            'kineticEnergyCutoff',
            ]
        for prop in props:
            value = getattr(self.inventory, prop)
            setattr(record, prop, value)
            continue

        record.monkhorstPackMesh = [self.inventory.nKx, self.inventory.nKy, self.inventory.nKz]
        director.clerk.updateRecordWithID(record)

        return self.advancedConfiguration(director)


    def startFormShowError(self, director, errors=None):
        from luban.content import select
        return [
            select(id='%s-input' % name).showError(text)
            for name, text in errors.iteritems()
            ]


    def advancedConfiguration(self, director):
        document = Document(title='Ab initio electronic structure simulation: advanced configuration' )

        simulation = self._getSimulation(director)
        engine = simulation.engine
        actor = 'material_simulations/%s-advanced' % engine.lower()
        routine = 'start'
        
        return director.redirect(
            actor=actor, routine=routine,
            id=simulation.id)


    def _getMatter(self, director):
        return director.clerk.getRecordByID(
            self.inventory.matter_type, self.inventory.matter_id)

    
    def _getSimulation(self, director):
        return director.clerk.getRecordByID(AbInitio, self.inventory.id)
    

    def __init__(self, name='abinitiowizard'):
        super(Actor, self).__init__(name)
        return


from vnf.dom.AbInitio import AbInitio


def actor(): return Actor()


# version
__id__ = "$Id$"

# End of file 

