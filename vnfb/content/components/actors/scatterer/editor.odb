#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from luban.content import load, select, alert

from luban.components.AuthorizedActor import AuthorizedActor as base


class Actor(base):


    class Inventory(base.Inventory):

        import pyre.inventory
        id = pyre.inventory.str(name='id')

        matter = pyre.inventory.str(name='matter')

        shape = pyre.inventory.str(name='shape')


    def selectMatter(self, director):
        domaccess = self._domaccess(director)
        id = self.inventory.id

        # scatterer record
        record = domaccess.getRecord(id)

        #
        matter = self.inventory.matter
        if not matter: raise RuntimeError

        #
        record.matter = matter

        domaccess.updateRecordWithID(record)
        return matter


    def createMatterView(self, director):
        id = self.inventory.id
        return director.retrieveVisual('scatterer/editor/matterview', id=id, director=director)


    def createMatterSelector(self, director):
        id = self.inventory.id
        return director.retrieveVisual('scatterer/editor/matterselector', id=id, director=director)


    def createShapeView(self, director):
        id = self.inventory.id
        return director.retrieveVisual('scatterer/editor/shapeview', id=id, director=director)


    def createShapeEditor(self, director):
        id = self.inventory.id
        return director.retrieveVisual('scatterer/editor/shapeeditor', id=id, director=director)


    def onSelectShapeType(self, director):
        'handles the event a user clicks a shape type button'
        #
        _buttonid = lambda s: 'scatterer-shape-button-%s' % s.lower()
        # dehighlight buttons
        from vnfb.dom.geometry import shapenames
        dehighlight = [select(id=_buttonid(s)).removeClass('highlight')
                       for s in shapenames ]

        # highlight
        shapetypename = self.inventory.shape
        highlightbutton = select(id=_buttonid(shapetypename)).addClass('highlight')

        # chang form
        newform = director.retrieveVisual(
            'scatterer/editor/shapeform',
            id = self.inventory.id,
            director = director,
            typename = shapetypename,
            )
        changeshapeform = select(id='scatterer-shape-form').replaceBy(newform)

        #
        actions = dehighlight + [highlightbutton, changeshapeform]
        return actions


    def setShape(self, director):
        "given new shape's unique identifier, change the shape of this scatterer"
        domaccess = self._domaccess(director)
        db = domaccess.db
        
        scatterer = domaccess.getRecord(self.inventory.id)
        newshape = db.fetchRecordUsingUniqueIdentifierStr(self.inventory.shape)

        # destroy old shape if it exists and is different type
        oldshape = scatterer.shape and scatterer.shape.id and scatterer.shape.dereference(db)
        if oldshape and oldshape.__class__ is not newshape.__class__:
            orm = domaccess.orm
            oldshapeobj = orm.record2object(oldshape)
            # remove reference from scatterer to old shape
            scatterer.shape = None
            db.updateRecord(scatterer)
            # destroy old shape
            orm.destroy(oldshapeobj)

        # assign new shape
        scatterer.shape = db.fetchRecordUsingUniqueIdentifierStr(self.inventory.shape)

        # update db
        db.updateRecord(scatterer)

        # change to view
        view = director.retrieveVisual(
            'scatterer/editor/shapeview',
            id=self.inventory.id, director=director)
        return select(id='scatterer-shape-view').replaceBy(view)


    def _domaccess(self, director):
        return director.retrieveDOMAccessor('scatterer')


    def __init__(self, name='scatterer/editor'):
        super(Actor, self).__init__(name)
        return


def actor(): return Actor()


# version
__id__ = "$Id$"

# End of file 

