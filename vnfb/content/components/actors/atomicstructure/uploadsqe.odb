#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from luban.content import load, select, alert
import luban.content as lc


from luban.components.AuthorizedActor import AuthorizedActor as base


class Actor(base):


    class Inventory(base.Inventory):

        import luban.inventory

        structureid = luban.inventory.str('structureid')
        uploadid = luban.inventory.str('uploadid')


    def onUpload(self, director):
        '''
        structureid: atomic structure id
        uploadid: upload it
        '''
        
        # need to create a new sqe and save the file appropriately
        # assumption: only one file uploaded

        # check the upload
        uploadid = self.inventory.uploadid
        from vnfb.utils.upload import abspath
        dir = abspath(uploadid)
        import os
        entries = os.listdir(dir); found = None
        for entry in entries:
            if entry.startswith('.'): continue
            if entry.endswith('.h5'): found = entry; break
            if entry.endswith('.nc'): found = entry; break
            continue

        # XXXX
        # should check if the files are sane and are not hostile
        # ....

        # nothing uploaded
        if not found: return alert('Invalid file')

        # path to the file
        found = os.path.join(dir, found)

        # create a new record
        clerk = director.clerk
        db = clerk.db
        #
        from vnfb.dom.material_simulations.SQE import SQETable
        sqe = clerk.insertNewOwnedRecord(SQETable)
        #
        sqe.matter = self.inventory.structureid
        db.updateRecord(sqe)

        # copy upload to new path
        ext = os.path.splitext(found)[-1]
        filename='data'+ext
        newpath = director.dds.abspath(sqe, filename=filename)
        newdir = os.path.dirname(newpath)
        if not os.path.exists(newdir):
            os.makedirs(newdir)
        import shutil
        shutil.copyfile(found, newpath)
        
        return load(
            actor='atomicstructure', routine='showOverview',
            id = self.inventory.structureid,
            )


    def __init__(self, name='atomicstructure/uploadsqe'):
        super(Actor, self).__init__(name)
        return


def actor(): return Actor()


# version
__id__ = "$Id$"

# End of file 

