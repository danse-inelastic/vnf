# -*- python -*-

from luban.content import select, load, alert
import luban.content as lc

from luban.components.FormProcessor import FormProcessor as base

class Actor(base):

    class Inventory(base.Inventory):

        import luban.inventory

    def default(self, director):
        page = lc.page(title='test matterbuilder')
        #visual = director.retrieveVisual("matterbuildervisual")
        visual = director.retrieveVisual("default")
        page.add(visual)  
        
        from luban.content.AppMenuBar import AppMenuBar
        menubar = AppMenuBar()
        fileMenu = menubar.menu(label='File')
        
        from luban.content import select
        open = fileMenu.item(label='Open', 
                          onclick = self.load_file())
        save = fileMenu.item(label='Save', 
                          onclick = self.save_as())
        saveAs = fileMenu.item(label='Save As', 
                          onclick = self.save_as())    
        povray = fileMenu.item(label='EXport Povray', 
                          onclick = self.render_povray())  
        quit = fileMenu.item(label='Exit', 
                          onclick = self.quit())  
        
        editMenu = menubar.menu(label='Edit')
        screenshot = fileMenu.item(label='Screenshot', 
                          onclick = self.dump())
        setBackground = fileMenu.item(label='Set Background Color', 
                          onclick = self.set_bg_color())
        editCoordinates = fileMenu.item(label='Edit Coordinates', 
                          onclick = self.edit_coord())   
         
        viewMenu = menubar.menu(label='View')
        animate = fileMenu.item(label='Animate', 
                          onclick = self.animate())
        lines = fileMenu.item(label='Lines', 
                          onclick = self.set_render_lines())
        ballAndStick = fileMenu.item(label='Ball and Stick', 
                          onclick = self.set_render_ballstick())   
        balls = fileMenu.item(label='Balls', 
                          onclick = self.set_render_balls()) 
        cylinders = fileMenu.item(label='Cylinders', 
                          onclick = self.set_render_cylinders()) 
        unitCell = fileMenu.item(label='Unit Cell', 
                          onclick = self.set_unit_cell()) 
        cellLabels = fileMenu.item(label='Cell Labels', 
                          onclick = self.set_cell_labels()) 
        atomLabels = fileMenu.item(label='Atom Labels', 
                          onclick = self.set_atom_labels()) 
        hideHydrogens = fileMenu.item(label='Hide Hydrogens', 
                          onclick = self.set_hide_h()) 
        
        toolsMenu = menubar.menu(label='Tools')
        measureDistances = fileMenu.item(label='Measure Distances', 
                          onclick = self.measurements())
        viewOrbitals = fileMenu.item(label='View Orbitals', 
                          onclick = self.view_orbs())
        adjustBonds = fileMenu.item(label='Adjust Bonds', 
                          onclick = self.adjust_bonds()) 
        crystalBuilder = fileMenu.item(label='Crystal Builder', 
                          onclick = self.build_xtal())    
        crystalDatabase = fileMenu.item(label='Crystal Database', 
                          onclick = self.xtal_db())
        buildSupercell = fileMenu.item(label='Build Supercell', 
                          onclick = self.build_super())
        buildSlab = fileMenu.item(label='Build Slab', 
                          onclick = self.build_slab())
        addUnitCell = fileMenu.item(label='Add Unit Cell', 
                          onclick = self.add_uc())  
        buildNanotube = fileMenu.item(label='Build Nanotube', 
                          onclick = self.build_nano())
        buildAlkane = fileMenu.item(label='Build Alkane', 
                          onclick = self.build_alka())  
        sketcher = fileMenu.item(label='Sketcher', 
                          onclick = self.sketch())             
    #    menu2 = fileMenu.menu(label='menu2')
    #
    #    from luban.content import load
    #    item2 = menu2.item(label='item2')
    #    document.add(menubar)
    #
    #    item3 = menu2.item(label='item3')
        doc.add(menubar)
        
        from luban.content.science.MatterBuilder import MatterBuilder
        mb = MatterBuilder()  
         
        mb.atoms = [
            {'element': 'H',
             'position': [0,1,2]
             },
            {'element': 'O',
             'position': [2,1,0]
             },
            ]
        
        page.add(mb)        
        return page
    
    def load_file(*args):
        fname = None
    #    d = wx.FileDialog(self,"Open","","","*",wx.OPEN)
    #    if d.ShowModal() == wx.ID_OK:
    #        fname = d.GetFilename()
    #        dir = d.GetDirectory()
    #        fullfilename = os.path.join(dir,fname)
    #    d.Destroy()
        load_file_nodialog(fullfilename)
        return
    
    def load_file_nodialog(self,fname=None):
        if fname:
            from vimm.Material import Material
    #            from matter.Structure import Structure
            if isinstance(fname, Material):
                self.material = fname
    #            elif isinstance(fname, Structure):
    #                self.material = vimmLib.loadStructure(fname)
            else:
                self.material = vimmLib.load_file(fname, "GUI")
            if self.material:
                self.SetTitle("Vimm: %s" % self.material.name)
                self.render(1)
        return
    
    def save_as(self,*args):
        fname = None
        d = wx.FileDialog(self,"Save","","","*",wx.SAVE)
        if d.ShowModal() == wx.ID_OK:
            fname = d.GetFilename()
            dir = d.GetDirectory()
            fullfilename = os.path.join(dir,fname)
        d.Destroy()
        if fname:
            vimmLib.save_file(fullfilename, self.material, "GUI")
        return
    
    def render_povray(self,*args):
        povOutput = None
        d = wx.FileDialog(self,"Save","","","*",wx.SAVE)
        if d.ShowModal() == wx.ID_OK:
            povOutput = d.GetFilename()
            dir = d.GetDirectory()
            fullfilename = os.path.join(dir,povOutput)
        d.Destroy()
        if fullfilename:
            # Still to do:
            # - Background color
            # - Is the camera position reversed?
            from POVRay import Scene
            if self.material:
                shapes = SimpleRenderer(self.material.geo,self.renderOptions)
                shapes = shapes.povray()
                r,g,b = self.renderOptions.get_fg_color()
                scene = Scene(self.material.name)
                #scene.set_bgcolor(r/255.,g/255.,b/255.)
                x,y,z = self.canvas.camera.get_position()
                lx,ly,lz = self.canvas.camera.get_look_at()
                scene.set_camera((-x,y,-z),
                                 (lx,ly,lz))
                for shape in shapes:
                    scene.add(shape)
                scene.write_pov(outputFile = fullfilename)
                scene.render(outputFile = fullfilename)
                scene.display()
        return
    
    def quit(self,*args):
        self.Close(True)
        
    def Close(self, force):
        wx.Frame.Close(self, force)
        
    def dump(self,*args): self.canvas.dump()


def actor():
    return Actor("matterbuilder")
