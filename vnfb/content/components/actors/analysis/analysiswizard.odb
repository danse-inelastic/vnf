#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

from luban.content import load, select
import luban.content as lc

from luban.content.Document import Document
from luban.content.Link import Link

from luban.components.Actor import Actor as base

class Actor(base):

    class Inventory(base.Inventory):
        import pyre.inventory
        analysisId = pyre.inventory.str('analysisId', default = '')
        dynamicsId = pyre.inventory.str('dynamicsId', default = '')
        analysisType = pyre.inventory.str('analysisType', default='')
        short_description = pyre.inventory.str('short_description', default = '' )
        short_description.meta['tip'] = 'A short description'
        creator = pyre.inventory.str('creator', default='')
        description = pyre.inventory.str('description', default='')
#        inputFileContents = pyre.inventory.str('inputFileContents', default='')
#        runtype = pyre.inventory.str('runtype', default='')

    def default(self, director):
        wizard = Document(id='analysiswizard', title='Analysis')
        doc = self.selectAnalysisType(director)
        wizard.add(doc)
        return select(id='main-display-area').replaceContent(wizard)
    
    def selectAnalysisType(self, director):
        return director.retrieveVisual('analysis/newAnalysisType', director = director)
    
    def selectDynamics(self, director):
        doc = lc.document(id='dynamics-selector-doc')
        doc.paragraph(
            text=['Please select one simulation from the following table:',
            ]
            )
        container = lc.document(id='dynamics-selector-container')
        doc.add(container)
        container.oncreate = [
            select(element=container).append(
              load(actor='analysis/selectdynamics', routine='createListView')
              ),
            ]
        # cancel
#        c = lc.link(label='cancel', Class='float-right'); doc.add(c)
#        c.onclick = select(id=self.matter_view_id).replaceBy(
#            load(actor='scatterer/editor', routine='createMatterView',
#                 id = self.id)
#            )
        # select button
        b = lc.button(label='select'); doc.add(b)
        b.onclick = load(
                actor=self.name, routine='analysisSettings',
                dynamicsId=select(id='dynamics-table').table(
                    'getIdentifiersForSelectedRow', colname='selectone'),
                analysisType = self.inventory.analysisType
                )
        return doc

    def analysisSettings(self, director):
        doc         = lc.document(title = "")
        splitter    = doc.splitter(orientation="vertical")
        sA          = splitter.section()
        #sA.add(viewIndicator(director))
        sA.add(load(actor='orm/'+self.inventory.analysisType, routine='edit', 
                    id=self.inventory.dynamicsType))
        sB          = splitter.section()
        docSub      = lc.document(title = "")
        b = lc.button(label='select'); docSub.add(b)
        b.onclick = load(
                actor=self.name, routine='configureSubmissionQueue'
                )
        return select(id='main-display-area').replaceContent(doc)

    def startFormShowError(self, director, errors=None):
        from luban.content import select
        return [
            select(id='%s-input' % name).showError(text)
            for name, text in errors.iteritems()
            ]
    
    def __init__(self, name='analysis/analysiswizard'):
        super(Actor, self).__init__(name)
        return
    
    def configureSubmissionQueue(self, director):
        return director.redirect(actor = 'job', routine = 'create', 
                computation_type = 'material_simulations.GulpSettingsHolder.GulpSettingsHolder', 
                computation_id = self.inventory.simulationId)

import os



def actor(): return Actor()


# version
__id__ = "$Id$"

# End of file 

