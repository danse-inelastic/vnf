#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

import luban.content as lc
from luban.content import load, select
from luban.components.AuthorizedActor import AuthorizedActor as base

class Actor(base):

    class Inventory(base.Inventory):
        import pyre.inventory
        id = pyre.inventory.str(name='id')

    def createView(self, director):
        doc = lc.document(Class='container')
        domaccess = self._domaccess(director)
        db = domaccess.db
        c = self._getComputationRecord(director)
        # i don't think this is necessary for an analysis
#        if not domaccess.isComputationConfigured(c):
#            return self.createConfigurationView(director)
        
        # where am I indicator
        path = self._pathToMe(director)
        view_indicator = director.retrieveVisual('view-indicator', path=path)
        doc.add(view_indicator)

        # has a job?
        jobs = c.getJobs(db)
        hasjob = bool(jobs)
        # job submitted?
        if hasjob:
            job = jobs[0]
            jobjustcreated = job.state == 'created'

        # settings
        settingsdoc = doc.document(title = 'Settings', collapsable = True)
        settingsdoc.oncreate = select(element=settingsdoc).append(
            load(
              actor='orm/analysis/csfcalc', routine='displayProperties',
              id = c.id, editlink=not hasjob,
            ))
        
        if hasjob:
            if jobjustcreated:
                editjob = load(
                    actor='job', routine='edit',
                    id = job.id
                    )
                l = lc.link(
                    label='You have not submitted the job for this computation. Submit?',
                    onclick=editjob,
                    )
                doc.add(l)
            else:
                # results
                resultsdoc = doc.document(title = 'Results', collapsable=True, collapsed=True)
                resultsdoc.id = 'csfcalc-view-results-doc'
                resultsdoc.paragraph(text=['loading results. please wait...'])
                resultsdoc.onexpand = select(element=resultsdoc).replaceContent(
                    load(actor=self.name, routine='createResultsDoc',
                         id=self.inventory.id)
                    )
        else:
            createjob = load(
                actor='job', routine='create',
                computation_type = 'analysis.CsfCalc.CsfCalc',
                computation_id = self.inventory.id
                )
            l = lc.link(
                label='You have not created a job for this computation. Create?',
                onclick=createjob,
                )
            doc.add(l)
        return doc

    def createResultsDoc(self, director):
        record = self._getComputationRecord(director)
        return director.retrieveVisual(
            'computation-results',
            computation=record, actor=self.name, director=director)

    def createConfigurationView(self, director):
        c = self._getComputation(director)
        drawer = director.painter.paintObj.drawers.getDrawer(c.__class__)
        computation_doc = drawer(c)
        form = computation_doc.getDescendentByName('properties-form')
        form.onsubmit.params.update({
            'poststoring_routine': 'createJob',
            })
        # the container
        doc = lc.document()
        # path
        path = self._pathToMe(director)
        view_indicator = director.retrieveVisual('view-indicator', path=path)
        doc.add(view_indicator)
        # 
        doc.add(computation_doc)
        return doc

    def _pathToMe(self, director):
        id = self.inventory.id
        if not id:
            raise RuntimeError
        domaccess = self._domaccess(director)
        #label = domaccess.getComputationLabel('csfcalc', id)
        computation = self._getComputation(director)
        return [
            ('Analysis',
             lc.load(actor='analysis')),
            ('Coherent Scattering Function',
             lc.load(actor='analysis', filter_expr="type=='csfcalc'")),
            #('%s %s' % (computation.__class__.__name__, label),
            ('%s' % (computation.__class__.__name__),
             lc.select(id='main-display-area').replaceContent(
            lc.load(actor='analysis/csfcalc',
                    routine = 'createView', id=id)
            )),
            ]

    def _getComputation(self, director):
        record = self._getComputationRecord(director)
        return director.clerk.orm.record2object(record)
#        domaccess = self._domaccess(director)
#        id = self.inventory.id
#        return domaccess.getComputation('csfcalc', id)

    def _getComputationRecord(self, director):
        domaccess = self._domaccess(director)
        id = self.inventory.id
        return domaccess.getAnalysisRecord('analysis.CsfCalc.CsfCalc', id)
        #return domaccess.getAnalysisRecord(id)

    def _domaccess(self, director):
        return director.retrieveDOMAccessor('analysis')
        #return director.retrieveDOMAccessor('computation')

    def __init__(self, name='analysis/csfcalc'):
        super(Actor, self).__init__(name)
        return

def actor(): return Actor()


# version
__id__ = "$Id$"

# End of file 

