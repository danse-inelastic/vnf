#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2010  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from luban.content import load, select, alert
import luban.content as lc



# common actions
setpagetitle = select(id='').setAttr(title='VNF: ARCS instrument')


from vnfb.components.visuals import set_contextual_help
sethelppage = set_contextual_help(
    page='UserGuide-instruments-ARCS-apps', label='about ARCS apps')



from luban.components.AuthorizedActor import AuthorizedActor as base


class Actor(base):


    class Inventory(base.Inventory):

        import pyre.inventory

        id = pyre.inventory.str('id')
        description = pyre.inventory.str('description')
        
        app = pyre.inventory.str('app')


    def showARCSMainFrame(self, director):
        frame = director.retrieveVisual('instruments/arcs/main-frame')
        # frame.dockable = True
        # frame.closable = True

        frame.add(director.retrieveVisual('instruments/arcs/start-panel'))
        #
        logout = load(actor='logout')
        link = lc.link(label='logout', onclick=logout)
        addlogout = select(id='header-userinfo').append(link)
        
        return [
            # load(actor='greeter', routine='greet'),
            addlogout,
            # select(id='body-frame').append(frame),
            select(id='body-frame').replaceContent(frame),
            ]


    def reloadStartPanel(self, director):
        visual = director.retrieveVisual('instruments/arcs/start-panel')
        return select(id='arcs-main-frame').replaceContent(visual)


    def loadApp(self, director):
        app = self.inventory.app
        visual = 'instruments/arcs/%s-start-panel' % app
        visual = director.retrieveVisual(visual)
        return select(id='arcs-main-frame').replaceContent(visual)


    def __init__(self, name='instruments/arcs'):
        super(Actor, self).__init__(name)
        return



def actor(): return Actor()


# version
__id__ = "$Id$"

# End of file 

