#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from luban.content import load, select, createCredential
import luban.content as lc

from luban.components.Actor import Actor as base


class Actor(base):


    class Inventory(base.Inventory):

        import pyre.inventory

        username = pyre.inventory.str('username')
        password = pyre.inventory.str('password')


    def default(self, director):
        visual = self.createLoginFrameContent(director)
        
        frame = lc.frame(title='Virtual neutron facility: please login')
        frame.add(visual)

        dock = lc.dock(id='dock', hidden=True)
        frame.add(dock)
        
        return frame


    def createLoginFrameContent(self, director):
        visual = director.retrieveVisual('login-frame')

        introcontainer = visual.find(id='front-page-vnf-intro-container')
        intro = lc.htmldocument(); introcontainer.add(intro)
        intro.text = [
            #'The Virtual Neutron Facility (VNF) provides online computation tools for simulating neutron scattering experiments.',
            '<p>The Virtual Neutron Facility (VNF) is a web service that integrates scientific software packages for material simulations and Monte-Carlo simulations of neutron scattering. VNF is an online tool that allows users to perform end-to-end, full simulations of neutron scattering experiments. It can be useful to gain insights into material properties by comparing simulation results to experimental results.</p>',
            '<p>The VNF is a product of the <a href="http://danse.us>DANSE</a> project. The DANSE project aims to build a software system that enables new and more sophisticated science to be performed with neutron scattering experiments, makes the data analysis easier for all scientists, and provides a robust software infrastructure that can be maintained in the future.</p>'
            ]

        formcontainer = visual.find(id='login-form-container')
        form = director.retrieveVisual('login-form')
        formcontainer.add(form)
        
        return visual


    def verify(self, director):
        # pass info to sentry
        sentry = director.sentry
        sentry.ticket = ''
        sentry.username = self.inventory.username
        sentry.passwd = self.inventory.password

        errors = {}
        
        username = self.inventory.username
        if not username:
            errors['username'] = 'Username cannot be empty'
        elif not director.userIsActive():
            errors['username'] = 'Username does not exist. Please register first.'
            
        password = self.inventory.password
        if not password:
            errors['password'] = 'Password cannot be empty'

        if director.userIsActive() and password and not director.userIsAuthorized():
            errors['password'] = "Invalid password"
        
        if errors:
            return self.formError(director, errors=errors)

        self._debug.log('redirect to greeter.greet')
        return [
            createCredential(
                username=director.sentry.username,
                ticket=director.sentry.ticket,
                ),
            load(actor='greeter', routine='greet'),
            ]


    def formError(self, director, errors=None):
        from luban.content import select
        return [
            select(id='login-%s-input' % name).formfield('showError', message=text)
            for name, text in errors.iteritems()
            ]
    
    
    def __init__(self, name='login'):
        super(Actor, self).__init__(name)
        return


def actor(): return Actor()


# version
__id__ = "$Id$"

# End of file 

