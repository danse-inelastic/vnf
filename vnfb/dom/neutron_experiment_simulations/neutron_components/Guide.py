# -*- Python -*-
# auto-generated by mcstas-component-to-dom
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                   Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2010  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
from AbstractNeutronComponent import AbstractNeutronComponent as base
class Guide(base):
    abstract = False
    w1 = 0
    h1 = 0
    w2 = 0
    h2 = 0
    l = 0
    R0 = 0.98999999999999999
    Qc = 0.021899999999999999
    alpha = 6.0700000000000003
    m = 2.0
    W = 0.0030000000000000001
    reflect = ''
    def customizeLubanObjectDrawer(self, drawer):
        drawer.mold.sequence = ['componentname', 'short_description', 'referencename', 'position', 'orientation', 'w1', 'h1', 'w2', 'h2', 'l', 'R0', 'Qc', 'alpha', 'm', 'W', 'reflect']
InvBase=base.Inventory
class Inventory(InvBase):
    w1 = InvBase.d.float(name='w1', default=0)
    w1.help = '(m)    Width at the guide entry'
    h1 = InvBase.d.float(name='h1', default=0)
    h1.help = '(m)    Height at the guide entry'
    w2 = InvBase.d.float(name='w2', default=0)
    w2.help = '(m)    Width at the guide exit'
    h2 = InvBase.d.float(name='h2', default=0)
    h2.help = '(m)    Height at the guide exit'
    l = InvBase.d.float(name='l', default=0)
    l.help = '(m)    length of guide'
    R0 = InvBase.d.float(name='R0', default=0.98999999999999999)
    R0.help = '(1)    Low-angle reflectivity'
    Qc = InvBase.d.float(name='Qc', default=0.021899999999999999)
    Qc.help = '(AA-1) Critical scattering vector'
    alpha = InvBase.d.float(name='alpha', default=6.0700000000000003)
    alpha.help = '(AA)   Slope of reflectivity'
    m = InvBase.d.float(name='m', default=2.0)
    m.help = '(1)    m-value of material. Zero means completely absorbing.'
    W = InvBase.d.float(name='W', default=0.0030000000000000001)
    W.help = '(AA-1) Width of supermirror cut-off'
    reflect = InvBase.d.str(name='reflect', default='')
    reflect.help = '(str)  Reflectivity file name. Format [q(Angs-1) R(0-1)]'
    dbtablename = 'guides'
Guide.Inventory = Inventory
del Inventory
from _ import o2t, NeutronComponentTableBase
GuideTable = o2t(Guide, {'subclassFrom': NeutronComponentTableBase})
# version
__id__ = "$Id$"

# End of file 
