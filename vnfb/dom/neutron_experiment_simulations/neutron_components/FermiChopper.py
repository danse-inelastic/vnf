# -*- Python -*-
# auto-generated by mcstas-component-to-dom
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                   Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2010  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
from AbstractNeutronComponent import AbstractNeutronComponent as base
class FermiChopper(base):

    abstract = False

    len = 0.10000000000000001
    w = 0.059999999999999998
    nu = 600.0
    delta = 0.0
    tc = 0.0
    ymin = -0.029999999999999999
    ymax = 0.029999999999999999
    nchan = 32.0
    bw = 0.00035
    blader = 0.58009999999999995
    def customizeLubanObjectDrawer(self, drawer):
        drawer.mold.sequence = ['componentname', 'short_description', 'referencename', 'position', 'orientation', 'len', 'w', 'nu', 'delta', 'tc', 'ymin', 'ymax', 'nchan', 'bw', 'blader']
InvBase=base.Inventory
class Inventory(InvBase):
    len = InvBase.d.float(name='len', default=0.10000000000000001)
    len.help = 'slit package length (m) '
    w = InvBase.d.float(name='w', default=0.059999999999999998)
    w.help = 'slit package width (m) '
    nu = InvBase.d.float(name='nu', default=600.0)
    nu.help = 'frequency (Hz) '
    delta = InvBase.d.float(name='delta', default=0.0)
    delta.help = 'time from edge of chopper to center Phase angle (sec) '
    tc = InvBase.d.float(name='tc', default=0.0)
    tc.help = 'time when desired neutron is at the center of the chopper (sec) '
    ymin = InvBase.d.float(name='ymin', default=-0.029999999999999999)
    ymin.help = 'Lower y bound (m) '
    ymax = InvBase.d.float(name='ymax', default=0.029999999999999999)
    ymax.help = 'Upper y bound (m) '
    nchan = InvBase.d.float(name='nchan', default=32.0)
    nchan.help = 'number of channels in chopper (1) '
    bw = InvBase.d.float(name='bw', default=0.00035)
    bw.help = 'blade width (m) '
    blader = InvBase.d.float(name='blader', default=0.58009999999999995)
    blader.help = 'blade radius (m) '
    dbtablename = 'fermichoppers'
FermiChopper.Inventory = Inventory
del Inventory
from _ import o2t, NeutronComponentTableBase
FermiChopperTable = o2t(FermiChopper, {'subclassFrom': NeutronComponentTableBase})
# version
__id__ = "$Id$"

# End of file 
