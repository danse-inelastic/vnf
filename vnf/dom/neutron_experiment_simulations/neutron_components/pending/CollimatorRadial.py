# -*- Python -*-
# auto-generated by mcstas-component-to-dom
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                   Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2010  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
from AbstractNeutronComponent import AbstractNeutronComponent as base
class CollimatorRadial(base):
    abstract = False
    w1 = 0.014999999999999999
    h1 = 0.29999999999999999
    w2 = 0.014999999999999999
    h2 = 0.29999999999999999
    len = 0.34999999999999998
    divergence = 40.0
    transmission = 1.0
    theta_min = 5.0
    theta_max = 165.0
    nchan = 128.0
    radius = 0.0
    nblades = 0.0
    roc = 0.0
    verbose = 0.0
    def customizeLubanObjectDrawer(self, drawer):
        drawer.mold.sequence = ['componentname', 'short_description', 'referencename', 'position', 'orientation', 'w1', 'h1', 'w2', 'h2', 'len', 'divergence', 'transmission', 'theta_min', 'theta_max', 'nchan', 'radius', 'nblades', 'roc', 'verbose']
InvBase=base.Inventory
class Inventory(InvBase):
    w1 = InvBase.d.float(name='w1', default=0.014999999999999999)
    w1.help = '(m)          Input  window width'
    h1 = InvBase.d.float(name='h1', default=0.29999999999999999)
    h1.help = '(m)          Input  window height'
    w2 = InvBase.d.float(name='w2', default=0.014999999999999999)
    w2.help = '(m)          Output window width'
    h2 = InvBase.d.float(name='h2', default=0.29999999999999999)
    h2.help = '(m)          Output window height'
    len = InvBase.d.float(name='len', default=0.34999999999999998)
    len.help = '(m)          Length/Distance between slits'
    divergence = InvBase.d.float(name='divergence', default=40.0)
    divergence.help = '(min of arc) Divergence angle. May also be specified with the'
    transmission = InvBase.d.float(name='transmission', default=1.0)
    transmission.help = '(1)         Transmission of Soller (0<=t<=1)'
    theta_min = InvBase.d.float(name='theta_min', default=5.0)
    theta_min.help = '(deg)        Minimum Theta angle for the radial setting'
    theta_max = InvBase.d.float(name='theta_max', default=165.0)
    theta_max.help = '(deg)        Maximum Theta angle for the radial setting'
    nchan = InvBase.d.float(name='nchan', default=128.0)
    nchan.help = '(1)          Number of channels in the theta range'
    radius = InvBase.d.float(name='radius', default=0.0)
    radius.help = '(m)          Radius of the collimator (to entry window)'
    nblades = InvBase.d.float(name='nblades', default=0.0)
    nblades.help = '(1)         Number of blades composing each Soller. Overrides'
    roc = InvBase.d.float(name='roc', default=0.0)
    roc.help = '(1)         Enable oscillation of collimator with an amplitude'
    verbose = InvBase.d.float(name='verbose', default=0.0)
    verbose.help = '(0/1)       Gives additional information'
    dbtablename = 'collimatorradials'
CollimatorRadial.Inventory = Inventory
del Inventory
from _ import o2t, NeutronComponentTableBase
CollimatorRadialTable = o2t(CollimatorRadial, {'subclassFrom': NeutronComponentTableBase})
# version
__id__ = "$Id$"

# End of file 
