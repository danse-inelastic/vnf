#!/usr/bin/env python


header = '''# -*- Python -*-
# auto-generated by mcstas-component-to-dom
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                   Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2010  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
'''

footer = '''
# version
__id__ = "$Id$"

# End of file 
'''



def component2dom(type, category, 
                  base="AbstractNeutronComponent", 
                  tablebase='NeutronComponentTableBase', 
                  name=None,
                  skip_properties = []
                  ):
    from mcstas2 import componentinfo
    info = componentinfo(category, type)
    ps = info.input_parameters
    
    if name is None: name = type
    
    objdef = []
    objdef.append('from %s import %s as base' % (base, base))
    objdef.append('class %s(base):' % name)
    skip = ['name'] + skip_properties
    for p in ps:
        if p.name in skip: continue
        objdef.append('    %s = %r' % (p.name, p.default))
        continue
    
    objdef.append('    def customizeLubanObjectDrawer(self, drawer):')
    names = [p.name for p in ps if p.name not in skip]
    # add the props from base
    names = [
        'componentname', 'short_description', 'referencename',
        'position', 'orientation',
        ] + names
    objdef.append('        drawer.mold.sequence = %r' % (names,) )

    invdef = []
    invdef.append('InvBase=base.Inventory')
    invdef.append('class Inventory(InvBase):')
    for p in ps:
        if p.name in skip: continue
        valuetype = _converttype(p.type)
        invdef.append('    %s = InvBase.d.%s(name=%r, default=%r)' % (
                p.name, valuetype, p.name, p.default))
        invdef.append('    %s.help = %r' % (p.name, p.description))
        continue
    dbtablename = name.lower() + 's'
    invdef.append('    dbtablename = %r' % dbtablename)

    invdef.append('%s.Inventory = Inventory' % name)
    invdef.append('del Inventory')

    tbldef = []
    tbldef.append('from _ import o2t, %s' % tablebase)
    tbldef.append("%sTable = o2t(%s, {'subclassFrom': %s})" % (name, name, tablebase))

    body = objdef + invdef + tbldef
    content = header + '\n'.join(body) + footer
    filename = '%s.py' % name
    return filename, content


def _converttype(t):
    t = t.strip()
    if t == 'char *': return 'str'
    if t == 'double': return 'float'
    if t == 'int': return 'int'
    raise NotImplementedError


from pyre.applications.Script import Script
class App(Script):

    class Inventory(Script.Inventory):

        import pyre.inventory
        type = pyre.inventory.str('type')
        category = pyre.inventory.str('category')
        base = pyre.inventory.str('base', default='AbstractNeutronComponent')
        tablebase = pyre.inventory.str('tablebase', default='NeutronComponentTableBase')
        newname = pyre.inventory.str('newname')
        skip_properties = pyre.inventory.list('skip-props')


    def main(self):
        type = self.inventory.type
        category = self.inventory.category
        base = self.inventory.base
        tablebase = self.inventory.tablebase
        newname = self.inventory.newname
        skip_properties = self.inventory.skip_properties

        filename, text = component2dom(
            type=type, category=category, 
            base=base, tablebase= tablebase,
            name=newname or None,
            skip_properties = skip_properties
            )
    
        open(filename, 'w').write(text)
        return


def main():
    app = App('mcstas-component-to-dom')
    app.run()
    return


if __name__ == '__main__': main()
