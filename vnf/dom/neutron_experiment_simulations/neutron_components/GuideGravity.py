# -*- Python -*-
# auto-generated by mcstas-component-to-dom
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                   Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2010  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
from AbstractNeutronComponent import AbstractNeutronComponent as base
class GuideGravity(base):
    abstract = False
    reflect = ''
    w1 = 0
    h1 = 0
    w2 = 0.0
    h2 = 0.0
    l = 0
    R0 = 0.98999999999999999
    Qc = 0.021899999999999999
    alpha = 6.0700000000000003
    m = 1.0
    W = 0.0030000000000000001
    k = 1.0
    d = 0.00050000000000000001
    mleft = -1.0
    mright = -1.0
    mtop = -1.0
    mbottom = -1.0
    kh = 1.0
    G = 0.0
    wavy = 0.0
    wavy_z = 0.0
    wavy_tb = 0.0
    wavy_lr = 0.0
    chamfers = 0.0
    chamfers_z = 0.0
    chamfers_lr = 0.0
    chamfers_tb = 0.0
    nelements = 1.0
    nu = 0.0
    phase = 0.0
    def customizeLubanObjectDrawer(self, drawer):
        drawer.mold.sequence = ['componentname', 'short_description', 'referencename', 'position', 'orientation', 'reflect', 'w1', 'h1', 'w2', 'h2', 'l', 'R0', 'Qc', 'alpha', 'm', 'W', 'k', 'd', 'mleft', 'mright', 'mtop', 'mbottom', 'kh', 'G', 'wavy', 'wavy_z', 'wavy_tb', 'wavy_lr', 'chamfers', 'chamfers_z', 'chamfers_lr', 'chamfers_tb', 'nelements', 'nu', 'phase']
InvBase=base.Inventory
class Inventory(InvBase):
    reflect = InvBase.d.str(name='reflect', default='')
    reflect.help = '(str) Reflectivity file name. Format [q(Angs-1) R(0-1)]'
    w1 = InvBase.d.float(name='w1', default=0)
    w1.help = '(m)    Width at the guide entry'
    h1 = InvBase.d.float(name='h1', default=0)
    h1.help = '(m)    Height at the guide entry'
    w2 = InvBase.d.float(name='w2', default=0.0)
    w2.help = '(m)    Width at the guide exit. If 0, use w1.'
    h2 = InvBase.d.float(name='h2', default=0.0)
    h2.help = '(m)    Height at the guide exit. If 0, use h1.'
    l = InvBase.d.float(name='l', default=0)
    l.help = '(m)    length of guide'
    R0 = InvBase.d.float(name='R0', default=0.98999999999999999)
    R0.help = '(1)    Low-angle reflectivity'
    Qc = InvBase.d.float(name='Qc', default=0.021899999999999999)
    Qc.help = '(AA-1) Critical scattering vector'
    alpha = InvBase.d.float(name='alpha', default=6.0700000000000003)
    alpha.help = '(AA)   Slope of reflectivity'
    m = InvBase.d.float(name='m', default=1.0)
    m.help = '(1)    m-value of material. Zero means completely absorbing.'
    W = InvBase.d.float(name='W', default=0.0030000000000000001)
    W.help = '(AA-1) Width of supermirror cut-off'
    k = InvBase.d.float(name='k', default=1.0)
    k.help = '(1)    Number of vertical channels in the guide (>= 1)'
    d = InvBase.d.float(name='d', default=0.00050000000000000001)
    d.help = '(m)    Thickness of subdividing walls'
    mleft = InvBase.d.float(name='mleft', default=-1.0)
    mleft.help = '(1)    m-value of material for left.   vert. mirror'
    mright = InvBase.d.float(name='mright', default=-1.0)
    mright.help = '(1)    m-value of material for right.  vert. mirror'
    mtop = InvBase.d.float(name='mtop', default=-1.0)
    mtop.help = '(1)    m-value of material for top.    horz. mirror'
    mbottom = InvBase.d.float(name='mbottom', default=-1.0)
    mbottom.help = '(1)    m-value of material for bottom. horz. mirror'
    kh = InvBase.d.float(name='kh', default=1.0)
    kh.help = '(1)    Number of horizontal channels in the guide (>= 1).'
    G = InvBase.d.float(name='G', default=0.0)
    G.help = '(m/s2) Gravitation norm. 0 value disables G effects.'
    wavy = InvBase.d.float(name='wavy', default=0.0)
    wavy.help = '(deg)  Global guide waviness'
    wavy_z = InvBase.d.float(name='wavy_z', default=0.0)
    wavy_z.help = '(deg)  Partial waviness along propagation axis'
    wavy_tb = InvBase.d.float(name='wavy_tb', default=0.0)
    wavy_tb.help = '(deg)  Partial waviness in transverse direction for top/bottom mirrors'
    wavy_lr = InvBase.d.float(name='wavy_lr', default=0.0)
    wavy_lr.help = '(deg)  Partial waviness in transverse direction for left/right mirrors'
    chamfers = InvBase.d.float(name='chamfers', default=0.0)
    chamfers.help = '(m)    Global chamfers specifications (in/out/mirror sides).'
    chamfers_z = InvBase.d.float(name='chamfers_z', default=0.0)
    chamfers_z.help = '(m) Input and output chamfers'
    chamfers_lr = InvBase.d.float(name='chamfers_lr', default=0.0)
    chamfers_lr.help = '(m) Chamfers on left/right mirror sides'
    chamfers_tb = InvBase.d.float(name='chamfers_tb', default=0.0)
    chamfers_tb.help = '(m) Chamfers on top/bottom mirror sides'
    nelements = InvBase.d.float(name='nelements', default=1.0)
    nelements.help = '(1) Number of sections in the guide (length l/nelements).'
    nu = InvBase.d.float(name='nu', default=0.0)
    nu.help = '(Hz) Rotation frequency (round/s) for Fermi Chopper approximation'
    phase = InvBase.d.float(name='phase', default=0.0)
    phase.help = '(deg) Phase shift for the Fermi Chopper approximation'
    dbtablename = 'guidegravitys'
GuideGravity.Inventory = Inventory
del Inventory
from _ import o2t, NeutronComponentTableBase
GuideGravityTable = o2t(GuideGravity, {'subclassFrom': NeutronComponentTableBase})
# version
__id__ = "$Id$"

# End of file 
