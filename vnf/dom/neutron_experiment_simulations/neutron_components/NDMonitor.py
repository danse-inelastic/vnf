# -*- Python -*-
# auto-generated by mcstas-component-to-dom
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                   Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2010  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
from MonitorBase import MonitorBase as base
class NDMonitor(base):

    abstract = False
    options = ''
    user1 = 0
    user2 = 0
    username1 = ''
    username2 = ''
    x_width = 0.10000000000000001
    y_height = 0.10000000000000001
    zthick = 0.0
    x_min = 0.0
    x_max = 0.0
    y_min = 0.0
    y_max = 0.0
    zmin = 0.0
    zmax = 0.0
    bins = 0.0
    min = -1000.0    #-1e+40
    max = 1000.0    #1e+40
    
    def customizeLubanObjectDrawer(self, drawer):
        drawer.mold.sequence = ['componentname', 'short_description', 'referencename', 'position', 'orientation', 'options', 'user1', 'user2', 'username1', 'username2', 'x_width', 'y_height', 'zthick', 'x_min', 'x_max', 'y_min', 'y_max', 'zmin', 'zmax', 'bins', 'min', 'max']

InvBase=base.Inventory
class Inventory(InvBase):
    options = InvBase.d.str(name='options', default='')
    options.help = '[str]  String that specifies the configuration of the monitor'
    user1 = InvBase.d.float(name='user1', default=0)
    user1.help = '[variable] Variable assigned to User1'
    user2 = InvBase.d.float(name='user2', default=0)
    user2.help = '[variable] Variable assigned to User2'
    username1 = InvBase.d.str(name='username1', default='')
    username1.help = '[str] Name assigned to User1'
    username2 = InvBase.d.str(name='username2', default='')
    username2.help = '[str] Name assigned to User2'
    x_width = InvBase.d.float(name='x_width', default=0.10000000000000001)
    x_width.help = '[m]  Width/diameter of detector (x). Default is 10 cm.'
    y_height = InvBase.d.float(name='y_height', default=0.10000000000000001)
    y_height.help = '[m]  Height of detector (y). Default is 10 cm.'
    zthick = InvBase.d.float(name='zthick', default=0.0)
    zthick.help = '[m]  Thichness of detector (z).'
    x_min = InvBase.d.float(name='x_min', default=0.0)
    x_min.help = '[m]    Lower x bound of opening'
    x_max = InvBase.d.float(name='x_max', default=0.0)
    x_max.help = '[m]    Upper x bound of opening'
    y_min = InvBase.d.float(name='y_min', default=0.0)
    y_min.help = '[m]    Lower y bound of opening'
    y_max = InvBase.d.float(name='y_max', default=0.0)
    y_max.help = '[m]    Upper y bound of opening'
    zmin = InvBase.d.float(name='zmin', default=0.0)
    zmin.help = '[m]    Lower z bound of opening'
    zmax = InvBase.d.float(name='zmax', default=0.0)
    zmax.help = '[m]    Upper z bound of opening'
    bins = InvBase.d.float(name='bins', default=0.0)
    bins.help = '[1]    Number of bins to force for all variables.'
    min = InvBase.d.float(name='min', default=-1000.0)  #-1e+40)
    min.help = '[u]    Minimum range value to force for all variables'
    max = InvBase.d.float(name='max', default=1000.0)  #1e+40)
    max.help = '[u]    Maximum range value to force for all variables'
    dbtablename = 'ndmonitors'
NDMonitor.Inventory = Inventory
del Inventory
from _ import o2t, MonitorTableBase
NDMonitorTable = o2t(NDMonitor, {'subclassFrom': MonitorTableBase})
# version
__id__ = "$Id$"

# End of file 
