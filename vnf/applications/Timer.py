#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                        (C) 2008  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


"""
A script that runs forever and periodically launch the specified
command.

Please look for output files in the directory specified 
by the property "logdir":

 - <sig>.info:  information about the command and the interval
 - <sig>.log:   log file

<sig> is a signature generated by hashing the interval
and the command.

"""


from pyre.applications.Script import Script as base

from pyre.units.time import second


class Timer(base):


    class Inventory(base.Inventory):

        import pyre.inventory

        interval = pyre.inventory.dimensional("interval", default=1.0*second)
        command = pyre.inventory.str('command')
        logdir = pyre.inventory.str('logdir', default='../log')


    def main(self, *args, **kwds):
        import threading, time
        
        self.log("creating event and thread")
        ev = threading.Event()
        t1 = threading.Thread(target=self._repeat, args=(ev, self.interval, self._run))
        
        self.log("starting thread")
        t1.start()
        
        try:
            while 1:
                time.sleep(self.interval*100)
                continue
        except KeyboardInterrupt :
            pass
        
        self.log("setting event to signal the thread to finish")
        ev.set()
        
        self.log( "waiting for thread to finish")
        t1.join()
        
        self.log( "quit" )
        return

    
    def log(self, msg):
        self.logstream.write(msg)
        self.logstream.write('\n')
        self.logstream.flush()
        return
        

    def _repeat(self, event, every, action):
        while True:
            event.wait(every)
            if event.isSet():
                break
            action()
        return
    

    def _run(self):
        command = self.command
        self.log('going to execute command %s' % command)
        os.system(command)
        return


    def __init__(self, name=None):
        if name is None:
            name = "timer"

        super(Timer, self).__init__(name)
        return


    def _configure(self):
        super(Timer, self)._configure()
        self.command = self.inventory.command
        self.interval = int(self.inventory.interval / second)
        
        logdir = self.inventory.logdir
        sig = 'timer-%s, %s' % (self.command, self.interval)
        import hashlib
        sig = hashlib.md5(sig).hexdigest()
        open(os.path.join(logdir, '%s.info' % sig), 'w').write(
            'command: %s\ninterval: %s\n' % (
                self.command, self.interval)
            )
        
        self.logstream = open(os.path.join(logdir, '%s.log' % sig), 'a')
        return


    def _init(self):
        super(Timer, self)._init()
        return
    

import os


# version
__id__ = "$Id$"

# End of file 
