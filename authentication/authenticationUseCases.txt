The following two use cases are needed for vnf to interact with sns resources

1. Access experimental data:

This would probably involve connecting to either a remote sns server as a generic 'vnf user' or directly to a user's account in order to access all or any of their files:

     #connect to sns server
     user = genericVnfUser or specificUser
     sns = vnf.remote_service('https://sns.ornl.gov/service', user)
     
     # get files
     reduction = SnsData(infile='/snsdata/RefL/bigfile.nxs')

     #reduction could happen on either remote clusters or a user's cluster or the danse cluser at caltech. 	#preference might be decided by accounts, famiarity with cluster, available software, etc.  Jiao, you probably know this better than me so I'll just sketch the rest...

     #set compute cluster   
     reduction.setServer('SNS')  

     #run computation
     reduction.run()

     # send files
     reduction.export('/snsdata/RefL/bigfile.hf5')

2. Run simulations on sns server

     # it might be nice to run some of the material or instrument simulations on the arcs cluster servers.  Ideally these should be no harder to integrate than any other compute cluster.  In such a case the binaries (vasp, gulp, etc.) would have to be installed remotely and a job submission procedure would have to be devised...
     bigComputation.setServer('http://snsComputeNode')
     bigComputation.elaborateAuthentication()
     bigComputation.submitJobToQueue()
     #results would have to be retrieved through either a small remote server or directly from the queueing system
     snsServer.sendResultsOrProgress()



3. Run vnf from a browser on sns compters:

=> be able to run java applets / web start applications on browser of choice (support IE and Firefox as minimum)




