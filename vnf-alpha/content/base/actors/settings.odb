#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                             Michael A.G. Aivazis
#                               Orthologue, Ltd.
#                      (C) 2004-2008  All Rights Reserved
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

from vnf.components.Actor import Actor as base, action, action_link


class Actor(base):


    class Inventory(base.Inventory):

        import pyre.inventory

        firstname = pyre.inventory.str(name='firstname')
        lastname = pyre.inventory.str(name='lastname')
        email = pyre.inventory.str(name="email")
        oldpassword = pyre.inventory.str(name="oldpassword")
        password = pyre.inventory.str(name="password")
        confirmation = pyre.inventory.str(name="confirmation")
        organization = pyre.inventory.str(name='organization')


    def default(self, director):
        return self.interview(director)


    def interview(self, director, errors=None):
        try:
            page = self._retrievePage(director)
        except AuthenticationError, err:
            return err.page
        
        main = page._body._content._main

        # populate the main column
        document = main.document( title = 'Settings' )
        document.description = ('')

        form = document.form(
            name='settings', legend='', action=director.cgihome)
        
        form.hidden(name='actor', value='settings')
        form.hidden(name='routine', value='validateState')
        form.hidden(name='sentry.username', value=director.sentry.username)
        form.hidden(name='sentry.ticket', value=director.sentry.ticket)

        prefix = self.name
        def _pn(name): return '%s.%s' % (prefix, name)

        username = director.sentry.username
        registrant = director.clerk.getRegistrant(username)
        
        firstname = self.inventory.firstname or registrant.firstname
        firstname = form.text(
            id='firstname', name=_pn('firstname'), label='First name', value=firstname)
        firstname.help = ''
        
        lastname = self.inventory.lastname or registrant.lastname
        lastname = form.text(
            id='lastname', name=_pn('lastname'), label='Last name', value=lastname)
        lastname.help = ''
        
        if errors and errors.get('oldpassword'):
            p = form.paragraph(cls='error')
            p.text = errors['oldpassword']
        oldpassword = form.password(
            id='oldpassword', name=_pn('oldpassword'), label='Old password')
        oldpassword.help = ('Please enter you old password')

        password = form.password(
            id='password', name=_pn('password'), label='Password')
        password.help = ('Passwords are also case sensitive.')

        if errors and errors.get('confirmation'):
            p = form.paragraph(cls='error')
            p.text = errors['confirmation']
        confirmation = form.password(
            id='confirmation', name=_pn('confirmation'),
            label='Re-enter password')
        confirmation.help = ('Re-enter your password to confirm')

        email = self.inventory.email or registrant.email
        email = form.text(id='email', name=_pn('email'), label='Email', value=email)
        email.help = ('This address is used to keep you informed of status of your virtual experiments, updates to your VNF service, etc.')

        organization = self.inventory.organization or registrant.organization
        organization = form.text(
            id='organization', name=_pn('organization'),
            label='Organization', value=organization)
        organization.help = ()
        
        submit = form.control(name="submit", type="submit", value="Update my account")
        
        return page


    def update(self, director):
        # save into the database
        username = director.sentry.username

        registrant = director.clerk.getRegistrant(username)
        
        registrant.firstname = self.firstname
        registrant.lastname = self.lastname
        oldemail = registrant.email
        registrant.email = self.email
        registrant.organization = self.organization
        registrant.password = password = self._encode(director, self.password)
        director.clerk.updateRecord(registrant)

        user = director.clerk.getUser(username)
        user.password = password
        user.email = self.email
        user.fullname = '%s %s' % (self.firstname, self.lastname)
        director.clerk.updateRecord(user)
        
        # send an acknowlegement to registrant
        from vnf.components.misc import announce
        emails = [oldemail]
        if oldemail != self.email:
            emails.append(self.email)
        adminemail = 'vnf-administrators@googlegroups.com'
        emails.append( adminemail )
        announce(director, 'user-settings-updated', user.fullname, emails)

        # now ask ipad to reload
        from vnf.applications.utils import askIpadToReload
        askIpadToReload(director)

        # 
        return self.updated(director)


    def updated(self, director):
        try:
            page = self._retrievePage(director)
        except AuthenticationError, err:
            return err.page
        
        main = page._body._content._main

        # populate the main column
        document = main.document( title = 'Settings updated' )
        document.description = ('')

        p = document.paragraph()
        p.text = [
            'Your account was updated.',
            ]
        return page
    

    def validateState(self, director):
        errors = {}
        if self.password != self.confirmation:
            errors['confirmation'] = [
                'Please make sure that you enter the same passwords in the two boxes provided below.'
                ]
        elif len(self.password) < 8:
            errors['confirmation'] = [
                'Your password must have at least 8 characters',
                ]
        # should check if password has at least one character, etc
                
        user = director.clerk.getUser(director.sentry.username)
        oldpassword = user.password
        if self._encode(director, self.oldpassword) != oldpassword:
            errors['oldpassword'] = [
                'Incorrect old password.'
                ]

        if errors:
            return self.interview(director, errors=errors)
        return self.update(director)
 

    def __init__(self, name=None):
        if name is None:
            name = "settings"
        super(Actor, self).__init__(name)
        return


    def _configure(self):
        super(Actor, self)._configure()

        self.firstname = self.inventory.firstname
        self.lastname = self.inventory.lastname
        self.email = self.inventory.email
        self.oldpassword = self.inventory.oldpassword
        self.password = self.inventory.password
        self.confirmation = self.inventory.confirmation
        self.organization = self.inventory.organization

        return


    def _retrievePage(self, director):
        return director.retrieveSecurePage('greet')


    def _encode(self, director, password):
        method = director.clerk.getUser('__method__').password
        
        from vnf.components import usersFromDB
        encoder = usersFromDB()._encoders[method]

        return encoder(password)


def actor(): return Actor()

# version
__id__ = "$Id$"

# End of file 
