#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                Jiao  Lin
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from vnf.dom.ITask import ITask
from vnf.weaver import action_href

from vnf.components.Actor import Actor as base, action, AuthenticationError

class Actor(base):
    
    class Inventory(base.Inventory):

        import pyre.inventory

        id = pyre.inventory.str('id')
        
        response_type = pyre.inventory.str('response-type')


    def start(self, director):
        try:
            page = self._retrievePage(director)
        except AuthenticationError, err:
            return err.page

        response_type = self.inventory.response_type
        assert response_type == 'json'

        id = self.inventory.id
        try:
            task = director.clerk.getRecordByID(ITask, id)
        except:
            r = {'status': 'failed', 'reason-of-failure': 'failed to retreive task #%s' % id}
            return str(r)

        if task.state not in ['created', 'running']:
            r = {'status': 'failed', 'reason-of-failure': 'task is %s' % task.state}
            return str(r)

        try:
            director.itaskmanager.start(task)
        except:
            import traceback
            r = {'status': 'failed', 'reason-of-failure': traceback.format_exc()}
            return str(r)
            
        return '{"status": "succeeded"}'
    

    def getProgress(self, director):
        try:
            page = self._retrievePage(director)
        except AuthenticationError, err:
            return err.page

        response_type = self.inventory.response_type
        assert response_type == 'json'
        
        id = self.inventory.id
        try:
            task = director.clerk.getRecordByID(ITask, id)
        except:
            r = {'status': 'failed', 'reason-of-failure': 'failed to retreive task #%s' % id}
            return str(r)
        
        p = {
            'percentage': task.progress_percentage,
            'message': task.progress_text,
            'state': task.state,
            }
        if task.state == 'failed':
            p['reason-of-failure'] = task.error
            
        return str(p)


    def _retrievePage(self, director):
        page = 'greet'
        return director.retrieveSecurePage(page)




def actor():
    return Actor('itask')


# version
__id__ = "$Id$"

# End of file 
