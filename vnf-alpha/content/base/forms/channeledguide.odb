# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                   Jiao Lin
#                      California Institute of Technology
#                        (C) 2007  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#



from vnf.forms.DBObjectForm import DBObjectForm as base, InputProcessingError


class ChanneledGuide(base):


    class Inventory(base.Inventory):

        import pyre.inventory
        w1 = pyre.inventory.str(name='w1', default=0.1)
        w1.meta['label'] = 'Front opening width'
        w1.meta['tiponerror'] = (
            'Please enter a postive number. Unit: meter.',
            )
        
        h1 = pyre.inventory.str(name='h1', default=0.1)
        h1.meta['label'] = 'Front opening height'
        h1.meta['tiponerror'] = (
            'Please enter a postive number. Unit: meter.',
            )
        
        w2 = pyre.inventory.str(name='w2', default=0.1)
        w2.meta['label'] = 'Back opening width'
        w2.meta['tiponerror'] = (
            'Please enter a postive number. Unit: meter.',
            )

        h2 = pyre.inventory.str(name='h2', default=0.1)
        h2.meta['label'] = 'Back opening height'
        h2.meta['tiponerror'] = (
            'Please enter a postive number. Unit: meter.',
            )

        l = pyre.inventory.str(name='l', default=1)
        l.meta['label'] = 'Length'
        l.meta['tiponerror'] = (
            'Please enter a postive number. Unit: meter.',
            )
        
        R0 = pyre.inventory.str(name='R0', default=0.)
        R0.meta['label'] = 'Low-angle reflectivity'
        R0.meta['tiponerror'] = (
            'Please enter a postive number.',
            )

        mx = pyre.inventory.str(name='mx', default=3.6)
        mx.meta['label'] = 'm-value of material for vertical mirrors'
        mx.meta['tip'] = 'Zero means completely absorbing.'
        mx.meta['tiponerror'] = (
            'Please enter a postive number.',
            )

        my = pyre.inventory.str(name='my', default=0.1)
        my.meta['label'] = 'm-value of material for horizontal mirrors'
        my.meta['tip'] = 'Zero means completely absorbing.'
        my.meta['tiponerror'] = (
            'Please enter a postive number.',
            )

        Qcx = pyre.inventory.str(name='Qcx', default=0.2)
        Qcx.meta['label'] = 'Critical scattering vector for vertical mirrors'
        Qcx.meta['tiponerror'] = (
            'Please enter a postive number.',
            )

        Qcy = pyre.inventory.str(name='Qcy', default=0.2)
        Qcy.meta['label'] = 'Critical scattering vector for horizontal mirrors'
        Qcy.meta['tiponerror'] = (
            'Please enter a postive number.',
            )

        W = pyre.inventory.str(name='W', default=2e-3)
        W.meta['label'] = 'Width of supermirror cut-off for all mirrors'
        W.meta['tiponerror'] = (
            'Please enter a postive number. Unit: AA-1',
            )

        k = pyre.inventory.str(name='k', default=1)
        k.meta['label'] = 'Number of channels in the guide'
        k.meta['tiponerror'] = (
            'Please enter a postive integer.',
            )
        
        d = pyre.inventory.str(name='d', default=0.)
        d.meta['label'] = 'Thickness of subdividing walls'
        d.meta['tiponerror'] = (
            'Please enter a postive number. Unit: meter',
            )

        alphax = pyre.inventory.str(name='alphax', default=0.)
        alphax.meta['label'] = 'Slope of reflectivity for vertical mirrors'
        alphax.meta['tiponerror'] = (
            'Please enter a postive number. Unit: AA',
            )
        
        alphay = pyre.inventory.str(name='alphay', default=0.)
        alphay.meta['label'] = 'Slope of reflectivity for horizontal mirrors'
        alphay.meta['tiponerror'] = (
            'Please enter a postive number. Unit: AA',
            )
        

        
    parameters = [#'short_description',
        'w1', 'h1', 'w2', 'h2', 'l', 'R0', 'mx', 'my', 'Qcx', 'Qcy',
        'W', 'k', 'd', 'alphax', 'alphay']
    
    DBTable = 'channeledguides'


    def __init__(self, name = None):
        if name is None:
            name = 'channeledguide'

        base.__init__(self, name)
        return


    def processUserInputs(self, *args, **kwds):

        errors = filter(
            lambda param: bad(param, getattr(self.inventory, param)),
            self.parameters)
        
        if len(errors): raise InputProcessingError, errors
        
        return base.processUserInputs(self, *args, **kwds)



def bad(key, value):
    if key in ['k']: return badint(value)
    if key in ['R0', 'd']: return badnonnegativefloat(value)
    return badpositivefloat(value)


def badint(value):
    try:
        value = int(value)
        if value <= 0: return True
    except:
        return True
    return False


def badnonnegativefloat(value):
    try:
        value = float(value)
        if value < 0: return True
    except:
        return True
    return False

    
def badpositivefloat(value):
    try:
        value = float(value)
        if value <= 0: return True
    except:
        return True
    return False


def form(): return ChanneledGuide()


# version
__id__ = "$Id$"

# End of file 
