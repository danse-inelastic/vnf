# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                   Jiao Lin
#                      California Institute of Technology
#                        (C) 2007  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#



from vnf.forms.DBObjectForm import DBObjectForm as base, InputProcessingError


def positivereal(candidate):
    try:
        f = float(candidate)
    except:
        raise ValueError
    if f<=0: raise ValueError
    return f


def nonnegatviereal(candidate):
    try:
        f = float(candidate)
    except:
        raise ValueError
    if f<0: raise ValueError
    return f


def realvector(candidate):
    try:
        v = tuple(eval(candidate))
    except:
        raise ValueError

    if len(v)!=3: raise ValueError

    for i in v:
        if not isNumber(i): raise ValueError
        continue
    return v


def isNumber(candidate):
    return isinstance(candidate, int) or isinstance(candidate, float)



class VanadiumPlate(base):


    class Inventory(base.Inventory):

        import pyre.inventory
        
        short_description = pyre.inventory.str(
            'short_description', default = '' )
        short_description.meta['label'] = 'Name'
        short_description.meta['tip'] = 'Please give this sample a name'

        width = pyre.inventory.str( name = 'width', default = 0.05 )
        width.meta['label'] = 'Width (unit: meter)'
        width.meta['tiponerror'] = (
            'Please enter a positive real number',
            )
        width.meta['validator'] = positivereal

        height = pyre.inventory.str( name = 'height', default = 0.10 )
        height.meta['label'] = 'Height (unit: meter)'
        height.meta['tiponerror'] = (
            'Please enter a positive real number',
            )
        height.meta['validator'] = positivereal

        thickness = pyre.inventory.str( name = 'thickness', default = 0.002 )
        thickness.meta['label'] = 'Thickness (unit: meter)'
        thickness.meta['tiponerror'] = (
            'Please enter a positive real number',
            )
        thickness.meta['validator'] = positivereal

        target_radius = pyre.inventory.str( name = 'target_radius', default = 0 )
        target_radius.meta['label'] = 'Target radius (unit: meter)'
        target_radius.meta['tip'] = 'Radius of the disk containg target. Use 0 for full space.'
        target_radius.meta['tiponerror'] = (
            'Please enter a real, non-negative number',
            )
        target_radius.meta['validator'] = nonnegatviereal

        target_position = pyre.inventory.str(name='target_position', default=(0,0,0))
        target_position.meta['label'] = 'Target position'
        target_position.meta['tip'] = 'Position of the target disk. Unit: meter'
        target_position.meta['tiponerror'] = 'Please enter a vector. (For example: (0,0,2))'
        target_position.meta['validator'] = realvector

    parameters = [
        'short_description',
        'width', 'height', 'thickness',
        'target_radius', 'target_position'
        ]
    
    DBTable = 'vanadiumplate'


    def __init__(self, name = None):
        if name is None:
            name = 'vanadiumplate'

        base.__init__(self, name)
        return


    def processUserInputs(self, *args, **kwds):
        errors = []
        for param in self.parameters:
            descriptor = getattr(self.Inventory, param)
            validator = descriptor.meta.get('validator')
            if not validator: continue
            
            value = getattr(self.inventory, param)
            try:
                value = validator(value)
            except ValueError:
                errors.append(param)
            continue
        
        if len(errors): raise InputProcessingError, errors
        
        return base.processUserInputs(self, *args, **kwds)


def form(): return VanadiumPlate()


# version
__id__ = "$Id$"

# End of file 
