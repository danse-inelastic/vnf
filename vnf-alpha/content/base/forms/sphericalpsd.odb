# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                   Jiao Lin
#                      California Institute of Technology
#                        (C) 2007  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#



from vnf.forms.DBObjectForm import DBObjectForm as base, InputProcessingError


def real(candidate):
    try:
        f = float(candidate)
    except:
        raise ValueError
    return f


def positivereal(candidate):
    try:
        f = float(candidate)
    except:
        raise ValueError
    if f<=0: raise ValueError
    return f


def positiveinteger(candidate):
    try:
        f = int(candidate)
    except:
        raise ValueError
    if f<=0: raise ValueError
    return f


def nonnegatviereal(candidate):
    try:
        f = float(candidate)
    except:
        raise ValueError
    if f<0: raise ValueError
    return f


def realvector(candidate):
    try:
        v = tuple(eval(candidate))
    except:
        raise ValueError

    if len(v)!=3: raise ValueError

    for i in v:
        if not isNumber(i): raise ValueError
        continue
    return v


def isNumber(candidate):
    return isinstance(candidate, int) or isinstance(candidate, float)



class SphericalPSD(base):


    class Inventory(base.Inventory):

        import pyre.inventory
        
        radius = pyre.inventory.str( name = 'radius', default = 3 )
        radius.meta['label'] = 'radius (unit: meter)'
        radius.meta['tiponerror'] = (
            'Please enter a positive real number',
            )
        radius.meta['validator'] = positivereal

        ncolumns = pyre.inventory.str( name = 'ncolumns', default = 0.05 )
        ncolumns.meta['label'] = 'Number of columns'
        ncolumns.meta['tiponerror'] = (
            'Please enter a positive integer',
            )
        ncolumns.meta['validator'] = positiveinteger

        nrows = pyre.inventory.str( name = 'nrows', default = 0.05 )
        nrows.meta['label'] = 'Number of rows'
        nrows.meta['tiponerror'] = (
            'Please enter a positive integer',
            )
        nrows.meta['validator'] = positiveinteger
        

    parameters = [
        'radius',
        'ncolumns', 'nrows',
        ]
    
    DBTable = 'sphericalpsd'


    def __init__(self, name = None):
        if name is None:
            name = 'sphericalpsd'
            
        base.__init__(self, name)
        return


    def processUserInputs(self, *args, **kwds):
        errors = []
        for param in self.parameters:
            descriptor = getattr(self.Inventory, param)
            validator = descriptor.meta.get('validator')
            if not validator: continue
            
            value = getattr(self.inventory, param)
            try:
                value = validator(value)
            except ValueError:
                errors.append(param)
            continue

        if len(errors): raise InputProcessingError, errors
        
        return base.processUserInputs(self, *args, **kwds)


def form(): return SphericalPSD()


# version
__id__ = "$Id$"

# End of file 
