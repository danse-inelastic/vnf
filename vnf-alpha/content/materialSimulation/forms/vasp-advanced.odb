# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                   Jiao Lin
#                      California Institute of Technology
#                        (C) 2008  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from vnf.components.Form import Form as base
from vnf.components.Actor import action_link, actionRequireAuthentication
from vnf.components.DBObjectForm import formactor_action_prefix


class Form( base ):

    class Inventory( base.Inventory ):
        import pyre.inventory
        INCAR = pyre.inventory.str('INCAR')
        KPOINTS = pyre.inventory.str('KPOINTS')
        POSCAR = pyre.inventory.str('POSCAR')
        POTCAR = pyre.inventory.str('POTCAR')
        pass # end of Inventory


    def legend(self):
        'return a legend string'
        return 'VASP advanced configuration'


    def expand(self, form, INCAR=None, KPOINTS=None, POSCAR=None, POTCAR=None):
        '''expand an existing form with fields from this component'''

        if INCAR is None: INCAR = self.inventory.INCAR
        if KPOINTS is None: KPOINTS = self.inventory.KPOINTS
        if POSCAR is None: POSCAR = self.inventory.POSCAR
        if POTCAR is None: POTCAR = self.inventory.POTCAR
        
        director = self.director

        prefix = formactor_action_prefix

        props = [
            'INCAR',
            'KPOINTS',
            'POSCAR',
            'POTCAR',
            ]
        for prop in props:
            form.textarea(
                id = '',
                name = '%s.%s' % (prefix, prop),
                label = prop,
                default = eval(prop),
                rows = 10)
            continue
        return


    def processUserInputs(self):
        'process user inputs and save them to db'
        props = [
            'INCAR',
            'KPOINTS',
            'POSCAR',
            'POTCAR',
            ]
        d = {}
        for prop in props:
            text = eval('self.inventory.%s'%prop)
            d[prop] = _unix_eol(text)
            continue
        return d


    def __init__(self, name = None):
        if name is None:
            name = 'vasp-advanced'

        base.__init__(self, name)

        return
    
    pass # end of Form


def _unix_eol(s):
    return s.replace('\r\n', '\n').replace('\r', '\n')


def form(): return Form()


# version
__id__ = "$Id$"

# End of file 
