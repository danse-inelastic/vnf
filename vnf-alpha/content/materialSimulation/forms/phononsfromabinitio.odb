# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                      California Institute of Technology
#                        (C) 2007  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from vnf.components.Form import Form as base
from vnf.components.Actor import actionRequireAuthentication, action_link
from vnf.components.DBObjectForm import formactor_action_prefix

class Form( base ):

    class Inventory( base.Inventory ):

        import pyre.inventory as inv
        id = inv.str( 'id', default = '' )
        
        short_description = inv.str('short_description', default = '' )
        short_description.meta['tip'] = 'A short description'
        
        #supercell.meta['tip'] = 'Supercell for phonon calculation'
        scx = inv.int('scx')
        scy = inv.int('scy')
        scz = inv.int('scz')
        
        displacementAmplitude = inv.float('displacementAmplitude', default=0.01)
        displacementAmplitude.meta['tip'] = 'Displacement amplitude'      
        
        #qGrid.meta['tip'] = 'Q grid for phonon calculation'
        nQx = inv.int('nQx')
        nQy = inv.int('nQy')
        nQz = inv.int('nQz')


    DBTable = 'phononsfromabinitio'
        
    def expand(self, form, id=None, errors=None):
        '''expand an existing form with fields from this component'''
        if id is None: id = self.inventory.id
        else: self.inventory.id = id
        
        prefix = formactor_action_prefix

        id_field = form.hidden(
            name = '%s.id' % prefix, value = self.inventory.id)

        record = self.getRecord()
        
        self.short_description = form.text(
                id = 'text0',
                name='%s.short_description'% prefix,
                label='Name of this calculation',
                value = record.short_description)
        
        box = form.box()
        supercellx = box.text(
                id = 'text5',
                name='%s.scx' % prefix,
                label='Supercell expansion (a)',
                value = str(record.supercell[0]))  
        supercelly = box.text(
                id = 'text6',
                name='%s.scy' % prefix,
                label='Supercell expansion (b)',
                value = str(record.supercell[1]))       
        supercellz = box.text(
                id = 'text7',
                name='%s.scz' % prefix,
                label='Supercell expansion (c)',
                value = str(record.supercell[2]))   
        displacementAmplitude = form.text(
                id = 'text8',
                name='%s.displacementAmplitude' % prefix,
                label='Displacement amplitude',
                value = str(record.displacementAmplitude)) 
        box = form.box()
        Qx = box.text(
                id = 'text9',
                name='%s.nQx' % prefix,
                label='Phonon Q-points (a*)',
                value = str(record.qGrid[0]))  
        Qy = box.text(
                id = 'text10',
                name='%s.nQy' % prefix,
                label='Phonon Q-points (b*)',
                value = str(record.qGrid[1]))       
        Qz = box.text(
                id = 'text11',
                name='%s.nQz' % prefix,
                label='Phonon Q-points (c*)',
                value = str(record.qGrid[2])) 
        

    def processUserInputs(self):
        record = self.getRecord()
        props = [
            'short_description',
            'displacementAmplitude',
            ]
        for prop in props:
            value = getattr(self.inventory, prop)
            setattr(record, prop, value)
            continue

        record.supercell = [self.inventory.scx, self.inventory.scy, self.inventory.scz]
        record.qGrid = [self.inventory.nQx, self.inventory.nQy, self.inventory.nQz]
        self.director.clerk.updateRecord(record)
        return record
    
    
    def getRecord(self):
        'get DB record'
        return self.director.clerk.getRecordByID( self.DBTable, self.inventory.id )
    


def form(): return Form( 'phononsfromabinitio' )


# version
__id__ = "$Id$"

# End of file 
