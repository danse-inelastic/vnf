# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                   Jiao Lin
#                      California Institute of Technology
#                        (C) 2007  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from vnf.components.Form import Form as base

from vnf.components.MaterialSimulationEngine import engines
engines = engines()


class Form( base ):

    class Inventory( base.Inventory ):

        import pyre.inventory as inv
        type = inv.str('type',default=engines['gulp'])
        #type.validator=inv.choice([e.id for e in engines])
        type.meta['tip'] = 'type of simulation engine'
        
        #kernel_id = inv.str( 'kernel_id' )

    def expand(self, form):
        '''expand an existing form with fields from this component'''
        
        p = form.paragraph()
        p.text = [
            '''Vnf allows a user to simulate material dynamics and structure on a variety of length and 
            time scales. These material simulations can be used in inelastic neutron scattering to simulate 
            the dynamics of an inelastic scattering kernel and 
        in diffraction, sans, reflectometry, and engineering diffraction to simulate the 
        thermodynamically equilibrated form of a structural model of the scattering kernel.''']  
           
        p = form.paragraph()
        p.text = ['<h2>Ab Initio Techniques</h2>']
        p = form.paragraph()
        p.text = ['''At small length scales one may use quantum techniques as available in 
            the DFT plane wave codes.''']
        director = self.director
        username = director.sentry.username
        user = director.clerk.getUser(username)
        privilege = director.accesscontrol.checkVASPPrivilege(user)
        if not privilege:
            button = self.engineRadioButton(form, engines['vasp'], disabled=True)
            button.error = (
                'You do not have access to proprietory ab initio software '
                'at this moment. Please contact the vnf team by clicking '
                '"Contact us" link on the main menu.'
                )
        else:
            self.engineRadioButton(form, engines['vasp'])
        
        p = form.paragraph()
        p.text = ['<h2>Atomistic Forcefield Techniques</h2>']        
        p = form.paragraph()
        p.text = ['''At larger length scales one can access common atom and 
        molecular dynamics codes which employ Newton's equations of motion such as Gulp or quantized harmonic dynamics 
        such as Gulp or a Born von Karman (BvK) calculation.''']
        self.engineRadioButton(form, engines['gulp'])
        self.engineRadioButton(form, engines['bvk'])
        
        p = form.paragraph()
        p.text = [
            '''Future engines and models include sans / reflectometry / engineering diffraction models, Mmtk, Quantum Espresso, and 
            perhaps larger-scale structural 
            simulation tools such as bead-spring models for polymers or phase field simulations for mesoscopic 
            length scales (multigrain crystals, complex liquids and multiphase materials, etc.)''']
   

    def engineRadioButton(self, form, engine, disabled=False):
        prefix = formactor_action_prefix
        name = '%s.%s' % (formactor_action_prefix, 'type')
        default = self.inventory.type
        
        id = engine.id
        label = engine.short_description
        kwds = {
                'id':'radio'+id,
                'name':name,
                'label':label,
                'value':id,
                }
        if disabled: kwds['disabled']=True

        if id == default: kwds['checked']=True
        rb = form.radio(**kwds)

        return rb
    

    def processUserInputs(self):
        'process user input '
        return self.inventory.type


#formactor_action_prefix = 'actor.form-received' # assumed actor is a form actor
from vnf.components.DBObjectForm import formactor_action_prefix

def form(): return Form( 'selectSimulationEngine' )


# version
__id__ = "$Id$"

# End of file 
