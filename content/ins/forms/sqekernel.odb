# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                   Jiao Lin
#                      California Institute of Technology
#                        (C) 2007  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from vnf.dom.ins.SQE import SQE


from vnf.components.DBObjectForm import DBObjectForm as base, InputProcessingError, formactor_action_prefix
from vnf.components.Actor import actionRequireAuthentication

class SQEKernel(base):


    class Inventory(base.Inventory):

        import pyre.inventory
        import vnf.inventory
        
        Qmax = pyre.inventory.str( name = 'Qmax' )
        Qmax.meta['label'] = 'Maximum momentum transfer'
        Qmax.meta['tip'] = 'Maximum momentum transfer allowed for kernel simulation. unit: A**-1'
        Qmax.meta['tiponerror'] = (
            'Please enter a positive real number for max momentum transfer.',
            'Typical value is 10-1000. Unit: A**-1',
            )
        Qmax.meta['validator'] = vnf.inventory.validators.positivereal

        Qmin = pyre.inventory.str( name = 'Qmin' )
        Qmin.meta['label'] = 'Minimum momentum transfer'
        Qmin.meta['tip'] = 'Minimum momentum transfer allowed for kernel simulation. unit: A**-1'
        Qmin.meta['tiponerror'] = (
            'Please enter a positive real number for min momentum transfer.',
            'Typical value is 10-1000. Unit: A**-1',
            )
        Qmin.meta['validator'] = vnf.inventory.validators.nonnegativereal

        Emax = pyre.inventory.str( name = 'Emax' )
        Emax.meta['label'] = 'Maximum energy transfer'
        Emax.meta['tip'] = 'Maximum energy transfer allowed for kernel simulation. unit: meV'
        Emax.meta['tiponerror'] = (
            'Please enter a real number for max energy transfer.',
            'Unit: inverse angstrom',
            )
        Emax.meta['validator'] = vnf.inventory.validators.real

        Emin = pyre.inventory.str( name = 'Emin' )
        Emin.meta['label'] = 'Minimum energy transfer'
        Emin.meta['tip'] = 'Minimum energy transfer allowed for kernel simulation. unit: meV'
        Emin.meta['tiponerror'] = (
            'Please enter a real number for min energy transfer.',
            'Unit: inverse angstrom',
            )
        Emin.meta['validator'] = vnf.inventory.validators.real

        sqe_id = pyre.inventory.str(name='sqe_id')
        sqe_id.meta['label'] = 'S(Q,E)'
        sqe_id.meta['tip'] = "Scattering function"

        upload_id = pyre.inventory.str(name='upload_id')
        sqe_name = pyre.inventory.str(name='sqe_name')
        pass # end of Inventory


    parameters = [
        'Emax',
        'Emin',
        'Qmax',
        'Qmin',
        ]

    DBTable = 'SQEKernel'


    def __init__(self, name = None):
        if name is None:
            name = 'sqekernel'

        base.__init__(self, name)

        return


    def expand(self, form, errors = None, properties = None):
        p = form.paragraph( )
        p.text = [
            'Kernel type: %s' % self.DBTable,
            ]

        director = self.director
        if self.inventory.id:
            kernel = director.clerk.getRecordByID(self.DBTable, self.inventory.id)
            oldsqe = kernel.sqe
        else:
            oldsqe = None
        
        base.expand(self, form, errors = errors, properties = properties)
        
        prefix = formactor_action_prefix

        # selector for sqes
        sqes = _findSqes(director)
        from vnf.utils.uniquelist import uniquelist
        from vnf.dom.hash import hash
        sqes = uniquelist(
            sqes, idfun=lambda sqe: hash(sqe, director.clerk.db))
        
        entries = [
            (sqe.id,
             '#%s: %s' % (sqe.id, sqe.short_description)
             )
            for sqe in sqes ]
        entry0 = entries and entries[0]
        entry0label = entry0 and entry0[0]

        import opal.content
        selector = form.selector(
            id = 'sqe_selector',
            name = '%s.sqe_id' % prefix,
            entries = entries,
            label = 'S(Q,E) selector',
            selected = (oldsqe and oldsqe.id) or self.inventory.sqe_id or entry0label,
            )

        # uploader
        # unique id for the upload
        from vnf.components.misc import new_id
        upload_id = new_id(director)

        # remember this upload id
        form.hidden(name='%s.upload_id' % prefix, value=upload_id)

        # Hint
        help = (
             'You can upload your S(Q,E) histogram file in hdf5 format by '\
             'clicking the following button.'
             )
        # the uploader
        import vnf.content
        action = actionRequireAuthentication(
            sentry = director.sentry,
            actor = 'upload', 
            routine = 'receive_file',
            id = upload_id,
            )
        uploader = vnf.content.uploader(action, label="Upload S(Q,E)", help=help)
        if errors and 'upload' in errors:
            uploader.error = errors['upload']
        form.add(uploader)

        # need input for sqe_name
        field = form.text(
            id = '',
            name = '%s.%s' %(prefix,'sqe_name'),
            label = "Describe S(Q,E) you uploaded",
            value = self.inventory.sqe_name,
            )
        if errors and 'sqe_name' in errors:
            field.error = errors['sqe_name']
        
        return


    def processUserInputs(self, *args, **kwds):
        director = self.director
        errors = {}
        
        for param in self.parameters:
            descriptor = getattr(self.Inventory, param)
            validator = descriptor.meta.get('validator')
            if not validator: continue
            
            value = getattr(self.inventory, param)
            try:
                value = validator(value)
            except ValueError:
                errors[param] = ''
            continue

        upload_id = self.inventory.upload_id
        if not self.inventory.sqe_id or _got_upload(upload_id, director):
            # no sqe selected
            # try to see if there is a uploaded sqe file
            sqe_name = self.inventory.sqe_name
            errors = _check_sqe_upload(sqe_name, upload_id, director)
            
        if errors: raise InputProcessingError, errors

        if _got_upload(upload_id, director):
            # sqe should be uploaded correctly.
            # create a sqe record
            sqe = director.clerk.newOwnedObject(SQE)
            # update sqe
            _update_sqe_from_upload(
                sqe=sqe,
                upload_id=upload_id,
                name=sqe_name,
                director=director)
            self.inventory.sqe_id = sqe.id
            
        record = base.processUserInputs(self, *args, **kwds)
        sqe_id = self.inventory.sqe_id
        record.sqe = 'sqes', sqe_id
        director.clerk.updateRecord(record)
        return record


def _update_sqe_from_upload(sqe, upload_id='', name='', director=None):
    upload_directory, uploaded_file = _get_sqe_upload(upload_id, director)
    
    import shutil, os

    # and save the data file with it
    directory = director.dds.abspath(sqe)
    os.makedirs(directory)
    os.rename(uploaded_file, director.dds.abspath(sqe, filename=SQE.histogramh5))

    # update the record with other user inputs
    sqe.short_description = name
    director.clerk.updateRecord(sqe)

    # remove the upload directory
    shutil.rmtree(upload_directory)
    return
    

def _get_sqe_upload(uploadid, director):
    'retrieve the information about the upload'
    uploader = director.retrieveActor('upload')
    uploader.inventory.id = uploadid
    upload_directory = uploader.uploadDirectory()
    from vnf.utils.misc import most_recent_file
    uploaded_file = most_recent_file(upload_directory)
    return upload_directory, uploaded_file


def _got_upload(uploadid, director):
    'do we got an upload?'
    import os
    uploader = director.retrieveActor('upload')
    uploader.inventory.id = uploadid
    upload_directory = uploader.uploadDirectory()
    return os.path.exists(upload_directory)


def _check_sqe_upload(short_description, uploadid, director):
    import os, shutil
    
    # container for errors
    errors = {}
        
    # make sure short_description is not empty
    if not short_description:
        errors['sqe_name'] = 'Name cannot be empty'
        
    # the uploaded file
    uploader = director.retrieveActor('upload')
    uploader.inventory.id = uploadid
    upload_directory = uploader.uploadDirectory()
    if not os.path.exists(upload_directory):
        errors['upload'] = "You have not upload any file"
    else:
        from vnf.utils.misc import most_recent_file
        uploaded_file = most_recent_file(upload_directory)
        # make sure the uploaded file is what we want
        badfile = _badhisth5file(uploaded_file)

        if badfile:
            # if the file is no good, delete the file and the directory
            shutil.rmtree(upload_directory)

            # and set the errors
            errors['upload'] = badfile
    return errors


def _badhisth5file(filename):
    #
    if not filename.endswith('.h5'): return "File does not have correct extension: .h5"

    # openable?
    try:
        import histogram.hdf as hh, histogram.hdf.utils as hhu
        hist = hh.load(filename, hhu.getOnlyEntry(filename))
    except Exception, err:
        return "File cannot be opened or file has more than one entries. %s: %s" % (
            err.__class__.__name__, err)

    # axes
    if len(hist.axes())!=2: return "Histogram must have 2 axes. Got %d" % len(hist.axes())
    try:
        hist.axisFromName('Q')
    except:
        return "Histogram does not have Q axis"
    
    try:
        hist.axisFromName('energy')
    except:
        return "Histogram does not have energy axis"

    return


def _findSqes(director):
    from vnf.dom.ins.SQE import SQE
    where = "creator='%s'" % director.sentry.username
    return director.clerk.db.fetchall(SQE, where=where)


def form(): return SQEKernel()


# version
__id__ = "$Id$"

# End of file 
