# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                   Jiao Lin
#                      California Institute of Technology
#                        (C) 2007  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#



from vnf.components.DBObjectForm import DBObjectForm as base, InputProcessingError, formactor_action_prefix


class SQEKernel(base):


    class Inventory(base.Inventory):

        import pyre.inventory
        import vnf.inventory
        
        Qmax = pyre.inventory.str( name = 'Qmax' )
        Qmax.meta['label'] = 'Maximum momentum transfer'
        Qmax.meta['tip'] = 'Maximum momentum transfer allowed for kernel simulation. unit: A**-1'
        Qmax.meta['tiponerror'] = (
            'Please enter a positive real number for max momentum transfer.',
            'Typical value is 10-1000. Unit: A**-1',
            )
        Qmax.meta['validator'] = vnf.inventory.validators.positivereal

        Qmin = pyre.inventory.str( name = 'Qmin' )
        Qmin.meta['label'] = 'Minimum momentum transfer'
        Qmin.meta['tip'] = 'Minimum momentum transfer allowed for kernel simulation. unit: A**-1'
        Qmin.meta['tiponerror'] = (
            'Please enter a positive real number for min momentum transfer.',
            'Typical value is 10-1000. Unit: A**-1',
            )
        Qmin.meta['validator'] = vnf.inventory.validators.nonnegativereal

        Emax = pyre.inventory.str( name = 'Emax' )
        Emax.meta['label'] = 'Maximum energy transfer'
        Emax.meta['tip'] = 'Maximum energy transfer allowed for kernel simulation. unit: meV'
        Emax.meta['tiponerror'] = (
            'Please enter a real number for max energy transfer.',
            'Unit: inverse angstrom',
            )
        Emax.meta['validator'] = vnf.inventory.validators.real

        Emin = pyre.inventory.str( name = 'Emin' )
        Emin.meta['label'] = 'Minimum energy transfer'
        Emin.meta['tip'] = 'Minimum energy transfer allowed for kernel simulation. unit: meV'
        Emin.meta['tiponerror'] = (
            'Please enter a real number for min energy transfer.',
            'Unit: inverse angstrom',
            )
        Emin.meta['validator'] = vnf.inventory.validators.real

        sqe_id = pyre.inventory.str(name='sqe_id')
        sqe_id.meta['label'] = 'S(Q,E)'
        sqe_id.meta['tip'] = "Scattering function"

        pass # end of Inventory


    parameters = [
        'Emax',
        'Emin',
        'Qmax',
        'Qmin',
        ]

    DBTable = 'SQEKernel'


    def __init__(self, name = None):
        if name is None:
            name = 'sqekernel'

        base.__init__(self, name)

        return


    def expand(self, form, errors = None, properties = None):
        p = form.paragraph( )
        p.text = [
            'Kernel type: %s' % self.DBTable,
            ]
        
        base.expand(self, form, errors = errors, properties = properties)
        
        prefix = formactor_action_prefix
        
        director = self.director
        sqes = _findSqes(director)
        from vnf.utils.uniquelist import uniquelist
        from vnf.dom.hash import hash
        sqes = uniquelist(
            sqes, idfun=lambda sqe: hash(sqe, director.clerk.db))
        
        entries = [
            (sqe.id,
             '#%s: %s' % (sqe.id, sqe.short_description)
             )
            for sqe in sqes ]
        entry0 = entries and entries[0]
        entry0label = entry0 and entry0[0]
        
        import opal.content
        selector = form.selector(
            id = 'sqe_selector',
            name = '%s.sqe_id' % prefix,
            entries = entries,
            label = 'S(Q,E)',
            selected = self.inventory.sqe_id or entry0label,
            )
        
        return


    def processUserInputs(self, *args, **kwds):
        errors = []
        for param in self.parameters:
            descriptor = getattr(self.Inventory, param)
            validator = descriptor.meta.get('validator')
            if not validator: continue
            
            value = getattr(self.inventory, param)
            try:
                value = validator(value)
            except ValueError:
                errors.append(param)
            continue

        if len(errors): raise InputProcessingError, errors
        
        record = base.processUserInputs(self, *args, **kwds)
        sqe_id = self.inventory.sqe_id
        record.sqe = 'SQE', sqe_id
        return record



def _findSqes(director):
    from vnf.dom.ins.SQE import SQE
    where = "creator='%s'" % director.sentry.username
    return director.clerk.db.fetchall(SQE, where=where)


def form(): return SQEKernel()


# version
__id__ = "$Id$"

# End of file 
