# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                   Jiao Lin
#                      California Institute of Technology
#                        (C) 2007  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#



from vnf.components.Form import Form as base, InputProcessingError, formactor_action_prefix



def validate_system(system):
    from vnf.utils.executionguard import validate
    if not validate(system): raise RuntimeError, 'system has dangerous keywords such as "import"'

    # temp hack
    return system

    d = {}
    exec system in d
    
    vars = [
        'cell',
        'atoms',
        'sites',
        'bonds',
        ]
    for var in vars:
        assert var in d, "variable %s missing" % var
        continue

    return system



class BvKModel(base):


    class Inventory(base.Inventory):

        import pyre.inventory
        import vnf.inventory
        
        system = pyre.inventory.str('system')
        system.meta['validator'] = validate_system

        description = pyre.inventory.str('description')
        description.meta['label'] = 'Description'
        description.meta['tip'] = 'Please give this bvk model a short description'
        description.meta['validator'] = vnf.inventory.validators.notEmpty
        pass # end of Inventory


    def __init__(self, name = None):
        if name is None:
            name = 'editbvkmodel'

        base.__init__(self, name)
        return


    def expand(self, form, errors = None):
        if errors:
            p = form.paragraph( cls = 'error' )
            p.text = [
                'The form you filled out contained some errors.',
                'Please look through the values you have entered',
                'and correct any mistakes.',
                ]

        prefix = formactor_action_prefix

        p = form.paragraph()
        p.text = [
            'Please modify the following bvk model',
            ]

        property = 'system'
        value = self.inventory.getTraitValue(property)
        ta = form.textarea(
            id = '', 
            name = '%s.%s' % (prefix, property),
            label = 'BvK System',
            default = value,
            rows = 20)
        if errors and errors.get(property):
            ta.error = errors[property]

            
        property = 'description'
        meta = self.inventory.getTrait(property).meta        
        value = self.inventory.getTraitValue(property)
        field = form.text(
            id = 'edit_%s' % property,
            name='%s.%s' % (prefix, property),
            label = meta.get('label') or property,
            value = value)
        field.tip = meta.get('tip') or ''
        if errors and errors.get(property):
            field.error = errors[property]
        return


    def processUserInputs(self, *args, **kwds):
        errors = {}

        properties = ['system', 'description']
        data = {}

        for property in properties:        
            meta = self.inventory.getTrait(property).meta
            validator = meta.get('validator')
            value = self.inventory.getTraitValue(property)
            if validator: 
                try:
                    value = validator(value)
                except Exception, msg:
                    errors[property] = str(msg)
            data[property] = value
            continue

        if len(errors): raise InputProcessingError, errors
        
        return data


def form(): return BvKModel()

# version
__id__ = "$Id$"

# End of file 
