# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                   Jiao Lin
#                      California Institute of Technology
#                        (C) 2007  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#



from vnf.components.DBObjectForm import DBObjectForm as base, InputProcessingError, formactor_action_prefix


class PolyXtalCoherentPhononScatteringKernel(base):


    class Inventory(base.Inventory):

        import pyre.inventory
        
        max_energy_transfer = pyre.inventory.str( name = 'max_energy_transfer' )
        max_energy_transfer.meta['label'] = 'Maximumn energy transfer'
        max_energy_transfer.meta['tip'] = 'Maximumn energy transfer allowed for kernel simulation. unit: meV'
        max_energy_transfer.meta['tiponerror'] = (
            'Please enter a positive real number for max energy transfer.',
            'Typical value is 10-1000. Unit: meV',
            )

        max_momentum_transfer = pyre.inventory.str( name = 'max_momentum_transfer' )
        max_momentum_transfer.meta['label'] = 'Maximumn momentum transfer'
        max_momentum_transfer.meta['tip'] = 'Maximumn momentum transfer allowed for kernel simulation. unit: A**-1'
        max_momentum_transfer.meta['tiponerror'] = (
            'Please enter a positive real number for max momentum transfer.',
            'Unit: inverse angstrom',
            )

        Ei = pyre.inventory.str( name = 'Ei' )
        Ei.meta['label'] = 'Ei'
        Ei.meta['tip'] = 'Approximate incident neutron energy. unit: meV'
        Ei.meta['tiponerror'] = (
            'Please enter a positive real number. '
            'It should be the same as the neutron energy of your near-monochromatic ',
            'neutron source.',
            )

        dispersion_id = pyre.inventory.str(name='dispersion_id')
        dispersion_id.meta['label'] = 'Dispersion'
        dispersion_id.meta['tip'] = "Phonon dispersion"

        pass # end of Inventory


    parameters = [
        'max_momentum_transfer',
        'max_energy_transfer',
        'Ei',
        ]

    DBTable = 'PolyXtalCoherentPhononScatteringKernel'


    def __init__(self, name = None):
        if name is None:
            name = 'polyxtalcoherentphononscatteringkernel'

        base.__init__(self, name)

        return


    def expand(self, form, errors = None, properties = None, matter=None):
        p = form.paragraph( )
        p.text = [
            'Kernel type: %s' % self.DBTable,
            ]
            
        base.expand(self, form, errors = errors, properties = properties)

        prefix = formactor_action_prefix

        director = self.director
        dispersions = _findDispersions(director)
        from vnf.utils.uniquelist import uniquelist
        from vnf.dom.hash import hash
        dispersions = uniquelist(
            dispersions, idfun=lambda dispersion: hash(dispersion, director.clerk.db))

        matterindex = hash(matter, director.clerk.db)
        def checkMatter(dispersion):
            matter = dispersion.matter
            if not matter:
                origin = dispersion.origin
                if not origin: return False
                origin = director.clerk.dereference(origin)
                matter = origin.matter
            matter = director.clerk.dereference(matter)
            return hash(matter, director.clerk.db) == matterindex
        dispersions = filter(checkMatter, dispersions)

        # 
        if not dispersions:
            p = form.paragraph(cls='error')
            p.text = [
                'No phonon dispersion was found for your material.',
                'Please perform a material simulation to calculate',
                'phonon dispersion for this material and come back',
                'here.',
                ]
            return

        # previous selection?
        previous_selected_dispersion_id = None
        kernel = self.getRecord()
        if kernel:
            dispersion_ref = kernel.dispersion
            if dispersion_ref:
                previous_selected_dispersion_id = dispersion_ref.id
        if not previous_selected_dispersion_id:
            previous_selected_dispersion_id = self.inventory.dispersion_id
            
        previous_selected_dispersion = None
        if previous_selected_dispersion_id:
            try:
                previous_selected_dispersion = director.clerk.getRecordByID(
                    'phonondispersions', previous_selected_dispersion_id)
            except:
                pass
        
        if not previous_selected_dispersion:
            previous_selected_dispersion = dispersions[0]

        l = form.literal()
        l.text = ['<h5>Phonon dispersion</h5>']

        p = form.paragraph()
        p.text = ['Please select a phonon dispersion from the following table']
        
        options = {
            'selected': previous_selected_dispersion,
            'name': 'dispersion_id',
            }
        table = director.retrieveComponent(
            'phonon-dispersions',
            factory="table",
            args=[dispersions, director, options],
            vault=['tables']).table
        form.contents.append(table)
        return


    def processUserInputs(self, *args, **kwds):
        errors = []
        self._verify( 'max_energy_transfer', errors )
        self._verify( 'max_momentum_transfer', errors )
        if len(errors): raise InputProcessingError, errors
        record = base.processUserInputs(self, *args, **kwds)
        dispersion_id = self.inventory.dispersion_id
        
        errors.append('dispersion_id')
        
        if not dispersion_id:
            raise InputProcessingError, errors
        
        record.dispersion = dispersion_id
        director = self.director
        director.clerk.updateRecord(record)
        return record


    def _verify(self, prop, errors):
        value = getattr( self.inventory, prop )
        try:
            value = float(value)
            if value < 0: errors.append( prop )
        except:  errors.append(prop)
        return


def _findDispersions(director):
    from vnf.dom.ins.PhononDispersion import PhononDispersion
    username = director.sentry.username
    where = "creator='%s' or creator='vnf'" % username
    return director.clerk.db.fetchall(PhononDispersion, where=where)

def form(): return PolyXtalCoherentPhononScatteringKernel()

# version
__id__ = "$Id$"

# End of file 
