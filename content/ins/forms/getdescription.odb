# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                      California Institute of Technology
#                        (C) 2007  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from vnf.components.Form import Form as base, InputProcessingError
from vnf.components.Actor import actionRequireAuthentication, action_link
from vnf.components.DBObjectForm import formactor_action_prefix

class Form( base ):

    class Inventory( base.Inventory ):

        import pyre.inventory as inv
        short_description = inv.str('short_description', default = '' )

        
    def expand(self, form, errors=None):
        '''expand an existing form with fields from this component'''
        
        if errors:
            p = form.paragraph(cls='error')
            p.text = [
                'The form you filled contains some errors. ',
                'Please fix them and resubmit.',
                ]

        prefix = formactor_action_prefix

        property = 'short_description'
        label = 'Description'
        value = getattr(self.inventory, property)

        field = form.text(
            id = property,
            name='%s.%s' % (prefix, property),
            label=label,
            value = value)
        form.tip = 'Please provide a short description'
        if errors and errors.get(property):
            field.error = errors[property]
        return


    def processUserInputs(self):
        # check for errors
        errors = {}

        short_description = self.inventory.short_description
        if not short_description:
            errors['short_description'] = "Description cannot be empty"
        
        # raise exception when error
        if errors: raise InputProcessingError, errors
        
        # good
        return short_description


def form(): return Form( 'getdescription' )


# version
__id__ = "$Id$"

# End of file 
