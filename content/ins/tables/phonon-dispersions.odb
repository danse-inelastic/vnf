#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                  Jiao Lin
#                     California Institute of Technology
#                       (C) 2009  All Rights Reserved
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


def table(dispersions, director, kwds={}):
    return _table(dispersions, director, **kwds)


from vnf.components.Actor import action_link, actionRequireAuthentication


def _table(dispersions, director, selected=None, name='dispersion'):
    from vnf.content.table import Model, View, Table
    class model(Model):

        id = Model.Measure(name='id', type='text')
        origin = Model.Measure(name='origin', type='text')
        matter = Model.Measure(name='matter', type='text')
        creationDate = Model.Measure(name='creationDate', type='text')
        selected = Model.Measure(name='selected', type='single_choice_in_one_column')


    def getOrigin(disp):
        origin = disp.origin
        if not origin: return ''
        
        try:
            origin = director.clerk.dereference(origin)
        except:
            return "Cannot resolve origin: %s" % (origin,)
        
        label = '%s %s' % (origin.__class__.__name__, origin.id)
        action = actionRequireAuthentication(
            label = label,
            actor=origin.__class__.name,
            routine='view',
            id = origin.id,
            sentry = director.sentry,
            )
        url = action_link(action, director.cgihome)
        return url
    def getCreationDate(disp):
        date = disp.date
        return date
    def getMatter(disp):
        origin = disp.origin
        if not origin: return ''
        
        try:
            origin = director.clerk.dereference(origin)
        except:
            return "Cannot resolve origin: %s" % (origin,)
        
        try:
            matter = origin.matter
        except:
            return "No matter for origin: %s" % (origin,)

        try:
            matter = director.clerk.dereference(matter)
        except:
            return "Cannot resolve matter: %s" % (matter,)

        label = '%s %s' % (matter.__class__.__name__, matter.id)
        action = actionRequireAuthentication(
            label = label,
            actor=matter.__class__.name,
            routine='view',
            id = matter.id,
            sentry = director.sentry,
            )
        url = action_link(action, director.cgihome)
        return url
    
    from pyre.db._reference import reference
    def getSelected(disp):
        return {
            'selected': str(int(disp.id==selected.id)),
            'value': disp.id,
            }
        
    import operator
    generators = {
        'id': operator.attrgetter('id'),
        'origin': getOrigin,
        'matter': getMatter,
        'creationDate': getCreationDate,
        'selected': getSelected,
        }
    
    class D: pass
    def d(s):
        r = D()
        for attr, g in generators.iteritems():
            value = g(s)
            setattr(r, attr, value)
            continue
        return r
    data = [d(j) for j in dispersions]

    class view(View):
        
        columns = [
            View.Column(id='col1',label='id', measure='id'),
            View.Column(id='col2',label='Origin', measure='origin'),
            View.Column(id='col3',label='Matter', measure='matter'),
            View.Column(id='col5',label='Date created', measure='creationDate'),
            ]

        if selected:
            from vnf.components.DBObjectForm import formactor_action_prefix as prefix
            name_for_form_action = '%s.%s' % (prefix, name)
            columns.append(
                View.Column(
                    id='col10',
                    label='Select',
                    measure='selected',
                    name_for_form_action=name_for_form_action,
                    )
                )

        editable = False

    table = Table(model, data, view)

    from pyre.components.Component import Component
    c = Component('table', 'table')
    c.table = table
    return c


# version
__id__ = "$Id$"

# End of file 
