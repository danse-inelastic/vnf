#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2007-2008  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from vnf.components.FormActor import FormActor as base, action, actionRequireAuthentication, action_link, InputProcessingError, AuthenticationError


class Actor(base):
    
    class Inventory(base.Inventory):

        import pyre.inventory
        id = pyre.inventory.str( 'id', default = '')
        response_type = pyre.inventory.str(
            'response-type',
            default='',
            validator=pyre.inventory.choice(['', 'json'])
            )


    def view(self, director):
        try:
            page = director.retrieveSecurePage( 'greet' )
        except AuthenticationError, error:
            return error.page

        main = page._body._content._main

        # populate the main column
        document = main.document(title='S(Q,E) #%s' % self.inventory.id)
        document.description = ''

        # read sqe
        sqe = director.clerk.getRecordByID(SQE, self.inventory.id)
        path = director.dds.abspath(sqe, SQE.histogramh5)
        
        import histogram.hdf as hh, histogram.hdf.utils as hhu
        hist = hh.load(path, hhu.getOnlyEntry(path))

        # present sqe
        import vnf.content
        options = {}
        plot = vnf.content.imagePlot(hist, options)
        document.add(plot)
        
        return page


    def edit(self, director, errors=None):
        try:
            page = director.retrieveSecurePage( 'greet' )
        except AuthenticationError, error:
            return error.page

        main = page._body._content._main

        # populate the main column
        document = main.document(title='Edit S(Q,E) #%s' % self.inventory.id)
        document.description = ''

        #
        if errors:
            p = document.paragraph(cls='error')
            p.text = errors

        formcomponent = self.retrieveFormToShow( 'sqe' )
        formcomponent.director = director
        
        # create form
        form = document.form(
            name='sqe',
            legend= 'S(Q,E)',
            action=director.cgihome,
            enctype="multipart/form-data")

        # specify action
        action = actionRequireAuthentication(
            actor = 'sqe', sentry = director.sentry,
            label = '', routine = 'verify',
            arguments = {'form-received': formcomponent.name } )
        from vnf.weaver import action_formfields
        action_formfields( action, form )

        # expand the form with fields of the data object that is being edited
        formcomponent.expand( form )

        return page


    def verify(self, director):
        page = director.retrieveSecurePage('greet')

        # save uploaded files
        uploads = director.getUploads()

        # make a temporary directory
        import tempfile
        tmpdir = tempfile.mkdtemp()

        #
        assert len(uploads)==1, "There should be 1 uploaded file. Got %d" % len(uploads)
        import os
        for filename, content in uploads.iteritems():
            path = os.path.join(tmpdir, filename)
            open(path, 'wb').write(content)
            continue

        response_type = self.inventory.response_type

        # make sure the uploaded file is what we want
        badfile = badhisth5file(path)
        if badfile:
            # if the file is no good, delete the file and the directory
            shutil.rmtree(tmpdir)

            # 
            if response_type == '':
                errors = [badfile]
                return self.edit(director, errors=errors)
            elif response_type == 'json':
                d = {'error': 'wrong file type'}
                return str(d)

        # create a SQE db record if necessary
        if not self.inventory.id:
            sqe = director.clerk.newOwnedObject(SQE)
        else:
            sqe = director.clerk.getRecordByID(SQE, self.inventory.id)
            
        # and save the data file with it
        directory = director.dds.abspath(sqe)
        os.makedirs(directory)
        os.rename(path, director.dds.abspath(sqe, filename=SQE.histogramh5))

        # remove the temporary directory
        shutil.rmtree(tmpdir)

        # prepare response
        if response_type == 'json':
            response = {'sqe': sqe.id}
            return str(response)

        if response_type == '':
            self.inventory.id = sqe.id
            return self.view(director)
        
        raise RuntimeError, 'unknown response type: %s' % response_type
    

import shutil, os
from vnf.dom.ins.SQE import SQE


def badhisth5file(filename):
    #
    if not filename.endswith('.h5'): return "File does not have correct extension: .h5"

    # openable?
    try:
        import histogram.hdf as hh, histogram.hdf.utils as hhu
        hist = hh.load(filename, hhu.getOnlyEntry(filename))
    except Exception, err:
        return "File cannot be opened or file has more than one entries. %s: %s" % (
            err.__class__.__name__, err)

    # axes
    if len(hist.axes())!=2: return "Histogram must have 2 axes. Got %d" % len(hist.axes())
    try:
        hist.axisFromName('Q')
    except:
        return "Histogram does not have Q axis"
    
    try:
        hist.axisFromName('energy')
    except:
        return "Histogram does not have energy axis"

    return


def actor():
    return Actor('sqe')


# version
__id__ = "$Id: Login.py,v 1.1.1.1 2006-11-27 00:09:47 aivazis Exp $"

# End of file 
