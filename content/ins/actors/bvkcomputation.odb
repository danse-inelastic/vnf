#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2007-2008  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from vnf.components.FormActor import FormActor as base, action, actionRequireAuthentication, action_link, InputProcessingError, AuthenticationError


class Actor(base):
    
    class Inventory(base.Inventory):

        import pyre.inventory
        id = pyre.inventory.str( 'id', default = '')


    def view(self, director, id = None):
        try:
            page = director.retrieveSecurePage( 'computation' )
        except AuthenticationError, err:
            return err.page

        if id is None: id = self.inventory.id
        else: self.inventory.id = id

        computation = director.clerk.getBvKComputation(id)
        if not self._isConfigured(computation, director):
            actor = director.retrieveActor('bvkcomputationwizard')
            director.configureComponent(actor)
            director.inventory.actor = director.actor = actor
            director.inventory.routine = director.routine = routine = 'start'
            actor.inventory.type = 'bvkcomputations'
            actor.inventory.id = self.inventory.id
            return getattr(actor, routine)(director)

        main = page._body._content._main
        # populate the main column
        document = main.document(title='BvK computation %s' % id)

        p = document.paragraph()
        p.text = [
            'A BvK computation is a harmonic approximation of',
            'lattice dynamics.',
            'In BvK model, solid are modeled as atoms',
            'on springs.',
            'The following is the BvK model used in this BvK computatiion:',
            ]

        modeldoc = document.document(title='The BvK model')
        model = director.clerk.dereference(computation.model)
        self._view_model(model, modeldoc, director=director)

        compdoc = document.document(title='The computation')
        type = computation.type
        method = '_view_%s' % type

        handler = getattr(self, method)
        handler(computation, compdoc)

        job = director.clerk.dereference(computation.job)
        if isdone(job):
            if not computation.results_state or computation.results_state == 'retrieval failed':
                retrieve_computation_results(computation, director, debug=0)
                
            resdoc = document.document(title='Results')
            p = resdoc.paragraph()
            action = actionRequireAuthentication(
                actor = self.name, sentry = director.sentry,
                label = 'here',
                routine = 'view_results',
                id = id,
                )
            link = action_link( action, director.cgihome )
            p.text = [
                'To see the results of this computation, please click %s' % link,
                ]
        return page


    def view_results(self, director):
        try:
            page = director.retrieveSecurePage( 'computation' )
        except AuthenticationError, err:
            return err.page

        id = self.inventory.id
        computation = director.clerk.getBvKComputation(id)

        main = page._body._content._main
        # populate the main column
        document = main.document(title='BvK computation %s: results' % id)

        if computation.results_state in ['retrieving']:
            p = document.paragraph()
            p.text = [
                'I am still retrieving computation results,',
                'please check back in a few minutes....',
                ]
            return page
        
        type = computation.type
        method = '_view_%s_results' % type
        handler = getattr(self, method)
        handler(computation, document, director)
        
        return page


    def _isConfigured(self, computation, director):
        if not computation.model: return False
        if not computation.type: return False
        return True


    def _view_dos_results(self, computation, document, director):
        results = computation.results.dereference(director.clerk.db)

        # bad implementation ...
        # should have a visitor like pattern to do "viewing" depending on
        # the type of the result and put views together...
        dos = results[0][1]

        # make the dos object available locally
        director.dds.make_available(dos)
        # read the dos
        path = director.dds.abspath(dos, 'data.idf')
        x,y = _readdos(dos, director)
        
        import vnf.content
        data = x,y
        options = {}
        plot = vnf.content.plot_2d( data, options )
        
        document.contents.append( plot )
        return
    
    
    def _view_disp_results(self, computation, document, director):
        results = computation.results.dereference(director.clerk.db)

        # bad implementation ...
        # should have a visitor like pattern to do "viewing" depending on
        # the type of the result and put views together...
        dispersion = results[0][1]
        
        # make the DOS of the dispersion object available locally
        director.dds.make_available(dispersion, files=['DOS'])
        # read the dos
        path = director.dds.abspath(dispersion, filename='DOS')
        x,y = _readdos(path)
        
        import vnf.content
        data = x,y
        options = {}
        plot = vnf.content.plot_2d( data, options )
        
        document.contents.append( plot )
        p = document.paragraph()
        p.text = [
            'Under construction...',
            ]
        return


    def _view_directional_results(self, computation, document, director):
        p = document.paragraph()
        p.text = [
            'Under construction...',
            ]
        return


    def _view_dos(self, computation, document):
        p = document.paragraph()
        p.text = [
            'This compuation calculates phonon density of states (DOS)',
            'from the above BvK model.',
            'The parameters for this DOS computation is:',
            ]
        parameters = [
            'dE',
            ]
        for param in parameters:
            p = document.paragraph()
            p.text = [
                '%s: %s' % (param, getattr(computation, param)),
                ]
            continue

        return


    def _view_disp(self, computation, document):
        p = document.paragraph()
        p.text = [
            'Under construction...',
            ]
        return


    def _view_directional(self, computation, document):
        p = document.paragraph()
        p.text = [
            'Under construction...',
            ]
        return


    def _view_model(self, model, document, director=None):
        p = document.paragraph()
        p.text = [
            'The important things to a bvk model are:',
            'the atomic structure (crystal structure)',
            'and the force constants.',
            'The following piece of python code defines a bvk "system"',
            'by defining the atomic structure and force constants.',
            ]

        system = getSystem(model, director)
        
        form = document.form(name='', legend= '', action='')
        ta = form.textarea(
            id = '', name = '', label = 'BvK System',
            default = system,
            rows = 20)

        return




def _readdos(path):
    import os
    path = os.path.abspath(path)
    from vnf.components.ins.idf import DOS
    read = DOS.read(path)
    (filetype, version, comment), E, I = read
    return E,I


from vnf.components.ins.BvK import getSystem
from vnf.components.Job import isdone
from vnf.components.Computation import retrieve_results as retrieve_computation_results

def actor():
    return Actor('bvkcomputation')


# version
__id__ = "$Id: Login.py,v 1.1.1.1 2006-11-27 00:09:47 aivazis Exp $"

# End of file 
