# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                      California Institute of Technology
#                        (C) 2007  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from vnf.components.Form import Form as base
from vnf.components.JnlpFile import JnlpFile

class Form( base ):
#    class Inventory( base.Inventory ):
#
#        import pyre.inventory as inv
#        id = inv.str( 'id', default = '' )
#        id.meta['tip'] = 'A short description'
#        
#        short_description = inv.str(
#            'short_description', default = '' )
#        short_description.meta['tip'] = 'A short description'


    def expand(self, form, materialSimulationId = None):
        prefix = formactor_action_prefix
        
        jnlpFile = JnlpFile(resources=('GULP.jar', 'j2ssh.jar', 'commons-logging.jar'),
                            mainClass='javagulp.controller.JavaGULP',
                            programArguments = [materialSimulationId],
                            fileName='gulpLauncher')
        relativeLocationOfFile = jnlpFile.writeJnlp(self.director)
        
        p = form.paragraph()
        p.text = ['''The Gulp simulation package uses classical forcefield
        techniques for simulating larger systems.  Its capabilities include forcefields from 
        a large number of trial functions, phonon / molecular dynamics, experimental data fitting,
        and crystal property calculation.  A full list of its capabilities is given below.  This dynamics information 
        can be used in inelastic neutron scattering kernels and 
        to simulate a thermodynamically equilibrated structure which can be used to refine
        diffraction, sans, reflectometry, and engineering diffraction neutron scattering
        measurements.<br>''',
        '<div style="text-align: center;"><a href="'+relativeLocationOfFile+'"><img src="images/webstart.gif" alt="GulpUI"/></a></div>']
        p.text = ['''Press "Launch" above to activate the Gulp UI in Java Web Start mode.  Note you must have
        a Java Virtual Machine (JVM) installed somewhere on your computer.  Most OS's will automatically
        use the javaws application within a user's JVM to open the xml descripter (.jnlp file) that will be
        downloaded clientside.''',
        '''<ul>
  <li>System types
    <ul>
      <li>clusters (0-D)</li>
      <li>defects (0-D)</li>
      <li>polymers (1-D)</li>
      <li>line defects (1-D)</li>
      <li>surfaces (2-D)</li>
      <li>slabs (2-D)</li>
      <li>grain boundaries (2-D)</li>
      <li>bulk materials (3-D)</li>
    </ul>
  </li>
  <li>Energy minimisation
    <ul>
      <li>constant pressure / volume</li>
      <li>shell only relaxations (optical)</li>
      <li>breathing only relaxations</li>
      <li>symmetry adapted relaxation</li>
      <li>unrestrained relaxation</li>
      <li>constraining of internal and cell coordinates</li>
      <li>Newton/Raphson, conjugate gradients or Rational
Function Optimisers</li>
      <li>DFP or BFGS updating of the hessian</li>
      <li>automatic scanning of potential energy surfaces</li>
      <li>partial occupancies of sites allowed</li>
    </ul>
  </li>
  <li>Transition states
    <ul>
      <li>location of n th order stationary points</li>
      <li>mode following </li>
    </ul>
  </li>
  <li>Crystal properties
    <ul>
      <li>elastic constants</li>
      <li>bulk moduli </li>
      <li>Young's modulus</li>
      <li>Poisson's ratios</li>
      <li>shear moduli </li>
      <li>static dielectric constants</li>
      <li>high frequency dielectric constants</li>
      <li>refractive indices</li>
      <li>piezoelectric constants</li>
      <li>phonon frequencies</li>
      <li>non-analytic correction for gamma point modes</li>
      <li>phonon densities of states</li>
      <li>projected phonon densities of states</li>
      <li>phonon dispersion curves</li>
      <li>Patterson symmetry used in k space</li>
      <li>zero point vibrational energies</li>
      <li>entropy (constant volume)</li>
      <li>heat capacity (constant volume)</li>
      <li>Helmholtz free energy</li>
      <li>electrostatic potential</li>
      <li>electric field</li>
      <li>electric field gradients</li>
      <li>Born effective charges</li>
      <li>frequency dependent dielectric constant tensor </li>
      <li>reflectivity </li>
    </ul>
  </li>
  <li>Defects
    <ul>
      <li>Mott-Littleton method </li>
      <li>defect energies </li>
      <li>transition states for defect migration </li>
      <li>defect frequencies </li>
    </ul>
  </li>
  <li>Fitting
    <ul>
      <li>empirical fitting to elastic constants, bulk moduli,
static and high frequency dielectric constants, lattice energy,
piezoelectric constants, gradients, frequencies, electrostatic
potential and structure</li>
      <li>simultaneous relaxation of shell positions and radii
during fitting</li>
      <li>relax fitting - fit to displacements rather than to
gradients. This also means that the properties of the relax structures
are fitted</li>
      <li>fit to multiple structures simultaneously</li>
      <li>vary core/shell charge split</li>
      <li>vary all charges</li>
      <li>fit QM derived energy surfaces to obtain interatomic
potentials</li>
    </ul>
  </li>
  <li>Genetic algorithms for fitting/optimisation</li>
  <li>Molecular dynamics
    <ul>
      <li>NVE, NVT &amp; NPT ensembles</li>
      <li>shell model MD allowed </li>
      <li>extrapolation of shells for adiabatic algorithm</li>
    </ul>
  </li>
  <li><a href="http://www.dfrl.ucl.ac.uk/Potentials/"
 target="_blank">Libraries of potentials</a>
    <ul>
      <li>option available to have libraries of standard
potentials</li>
      <li>libraries available for zeolites and metal oxides
        <ul>
          <li><a
 href="https://www.ivec.org/gulp/libraries/catlow.lib"
 target="_blank">zeolites</a></li>
          <li><a
 href="https://www.ivec.org/gulp/libraries/bush.lib"
 target="_blank">metal oxides (Bush et al)</a></li>
          <li><a
 href="https://www.ivec.org/gulp/libraries/lewis.lib"
 target="_blank">metal oxides (Lewis and Catlow)</a></li>
          <li><a
 href="https://www.ivec.org/gulp/libraries/glass.lib"
 target="_blank">glasses</a></li>
          <li><a
 href="https://www.ivec.org/gulp/libraries/suttonchen.lib"
 target="_blank">metals (Sutton and Chen)</a></li>
          <li><a
 href="https://www.ivec.org/gulp/libraries/tersoff.lib"
 target="_blank">tersoff</a></li>
          <li><a
 href="https://www.ivec.org/gulp/libraries/garofalini.lib"
 target="_blank">garofalini</a></li>
          <li><a
 href="https://www.ivec.org/gulp/libraries/vashishta.lib"
 target="_blank">vashishta</a></li>
          <li><a
 href="https://www.ivec.org/gulp/libraries/dreiding.lib"
 target="_blank">dreiding</a></li>
          <li><a
 href="https://www.ivec.org/gulp/libraries/streitzmintmire.lib"
 target="_blank">streitzmintmire</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Shell models
    <ul>
      <li>dipolar</li>
      <li>spherical breathing</li>
    </ul>
  </li>
  <li>Electronegativity equalisation method
    <ul>
      <li>EEM model to determine charge distributions for
silicates and organic systems</li>
      <li>QEq model to determine charge distributions for all
elements</li>
    </ul>
  </li>
  <li>Structure analysis
    <ul>
      <li>bond lengths</li>
      <li>distances</li>
      <li>angles</li>
      <li>torsion angles</li>
      <li>density and cell volume</li>
    </ul>
  </li>
  <li>Structure manipulation
    <ul>
      <li>construct full cell from asymmetric unit</li>
      <li>create supercells</li>
    </ul>
  </li>
</ul>''']
        return





formactor_action_prefix = 'actor.form-received' # assumed actor is a form actor


def form(): return Form( 'gulp' )


# version
__id__ = "$Id$"

# End of file 
