# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                   Jiao Lin
#                      California Institute of Technology
#                        (C) 2007  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from vnf.components.Form import Form as base
from vnf.components.Actor import action_link, actionRequireAuthentication



class Form( base ):

    class Inventory( base.Inventory ):
        import pyre.inventory
        selected = pyre.inventory.str( 'selected' )
        pass # end of Inventory


    def legend(self):
        'return a legend string'
        return 'Select material'


    def expand(self, form):
        '''expand an existing form with fields from this component'''

        director = self.director

        p = form.paragraph()
        p.text = [
            'Select from following list of materials',
            ]

        prefix = formactor_action_prefix

        matters = _findMatters(director)
        from vnf.utils.uniquelist import uniquelist
        matters = uniquelist(matters, idfun=lambda matter: hash(matter, director.clerk.db))
        
        # previous selection
        from vnf.dom.registry import tableRegistry
        from pyre.db._reference import fromString
        selected = self.inventory.selected
        self._debug.log('selected=%s' % selected)
        if selected:
            reference = fromString(selected, tableRegistry)
            previous_selected_matter = director.clerk.dereference(reference)
        else:
            previous_selected_matter = 'no selection'
        
        # the table for the matters
        l = form.literal()
        l.text = ['<h5>Materials</h5>']

        p = form.paragraph()
        p.text = ['Please select a material from the following table.']
        
        options = {
            'selected': previous_selected_matter,
            'name': 'selected',
            }
        table = director.retrieveComponent(
            'matters',
            factory="table",
            args=[matters, director, options],
            vault=['tables']).table
        form.contents.append(table)
        return


    def processUserInputs(self):
        'process user inputs and save them to db'
        selected = self.inventory.selected
        return selected.split(separator)


    def __init__(self, name = None):
        if name is None:
            name = 'selectmaterial'

        base.__init__(self, name)

        return
    
    pass # end of Form

from vnf.dom.hash import hash


def describe(matter, director):
    s = '%s: %s' % (
        matter.short_description or matter.chemical_formula, matter.__class__.__name__)
    #s = '(%s)' % hash(matter, director.clerk.db)
    return s

def _findMatters(director):
    from vnf.dom import mattertables
    tables = mattertables()
    ret = []
    where = "creator='vnf' or creator='%s'" % director.sentry.username
    for t in tables: ret += director.clerk.db.fetchall(t, where=where)
    return ret


separator = '###'

formactor_action_prefix = 'actor.form-received' # assumed actor is a form actor


def form(): return Form()


# version
__id__ = "$Id$"

# End of file 
