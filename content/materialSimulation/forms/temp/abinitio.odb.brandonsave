# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                      California Institute of Technology
#                        (C) 2007  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from vnf.components.Form import Form as base
from vnf.components.Actor import actionRequireAuthentication, action_link
from vnf.components.DBObjectForm import formactor_action_prefix
from vnf.components.misc import partition

class Form( base ):

    class Inventory( base.Inventory ):

        import pyre.inventory as inv
        id = inv.str( 'id', default = '' )
        
        short_description = inv.str('short_description', default = '' )
        short_description.meta['tip'] = 'A short description'
        
        engine = inv.str('engine', default='vasp')
        engine.validator=inv.choice(['vasp', 'ab init'])
        engine.meta['tip'] = 'Ab initio engine'
        
        xcFunctional = inv.str('xcFunctional', default='PAW-PBE')
        xcFunctional.meta['tip'] = 'Exchange correlation functional'
        
        kineticEnergyCutoff = inv.float('kineticEnergyCutoff', default=140.0)
        kineticEnergyCutoff.meta['tip'] = 'Kinetic energy cutoff'

        #monkhorstPackMesh.meta['tip'] = 'Monkhorst pack mesh'
        nKx = inv.int('nKx')
        nKy = inv.int('nKy')
        nKz = inv.int('nKz')
        

    DBTable = 'abinitio'
        
    def expand(self, form):
        '''expand an existing form with fields from this component'''
        prefix = formactor_action_prefix

        id_field = form.hidden(
            name = '%s.id' % prefix, value = self.inventory.id)

#        for property in self.parameters:
#        
#            value = getattr( record, property )
#            exec 'self.inventory.%s = value' % property
#            value = tostr( getattr(self.inventory, property) )
#            
#            field = form.text(
#                id = property,
#                name='%s.%s' % (prefix, property),
#                label=property,
#                value = value)
#            
#            descriptor = getattr(self.Inventory, property)
#            tip = descriptor.meta.get('tip')
#            if tip:
#                field.help = tip
        record = self.getRecord()
        
        self.short_description = form.text(
            id = 'text0',
            name='%s.short_description'% prefix,
            label='Name of this calculation',
            value = record.short_description)
        
#        p = form.paragraph()
#        p.text = ['<h2>Electronic structure settings</h2>']

#drop down menu for abinitio engine: [vasp, (abinit)]
        choices=['vasp','abinit (not completely functional)']

        # temporary hack to disallowing access to vasp
        director = self.director
        blacklist = ['demo', 'reviewer']
        if director.sentry.username in blacklist:
            del choices[choices.index('vasp')]

        entries=zip(choices,choices)

        eng=str(record.engine)
        engine = form.selector(
            id='selector1',
            name = '%s.engine'%prefix,
            entries = entries,
            label = 'Electronic Structure Engine',
            selected = eng)    

#drop down menu for runtype
        choices = ['energy','optimization (not completely functional)','md (not completely functional)']
        #entries = 

        default = str(record.runType)
        engine = form.selector(
            id='selector3',
            name = '%s.runType'%prefix,
            entries = zip(choices,choices),
            label = 'Type of run',
            selected = default)    


        # generate pp boxes for each species 
        choices=[
            'PAW-PBE', 
            'PAW-GGA', 
            'PAW-LDA',
            'USPP-GGA',
            'USPP-LDA',
            ]
        entries=zip(choices, choices)

        record = self.getRecord()
        matter = record.matter
        matter = self.director.clerk.dereference(matter)
        atom_symbols = partition(matter.atom_symbols)
        
        for atomList in atom_symbols:
            species = atomList[0]
            xcFunctional = form.selector(
                id='selector2',
                name = '%s.xcFunctional'%prefix,
                entries = entries,
                label = 'Exchange correlation functional',
                selected = record.xcFunctional,
                )
            
# this is not strictly necessary because each POTCAR file contains some pretty good default cutoffs--only *very* advanced users
# might want to change this.
#        kineticEnergyCutoff = form.text(
#            id = 'text1',
#            name='%s.kineticEnergyCutoff' % prefix,
#            label='Kinetic energy cutoff (eV)',
#            value = str(record.kineticEnergyCutoff))
        
        box = form.box()
        nKx = box.text(
            id = 'text2',
            name='%s.nKx' % prefix,
            label = 'Number of k-points (a*)',
            value = str(record.monkhorstPackMesh[0])) 
        nKy = box.text(
            id = 'text3',
            name='%s.nKy' % prefix,
            label = 'Number of k-points (b*)',
            value = str(record.monkhorstPackMesh[1]))       
        nKz = box.text(
            id = 'text4',
            name='%s.nKz' % prefix,
            label = 'Number of k-points (c*)',
            value = str(record.monkhorstPackMesh[2]))   
        help = form.paragraph()
        help.text = ['<a href=http://cms.mpi.univie.ac.at/vasp/vasp/node60.html>help on kpoint selection</a>'] 


        

    def processUserInputs(self):
        record = self.getRecord()
        props = [
            'short_description',
            'engine',
            'xcFunctional',
            #'kineticEnergyCutoff',
            ]
        for prop in props:
            value = getattr(self.inventory, prop)
            setattr(record, prop, value)
            continue

        record.monkhorstPackMesh = [self.inventory.nKx, self.inventory.nKy, self.inventory.nKz]
        self.director.clerk.updateRecord(record)
        return record
    
    
    def getRecord(self):
        'get DB record'
        return self.director.clerk.getRecordByID( self.DBTable, self.inventory.id )
    
    


def form(): return Form( 'abinitio' )


# version
__id__ = "$Id$"

# End of file 
