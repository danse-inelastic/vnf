# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                      California Institute of Technology
#                        (C) 2007  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from vnf.components.Form import Form as base
from vnf.components.Actor import actionRequireAuthentication, action_link
from vnf.components.DBObjectForm import formactor_action_prefix

class Form( base ):

    class Inventory( base.Inventory ):

        import pyre.inventory as inv
        
        short_description = inv.str('short_description', default = '' )
        short_description.meta['tip'] = 'A short description'
        
        #trajectoryName = inv.str('trajectoryName', default='')
        units = inv.str('units', default='nm')
        weights = inv.str('weights', default='mass')


    DBTable = 'vacfcomputations'
        
    def expand(self, form):
        '''expand an existing form with fields from this component'''
        prefix = formactor_action_prefix

        record = self.getRecord()
        
        self.short_description = form.text(
                id = 'text0',
                name='%s.short_description' % prefix,
                label='Name of this calculation (optional)',
                value = record.short_description)
        
#        p = form.paragraph()
#        p.text = ['<h2>Electronic structure settings</h2>']

#drop down menu for units--I think this is for the input file...in an ideal world,
# this would not be necessary since the units should be embedded in the input file, we'll
# fix this later...
        choices=['nm','Ang']
        entries=enumerate(choices)
        units = form.selector(id='selector1',
                name = '%s.units' % prefix,
                entries = entries,
                label = 'Units',
                selected = str(record.units))    

        choices=['mass','equal weighting','incoherent cross section', 'coherent cross section']
        entries=enumerate(choices)
        weights = form.selector(id='selector2',
                name = '%s.weights' % prefix,
                entries = entries,
                label = 'weights of the atoms',
                selected = str(record.weights))  


    def processUserInputs(self):
        record = self.getRecord()
        props = [
            'units',
            'weights',
            ]
        for prop in props:
            value = getattr(self.inventory, prop)
            setattr(record, prop, value)
            continue
        self.director.clerk.updateRecord(record)
        return record
    
    
    def getRecord(self):
        'get DB record'
        return self.director.clerk.getRecordByID( self.DBTable, self.inventory.id )
    
    


def form(): return Form( 'velocityAutocorrelation' )


# version
__id__ = "$Id$"

# End of file 
