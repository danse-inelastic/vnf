# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                   Jiao Lin
#                      California Institute of Technology
#                        (C) 2007  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from vnf.components.Form import Form as base

from vnf.components.MaterialSimulationEngine import engines
engines = engines()


class Form( base ):

    class Inventory( base.Inventory ):

        import pyre.inventory as inv
        analysisType = inv.str('analysisType',default=engines['vacf'].id)
        #type.validator=inv.choice([e.id for e in engines])
        analysisType.meta['tip'] = 'type of analysis engine'
        
        #kernel_id = inv.str( 'kernel_id' )

    def expand(self, form):
        '''expand an existing form with fields from this component'''
        
        p = form.paragraph()
        p.text = ['''Build on a base calculation by performing additional dynamics calculations or analysis...''']  

        p = form.paragraph()
        p.text = ['<h2>Sample Analysis</h2>']        
        p = form.paragraph()
        p.text = ['''   Using previous dynamics, perform virtual measurements of diffusion coefficients, mean square displacements, 
        velocity autocorrelation functions, elastic incoherent structure factors...''']
        self.engineRadioButton(form, engines['vacf'])
        
        p = form.paragraph()
        p.text = ['<h2>Raw Scattering Functions</h2>']        
        p = form.paragraph()
        p.text = ['''Calculate raw scattering intensities for input to Monte Carlo instrument simulation.''']
        
        

    def engineRadioButton(self, form, engine):
        prefix = formactor_action_prefix
        name = '%s.%s' % (formactor_action_prefix, 'analysisType')
        default = self.inventory.analysisType
        
        id = engine.id
        label = engine.short_description
        kwds = {
                'id':'radio'+id,
                'name':name,
                'label':label,
                'value':id,
                }
        if engine.id == default: kwds['checked']=True
        rb = form.radio(**kwds)
        return rb
    

    def processUserInputs(self):
        'process user input '
        return self.inventory.analysisType


#formactor_action_prefix = 'actor.form-received' # assumed actor is a form actor
from vnf.components.DBObjectForm import formactor_action_prefix

def form(): return Form( 'selectAnalysisEngine' )


# version
__id__ = "$Id$"

# End of file 
