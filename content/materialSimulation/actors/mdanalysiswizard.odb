#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                  Jiao Lin
#                     California Institute of Technology
#                       (C) 2008  All Rights Reserved
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from vnf.components.MaterialSimulationWizard import \
     actionRequireAuthentication, action_link, AuthenticationError, InputProcessingError

from vnf.components.ChainWizard import ChainWizard

#from vnf.dom.MdAnalysis import MdAnalysis
from vnf.dom.ins.VacfComputation import VacfComputation
    
class MdAnalysisWizard(ChainWizard):
    

    class Inventory(ChainWizard.Inventory):
        
        import pyre.inventory as inv
        
        pass

    def configureSimulation(self, director):
        #simType = self.inventory.simType = 'mdanalysis'
        #self.inventory.simType = 'vacfcomputations'

        # get the simulation simId
        simulation = self._getSimulation(director)
        if not simulation:
            raise RuntimeError, '%s: %s' % (self.inventory.simType, self.inventory.simId)
        self.inventory.simId = simulation.id
        
        try:
            page = self._retrievePage(director)
        except AuthenticationError, err:
            return err.page
        
        main = page._body._content._main
        document = main.document(title='Calculate a velocity autocorrelation coefficient' )

        formcomponent = self.retrieveFormToShow( 'velocityAutocorrelation')
        formcomponent.director = director
        formcomponent.inventory.simId = self.inventory.simId
        # build the form form
        form = document.form(name='', action=director.cgihome)
        # specify action
        action = actionRequireAuthentication(          
            actor = 'mdanalysiswizard', 
            sentry = director.sentry,
            routine = 'verifyConfiguration',
            simId=self.inventory.simId, 
            simType=self.inventory.simType,
            arguments = {'form-received': formcomponent.name },
            )
        from vnf.weaver import action_formfields
        action_formfields( action, form )
        # expand the form with fields of the data object that is being edited
        formcomponent.expand( form )
        next = form.control(name='submit',type="submit", value="next")
        return page


    def verifyConfiguration(self, director):
        try:
            page = self._retrievePage(director)
        except AuthenticationError, err:
            return err.page

        simulation = self._getSimulation(director)
        return self.readyForSubmission(director)

    
#    def sqe(self, director):
        
        #might want to reference this method from the redirect in gulpsimulationwizard:
#            def verifySimulation(self, director):
#        try:
#            page = self._retrievePage(director)
#        except AuthenticationError, err:
#            return err.page
#        # eventually have some sort of gulp simulation verification
#
#        # this is a bit weird. the type is the table name. but usually
#        # table name has a 's' at the end, and it is not desirable.
#        # the following code takes the table class name.
#        table = director.clerk._getTable('sqefrommd')
#        
#        sqefrommd = director.clerk.newOwnedObject(table)
#        
#        actor = 'sqefrommdwizard'
#        routine = 'configureSimulation'
#        return director.redirect(actor, routine, simId=sqefrommd.id, type=sqefrommd.name)
        
        


def actor():
    return MdAnalysisWizard('mdanalysiswizard')


# version
__id__ = "$Id$"

# End of file 
