#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                  Jiao Lin
#                     California Institute of Technology
#                       (C) 2008  All Rights Reserved
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from vnf.components.MaterialSimulationWizard import \
     actionRequireAuthentication, action_link, AuthenticationError, InputProcessingError

from vnf.components.MaterialSimulationWizard import MaterialSimulationWizard as base



from vnf.dom.GulpSimulation import GulpSimulation

    
class GulpWizard(base):
    

    class Inventory(base.Inventory):
        
        import pyre.inventory as inv
        
        librarycontent = inv.str('librarycontent')
        libraryname = inv.str('libraryname')
        configurations = inv.str('configurations')
        pass

    def configureSimulation(self, director):
        type = self.inventory.type = 'gulpsimulations'

        simulation = self._getSimulation(director)
        id = self.inventory.id = simulation.id

        # make sure material is defined
        if not self._materialDefinedForSimulation(simulation, director):
            return self._needMaterialAlert(director)
        
        try:
            page = director.retrieveSecurePage( 'genericMaterialSimulationWizard' )
        except AuthenticationError, err:
            return err.page
        
        main = page._body._content._main
        document = main.document(title='Atomic-level Simulation with Forcefields' )

        args = {
            'simulationId': id,
            'matterId':simulation.matter.id,
            }
        callbackArgs = {
            'cgihome':director.cgihome,
            'sentry.username':director.sentry.username,
            'sentry.ticket':director.sentry.ticket,
            'actor': self.name,
            'routine': 'storeConfiguration',
            'actor.id': id,
            'actor.type': type,
            }
        args.update(callbackArgs)
        
        from vnf.components.JnlpFile import JnlpFile
        jnlpFile = JnlpFile(
            resources=('GULP.jar', 'j2ssh.jar', 'commons-logging.jar','pg74.216.jdbc3.jar'),
            mainClass='javagulp.controller.LaunchGulpUi',
            programArguments = args,
            fileName='gulpLauncher',
            )
        relativeLocationOfFile = jnlpFile.writeJnlp(director)
        
        p = document.paragraph()
        p.text = ['''The Gulp simulation package uses efficient forcefield
        techniques for simulating larger systems.  Its capabilities include forcefields from 
        a large number of trial functions, phonon / molecular dynamics / optimization, experimental data fitting,
        and crystal property calculation.  <br>''',
        '<center><a href="'+relativeLocationOfFile+'"><img src="images/webstart.gif" alt="GulpUi"/></a></center>']

        p = document.paragraph()
        p.text = ['''Press "Launch" above to activate the Gulp UI in Java Web Start mode.  Note you must have
        a Java Virtual Machine (JVM) installed.  If you do not, clicking "Launch" will likely cause your browser to alert you to this
        and install one automatically for you and use the javaws application within the JVM to open the xml descripter (.jnlp file) that will be
        downloaded clientside.''']

        action = actionRequireAuthentication(
            label = 'Continue',
            sentry = director.sentry,
            actor = 'gulpsimulationwizard', 
            routine = 'verifyConfiguration',
            id=id, type=type,
            )
        link = action_link(action, director.cgihome)

        p = document.paragraph()
        p.text = [link]
        
        return page


    def verifyConfiguration(self, director):
        try:
            page = self._retrievePage(director)
        except AuthenticationError, err:
            return err.page

        simulation = self._getSimulation(director)
        # make sure gulp simulation is configured
        if isConfigured(simulation, director):
            return self.readyForSubmission(director)
        return self.configureSimulation(director)


    def readyForSubmission(self, director):
        try:
            page = self._retrievePage(director)
        except AuthenticationError, err:
            return err.page

        id = self.inventory.id
        type = self.inventory.type
        
        main = page._body._content._main
        document = main.document(title='Atomic-level Simulation with Forcefields' )

        p = document.paragraph()
        p.text = ['Your gulp simulation #%s is ready for submission.' % id]
        
        p = document.paragraph()
        action = actionRequireAuthentication(
            label = 'start',
            actor = 'gulpsimulationwizard', 
            sentry = director.sentry,
            routine = 'submitSimulation',
            id=id, type=type,
            )
        submit_link = action_link(action, director.cgihome)
        
        action = actionRequireAuthentication(
            label = 'save it for latter submission',
            actor = 'gulpsimulationwizard', 
            sentry = director.sentry,
            routine = 'saveSimulation',
            id=id, type=type,
            )
        save_link = action_link(action, director.cgihome)
        
        action = actionRequireAuthentication(
            label = 'delete',
            actor = 'gulpsimulationwizard', 
            sentry = director.sentry,
            routine = 'cancel',
            id=id, type=type,
            )
        delete_link = action_link(action, director.cgihome)

        p.text = [
            'Your can %s this simulation, or %s, or %s it.' % (submit_link, save_link, delete_link),
            ]

        return page
        
    
    def storeConfiguration(self, director):
        try:
            page = self._retrievePage(director)
        except AuthenticationError, err:
            return err.page

        configurations = self.inventory.configurations
        libraryname = self.inventory.libraryname
        librarycontent = self.inventory.librarycontent
        
        simulation = self._getSimulation(director)

        #create data directory for the simulation if necessary
        datadir = director.dds.abspath(simulation)
        if not os.path.exists(datadir): os.makedirs(datadir)

        configurationfile = director.dds.abspath(simulation, filename=GulpSimulation.CONFIGURATION_FILE)
        open(configurationfile, 'w').write(configurations)

        libpointerfile = director.dds.abspath(simulation, filename=GulpSimulation.LIBPOINTER_FILE)
        open(libpointerfile, 'w').write(libraryname)

        libfile = director.dds.abspath(simulation, filename=libraryname)
        open(libfile, 'w').write(librarycontent)

        return 'success'


    pass # end of GulpWizard


import os
def isConfigured(sim, director):
    path = director.dds.abspath(sim, filename=GulpSimulation.CONFIGURATION_FILE)
    if os.path.exists(path): return True
    return False


def actor():
    return GulpWizard('gulpsimulationwizard')


# version
__id__ = "$Id$"

# End of file 
