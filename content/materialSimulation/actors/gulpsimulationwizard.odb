#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                  Jiao Lin
#                     California Institute of Technology
#                       (C) 2008  All Rights Reserved
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from vnf.components.MaterialSimulationWizard import \
     actionRequireAuthentication, action_link, AuthenticationError, InputProcessingError

from vnf.components.MaterialSimulationWizard import MaterialSimulationWizard as base


GULP_INPUT_FILE = 'gulp.in'


    
class GulpWizard(base):
    

    class Inventory(base.Inventory):
        
        import pyre.inventory as inv
        
        librarycontent = inv.str('librarycontent')
        libraryname = inv.str('libraryname')
        configurations = inv.str('configurations')

        pass


    def configureSimulation(self, director):
        type = self.inventory.type = 'gulpsimulations'

        simulation = self._getSimulation(director)
        id = self.inventory.id = simulation.id

        # make sure material is defined
        if not self._materialDefinedForSimulation(simulation, director):
            return self._needMaterialAlert(director)
        
        try:
            page = director.retrieveSecurePage( 'genericMaterialSimulationWizard' )
        except AuthenticationError, err:
            return err.page
        
        main = page._body._content._main
        document = main.document(title='Atomic-level Simulation with Forcefields' )

        args = {
            'simulationId': id,
            'matterId':simulation.matter.id,
            }
        callbackArgs = {
            'cgihome':director.cgihome,
            'sentry.username':director.sentry.username,
            'sentry.ticket':director.sentry.ticket,
            'actor': self.name,
            'routine': 'storeConfiguration',
            'actor.id': id,
            'actor.type': type,
            }
        args.update(callbackArgs)
        
        from vnf.components.JnlpFile import JnlpFile
        jnlpFile = JnlpFile(
            resources=('GULP.jar', 'j2ssh.jar', 'commons-logging.jar','pg74.216.jdbc3.jar'),
            mainClass='javagulp.controller.LaunchGulpUi',
            programArguments = args,
            fileName='gulpLauncher',
            )
        relativeLocationOfFile = jnlpFile.writeJnlp(director)
        
        p = document.paragraph()
        p.text = ['''The Gulp simulation package uses classical foarcefield
        techniques for simulating larger systems.  Its capabilities include forcefields from 
        a large number of trial functions, phonon / molecular dynamics, experimental data fitting,
        and crystal property calculation.  This dynamics information 
        can be used in inelastic neutron scattering kernels and 
        to simulate a thermodynamically equilibrated structure which can be used to refine
        diffraction, sans, reflectometry, and engineering diffraction neutron scattering
        measurements.<br>''',
        '<center><a href="'+relativeLocationOfFile+'"><img src="images/webstart.gif" alt="GulpUI"/></a></center>']

        p = document.paragraph()
        p.text = ['''Press "Launch" above to activate the Gulp UI in Java Web Start mode.  Note you must have
        a Java Virtual Machine (JVM) installed somewhere on your computer.  Most OS's will automatically
        use the javaws application within a user's JVM to open the xml descripter (.jnlp file) that will be
        downloaded clientside.''']

        action = actionRequireAuthentication(
            label = 'Continue',
            sentry = director.sentry,
            actor = 'gulpsimulationwizard', 
            routine = 'verifyConfiguration',
            id=id, type=type,
            )
        link = action_link(action, director.cgihome)

        p = document.paragraph()
        p.text = [link]
        
        return page


    def verifyConfiguration(self, director):
        try:
            page = self._retrievePage(director)
        except AuthenticationError, err:
            return err.page

        simulation = self._getSimulation(director)
        # make sure gulp simulation is configured
        if isConfigured(simulation, director):
            return self.readyForSubmission(director)
        return self.configureSimulation(director)


    def readyForSubmission(self, director):
        try:
            page = self._retrievePage(director)
        except AuthenticationError, err:
            return err.page

        id = self.inventory.id
        type = self.inventory.type
        
        main = page._body._content._main
        document = main.document(title='Atomic-level Simulation with Forcefields' )

        p = document.paragraph()
        p.text = ['Your gulp simulation #%s is ready for submission.' % id]
        
        p = document.paragraph()
        action = actionRequireAuthentication(
            label = 'start',
            actor = 'abinitiowizard', 
            sentry = director.sentry,
            routine = 'submitSimulation',
            id=id, type=type,
            )
        submit_link = action_link(action, director.cgihome)
        
        action = actionRequireAuthentication(
            label = 'save it for latter submission',
            actor = 'abinitiowizard', 
            sentry = director.sentry,
            routine = 'saveSimulation',
            id=id, type=type,
            )
        save_link = action_link(action, director.cgihome)
        
        action = actionRequireAuthentication(
            label = 'delete',
            actor = 'abinitiowizard', 
            sentry = director.sentry,
            routine = 'cancel',
            id=id, type=type,
            )
        delete_link = action_link(action, director.cgihome)

        p.text = [
            'Your can %s this simulation, or %s, or %s it.' % (submit_link, save_link, delete_link),
            ]

        return page
        
    
    def storeConfiguration(self, director):
        try:
            page = self._retrievePage(director)
        except AuthenticationError, err:
            return err.page

        configurations = self.inventory.configurations
        library = self.inventory.libraryname, self.inventory.librarycontent
        
        simulation = self._getSimulation(director)

        #create data directory for the simulation if necessary
        datadir = director.dds.abspath(simulation)
        if not os.path.exists(datadir): os.makedirs(datadir)
            
        open(director.dds.abspath(simulation, filename=GULP_INPUT_FILE), 'w').write(configurations)

        filename, content = library
        open(director.dds.abspath(simulation, filename=filename), 'w').write(content)

        return 'success'


    pass # end of GulpWizard


import os
def isConfigured(sim, director):
    path = director.dds.abspath(sim, filename=GULP_INPUT_FILE)
    if os.path.exists(path): return True
    return False


def actor():
    return GulpWizard('gulpsimulationwizard')


# version
__id__ = "$Id$"

# End of file 
