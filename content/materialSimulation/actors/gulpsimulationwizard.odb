#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                  Jiao Lin
#                     California Institute of Technology
#                       (C) 2008  All Rights Reserved
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from vnf.components.MaterialSimulationWizard import \
     actionRequireAuthentication, action_link, AuthenticationError, InputProcessingError

from vnf.components.MaterialSimulationWizard import MaterialSimulationWizard

from vnf.dom.GulpSimulation import GulpSimulation

    
class GulpSimulationWizard(MaterialSimulationWizard):
    

    class Inventory(MaterialSimulationWizard.Inventory):
        
        import pyre.inventory as inv
        
        librarycontent = inv.str('librarycontent')
        libraryname = inv.str('libraryname')
        configurations = inv.str('configurations')
        runtype = inv.str('runtype')

    def configureSimulation(self, director):
        type = self.inventory.type = 'gulpsimulations'

        simulation = self._getSimulation(director)
        id = self.inventory.id = simulation.id

        # make sure material is defined
        if not self._materialDefinedForSimulation(simulation, director):
            return self._needMaterialAlert(director)
        
        try:
            page = director.retrieveSecurePage( 'genericMaterialSimulationWizard' )
        except AuthenticationError, err:
            return err.page
        
        main = page._body._content._main
        document = main.document(title='Atomic-level Simulation with Forcefields' )

        args = {
            'simulationId': id,
            'matterId':simulation.matter.id,
            }
        callbackArgs = {
            'cgihome':director.cgihome,
            'sentry.username':director.sentry.username,
            'sentry.ticket':director.sentry.ticket,
#            'actor': self.name,
            'actor.id': id,
#            'actor.type': type,
#            'actor.runtype':simulation.runtype
            }
        args.update(callbackArgs)
        
        from vnf.components.JnlpFile import JnlpFile
        jnlpFile = JnlpFile(
            resources=('GULP.jar', 'j2ssh.jar', 'commons-logging.jar','pg74.216.jdbc3.jar'),
            mainClass='javagulp.controller.LaunchGulpUi',
            programArguments = args,
            fileName='gulpLauncher',
            )
        relativeLocationOfFile = jnlpFile.writeJnlp(director)
        
        p = document.paragraph()
        p.text = ['''The Gulp simulation package uses efficient forcefield
        techniques for simulating larger systems.  Its capabilities include forcefields from 
        a large number of trial functions, phonon / molecular dynamics / optimization, experimental data fitting,
        and crystal property calculation.  <br>''',
        '<center><a href="'+relativeLocationOfFile+'"><img src="images/webstart.gif" alt="GulpUi"/></a></center>']

        p = document.paragraph()
        p.text = ['''Press "Launch" above to activate GulpUi in Java Web Start mode.  Note: you must have
        a Java Virtual Machine (JVM) installed.  If you do not, clicking "Launch" will likely cause your browser to alert you to this
        and install one automatically.  It is highly recommended to use the JVM from Sun Microsystems.  The OpenJDK (default on Ubuntu OS)
        does not work due to bugs in their webstart launcher.''']

        action = actionRequireAuthentication(
            label = 'Continue',
            sentry = director.sentry,
            actor = 'gulpsimulationwizard', 
            routine = 'verifyConfiguration',
            id=id, type=type,
            )
        link = action_link(action, director.cgihome)

        p = document.paragraph()
        p.text = [link]
        
        return page


    def verifyConfiguration(self, director):
        try:
            page = self._retrievePage(director)
        except AuthenticationError, err:
            return err.page

        gulpSimulation = self._getSimulation(director)
        
        # make sure gulp simulation is configured
        if isConfigured(gulpSimulation, director):
            return self.readyForSubmission(director)
        return self.configureSimulation(director)


    def readyForSubmission(self, director):
        try:
            page = self._retrievePage(director)
        except AuthenticationError, err:
            return err.page

        id = self.inventory.id
        type = self.inventory.type
        
        main = page._body._content._main
        document = main.document(title='Atomic-level Simulation with Forcefields' )

        p = document.paragraph()
        p.text = ['Your gulp simulation #%s is ready for submission.' % id]
        
        p = document.paragraph()
        action = actionRequireAuthentication(
            label = 'start',
            actor = 'gulpsimulationwizard', 
            sentry = director.sentry,
            routine = 'submitSimulation',
            id=id, type=type,
            )
        submit_link = action_link(action, director.cgihome)
        
        action = actionRequireAuthentication(
            label = 'save it for latter submission',
            actor = 'gulpsimulationwizard', 
            sentry = director.sentry,
            routine = 'saveSimulation',
            id=id, type=type,
            )
        save_link = action_link(action, director.cgihome)
        
        action = actionRequireAuthentication(
            label = 'delete',
            actor = 'gulpsimulationwizard', 
            sentry = director.sentry,
            routine = 'cancel',
            id=id, type=type,
            )
        delete_link = action_link(action, director.cgihome)

        p.text = [
            'You can %s this simulation, or %s, or %s it.' % (submit_link, save_link, delete_link),
            ]
        return page
        
    
    def storeInputFile(self, director):
        try:
            page = self._retrievePage(director)
        except AuthenticationError, err:
            return err.page

        configurations = self.inventory.configurations
        libraryname = self.inventory.libraryname
        # replace this next part with a movement of the library from the db to the job submission file
        #librarycontent = self.inventory.librarycontent
        
        simulation = self._getSimulation(director)
        
        #set simulation attributes
        simulation.runtype = self.inventory.runtype
        potential = simulation.potential.dereference(director.clerk.db)
        potential.potential_name = libraryname
        director.clerk.updateRecord(potential)
        director.clerk.updateRecord(simulation)

        #create data directory for the simulation if necessary
        datadir = director.dds.abspath(simulation)
        if not os.path.exists(datadir): os.makedirs(datadir)

        configurationfile = director.dds.abspath(simulation, filename=GulpSimulation.CONFIGURATION_FILE)
        open(configurationfile, 'w').write(configurations)
        
        potentialPath = director.dds.abspath(potential, filename=potentialName)

#        libpointerfile = director.dds.abspath(simulation, filename=GulpSimulation.LIBPOINTER_FILE)
#        open(libpointerfile, 'w').write(libraryname)

        libfile = director.dds.abspath(simulation, filename=libraryname)
        open(libfile, 'w').write(librarycontent)

        return 'success'
    
    def storePotential(self, director):
        # quick hack to make sure we're authenticated
        try:
            page = self._retrievePage(director)
        except AuthenticationError, err:
            return err.page

        libraryname = self.inventory.libraryname
        librarycontent = self.inventory.librarycontent
        
        # look for the library
        from vnf.dom.GulpPotential import GulpPotential
        try:
            # if it already exists, just use it
            gulpPotential = director.clerk.getRecordByFieldname(GulpPotential, "potential_name", libraryname)
            # make sure the potential file is readable...
            #eventually: if not, delete the entry and throw exception?
            libfile = director.dds.abspath(gulpPotential, filename = libraryname)
            open(libfile, 'r')
        except:
            # if it doesn't exist, create a new one from this entry
            gulpPotential = director.clerk.newDbObject(GulpPotential)
            gulpPotential.potential_name = libraryname
            director.clerk.updateRecord(gulpPotential)
            
            #put the potential in the potentials subdirectory
            libfile = director.dds.abspath(gulpPotential, filename = libraryname)
            libDirectory,file = os.path.split(libfile)
            if not os.path.exists(libDirectory):
                try:
                    os.makedirs(libDirectory)
                except Exception, err:
                    raise RuntimeError, "unable to create directory %r. %s: %s" % (
                        self.path, err.__class__.__name__, err)
            open(libfile, 'w').write(librarycontent)
            #server = director.clerk.dereference(job.server)
            director.dds.remember(gulpPotential, files=[libraryname])#, server=server)
        
        #set simulation attributes
#        simulation = self._getSimulation(director)
#        simulation.LIBPOINTER_FILE = libraryname
#        director.clerk.updateRecord(simulation)
        return 'success'


import os
def isConfigured(sim, director):
    path = director.dds.abspath(sim, filename=GulpSimulation.CONFIGURATION_FILE)
    if os.path.exists(path): return True
    return False


def actor():
    return GulpSimulationWizard('gulpsimulationwizard')


# version
__id__ = "$Id$"

# End of file 
