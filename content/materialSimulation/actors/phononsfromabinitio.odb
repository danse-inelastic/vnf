#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2007-2008  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from vnf.components.FormActor import FormActor as base, action, actionRequireAuthentication, action_link, InputProcessingError, AuthenticationError
from vnf.weaver import action_href


class Actor(base):
    
    class Inventory(base.Inventory):

        import pyre.inventory
        id = pyre.inventory.str( 'id', default = '')
        abinitio_id = pyre.inventory.str('abinitio_id')
        
    table = 'phononsfromabinitio'

    def create(self, director):
        try:
            page = self._retrievePage(director)
        except AuthenticationError, err:
            return err.page

        if not self.inventory.abinitio_id: raise RuntimeError

        abinitio_id = self.inventory.abinitio_id
        abinitio = director.clerk.getRecordByID('abinitio', abinitio_id)

        computation = director.clerk.newOwnedObject(self.table)
        computation.abinitio = self.inventory.abinitio_id
        computation.matter = abinitio.matter
        director.clerk.updateRecord(computation)

        self.inventory.id = computation.id
        return self.edit(director)


    def edit(self, director, errors=None):
        try:
            page = self._retrievePage(director)
        except AuthenticationError, err:
            return err.page

        main = page._body._content._main
        # populate the main column
        document = main.document(title='Compute Phonons from Ab Initio Simulation')

        id = self.inventory.id
        
        formcomponent = self.retrieveFormToShow( 'phononsfromabinitio')
        formcomponent.director = director

        # build the form
        form = document.form(name='', action=director.cgihome)
        #  1. specify action
        action = actionRequireAuthentication(
            sentry = director.sentry,
            actor = 'phononsfromabinitio',
            routine = 'verifyConfiguration',
            id=id, 
            arguments = {'form-received': formcomponent.name },
            )
        from vnf.weaver import action_formfields
        action_formfields( action, form )
        
        #   2. expand the form with fields for the editee
        formcomponent.expand(form, id=id, errors=errors)

        # buttons
        next = form.control(name='submit',type="submit", value="next")
        
        return page


    def verifyConfiguration(self, director):
        try:
            page = self._retrievePage(director)
        except AuthenticationError, err:
            return err.page
        
        try:
            self.processFormInputs(director)
        except InputProcessingError, err:
            errors = err.errors
            self.form_received = None
            director.routine = 'edit'
            return self.edit( director, errors = errors )

        return self.createJob(director)
        

    def createJob(self, director):
        try:
            page = self._retrievePage(director)
        except AuthenticationError, err:
            return err.page

        if not self._readyForSubmission(director):
            return self._notReadyForSubmissionAlert(director)

        # job
        id = self.inventory.id
        computation = director.clerk.getRecordByID(self.table, id)
        jobref = computation.job

        if not jobref or not jobref.id:
            # create a new job
            from vnf.components.Job import new_job
            job = new_job(director)
            job.computation = computation
            director.clerk.updateRecord(job)
            
            computation.job = job
            director.clerk.updateRecord(computation)
        else:
            job = director.clerk.dereference(jobref)
            
        # redirect to job submission page
        actor = 'job'
        routine = 'view'
        return director.redirect(actor, routine, id = job.id)


    def view(self, director):
        try:
            page = self._retrievePage(director)
        except AuthenticationError, err:
            return err.page

        id = self.inventory.id

        computation = director.clerk.getRecordByID(self.table, id)
        if not self._isConfigured(computation, director):
            return self.edit(director)

        if not self._jobCreated(computation, director):
            return self.createJob(director)

        main = page._body._content._main
        # populate the main column
        document = main.document(title='Compute Phonons %s' % id)

        job = director.clerk.dereference(computation.job)

        p = document.paragraph()
        action = actionRequireAuthentication(
            label = job.id,
            sentry = director.sentry,
            actor = 'job', routine = 'view',
            id = job.id,
            )
        link = action_link(action, director.cgihome)
        p.text = [
            'The computation job for this simulation is %s' % link,
            ]

        configurationdoc = document.document(title='Configuration')
        self._view_configuration(computation, configurationdoc, director=director)

        if isdone(job):
            #if not computation.results_state or computation.results_state == 'retrieval failed':
            #retrieve_computation_results(computation, director, debug=0)
                
            resdoc = document.document(title='Results')
            p = resdoc.paragraph()
            action = actionRequireAuthentication(
                actor = self.name, sentry = director.sentry,
                label = 'here',
                routine = 'view_results',
                id = id,
                )
            link = action_link(action, director.cgihome)
            p.text = [
                'To see the results of this computation, please click %s' % link,
                ]

        return page


    def view_results(self, director):
        try:
            page = self._retrievePage(director)
        except AuthenticationError, err:
            return err.page

        id = self.inventory.id
        computation = director.clerk.getRecordByID(self.table, id)

        main = page._body._content._main
        # populate the main column
        document = main.document(title='Phonons from Ab Initio %s: results' % id)

        configurationdoc = document.document(title='Configuration')
        self._view_configuration(computation, configurationdoc, director=director)

        resultsdoc = document.document(title='Results')

        # results set
        resultsset = computation.results.dereference(director.clerk.db, asDict=True)
        
        # dos
        dos = resultsset.get('phonon dos')
        dosdoc = document.document(title='Phonon density of states')

        if not dos:
            try:
                self._addDOSRetrievalMonitor(director, dosdoc)
            except self.DOSRetrievalFailed:
                p = dosdoc.paragraph()
                p.text = ['Failed to retrieve phonon dos']
        else:
            dospath = director.dds.abspath(dos, 'data.idf')
            dosdata = _readDOSidf(dospath)
            
            import vnf.content
            options = {}
            plot = vnf.content.plot_2d( dosdata, options )
            
            dosdoc.contents.append( plot )

        # dispersion
        dispersion = resultsset.get('phonon dispersion')
        dispdoc = document.document(title='Phonon dispersion')
        if not dispersion:
            try:
                self._addDispersionRetrievalMonitor(director, dispdoc)
            except self.DispersionRetrievalFailed:
                p = dispdoc.paragraph()
                p.text = ['Failed to retrieve phonon dispersion']
        else:
            p = dispdoc.paragraph()
            viewdisp_action = actionRequireAuthentication(
                sentry = director.sentry,
                label = dispersion.id,
                actor = 'phonondispersion',
                routine = 'view',
                id = dispersion.id,
                )
            viewdisp_link = action_link(viewdisp_action, director.cgihome)
            p.text = [
                'Phonon dispersion: %s' % viewdisp_link,
                ]
        return page


    class DOSRetrievalFailed(Exception): pass
    def _addDOSRetrievalMonitor(self, director, document):
        # the computation
        id = self.inventory.id
        computation = director.clerk.getRecordByID(self.table, id)

        # the itask worker
        iworker = 'retrieve-phon-results-phonon-dos'

        # first check if there is itask running
        from vnf.dom.Computation import findPendingTask
        found = findPendingTask(computation, iworker=iworker, director=director)

        #
        if found == 'task failed':
            raise self.DOSRetrievalFailed

        # if no previous task found, create a new task
        if not found:

            from vnf.dom.ITask import createITask, ITask
            task = director.clerk.newDbObject(ITask)
            task = createITask(
                task.id,
                beneficiary = computation,
                worker = iworker,
                type = iworker,
                )
            director.clerk.updateRecord(task)

            # add this task to pending task list
            computation.pending_tasks.add(task, director.clerk.db, name=iworker)

            found = task

        # now we have a task
        task = found

        import vnf.content
        itaskmonitor = vnf.content.itaskMonitor(
            task.id,
            label = 'Fetching phonon DOS ...',
            sentry=director.sentry,
            )
        itaskmonitorid = itaskmonitor.id
        
        redirectaction = actionRequireAuthentication(
            sentry = director.sentry,
            label = '',
            actor = self.name,
            routine = 'view_results',
            id = self.inventory.id,
            )
        redirecturl = action_href(redirectaction, director.cgihome)
        itaskmonitor.finished_callback = '''
  function(data) {
    var monitor = $("#%(itaskmonitorid)s");
    
    if (data.state=="finished") {
      monitor.text("Please wait for this page to reload...");
      window.location = "%(redirecturl)s";
    }
  }
''' % locals()
        document.add(itaskmonitor)

        import vnf.content
        snippet = vnf.content.jssnippet()
        snippet.main = [
            '$("#%s").itaskmonitor("start");' % itaskmonitor.id,
            ]
        document.add(snippet)
        return        
    

    class DispersionRetrievalFailed(Exception): pass
    def _addDispersionRetrievalMonitor(self, director, document):
        # the computation
        id = self.inventory.id
        computation = director.clerk.getRecordByID(self.table, id)

        # the itask worker
        iworker = 'retrieve-phon-results-phonon-dispersion'

        # first check if there is itask running
        from vnf.dom.Computation import findPendingTask
        found = findPendingTask(computation, iworker=iworker, director=director)

        #
        if found == 'task failed':
            raise self.DispersionRetrievalFailed

        # if no previous task found, create a new task
        if not found:

            from vnf.dom.ITask import createITask, ITask
            task = director.clerk.newDbObject(ITask)
            task = createITask(
                task.id,
                beneficiary = computation,
                worker = iworker,
                type = iworker,
                )
            director.clerk.updateRecord(task)

            # add this task to pending task list
            computation.pending_tasks.add(task, director.clerk.db, name=iworker)

            found = task

        # now we have a task
        task = found

        import vnf.content
        itaskmonitor = vnf.content.itaskMonitor(
            task.id,
            label = 'Fetching phonon Dispersion ...',
            sentry=director.sentry,
            )
        itaskmonitorid = itaskmonitor.id
        
        redirectaction = actionRequireAuthentication(
            sentry = director.sentry,
            label = '',
            actor = self.name,
            routine = 'view_results',
            id = self.inventory.id,
            )
        redirecturl = action_href(redirectaction, director.cgihome)
        itaskmonitor.finished_callback = '''
  function(data) {
    var monitor = $("#%(itaskmonitorid)s");
    
    if (data.state=="finished") {
      monitor.text("Please wait for this page to reload...");
      window.location = "%(redirecturl)s";
    }
  }
''' % locals()
        document.add(itaskmonitor)

        import vnf.content
        snippet = vnf.content.jssnippet()
        snippet.main = [
            '$("#%s").itaskmonitor("start");' % itaskmonitor.id,
            ]
        document.add(snippet)
        return        


    def _jobCreated(self, computation, director):
        return computation.job and computation.job.id


    def _alertResultsNotFound(self, document, director):
        p = document.paragraph()
        p.text = [
            'Computation results not found',
            ]
        return 
        

    def _view_configuration(self, computation, document, director=None):
        p = document.paragraph()
        p.text = [
            'Phonon computation (from ab initio computations) %s' % computation.id,
            ]

        if computation.abinitio and computation.abinitio.id:
            abinitio = director.clerk.dereference(computation.abinitio)
            matter = director.clerk.dereference(abinitio.matter)
            
            p = document.paragraph()
            p.text = [
                'Material: %s' % (matter.short_description,),
                ]
            
            p = document.paragraph()
            action = actionRequireAuthentication(
                label = 'the abinitio computation %s' % abinitio.id,
                sentry = director.sentry,
                actor = 'abinitio', routine = 'view',
                id = abinitio.id,
                )
            link = action_link(action, director.cgihome)
            p.text = [
                'This phonon computation is based on %s.' % link
                ]
        else:
            p = document.paragraph()
            p.text = [
                'This phonon computation should be done on the basis of an Ab Initio',
                'computaton. Please start from selecting an Ab Initio computation',
                'that you have performed.',
                ]
        
        p = document.paragraph()
        p.text = [
            'Super cell: %s' % (computation.supercell,),
            ]

        p = document.paragraph()
        p.text = [
            'Displacement amplitude: %s' % (computation.displacementAmplitude,),
            ]

        p = document.paragraph()
        p.text = [
            'Q grid: %s' % (computation.qGrid,),
            ]

        return


    def _readyForSubmission(self, director):
        id = self.inventory.id
        computation = director.clerk.getRecordByID(self.table, id)

        if not computation.abinitio: return False
        if not computation.abinitio.id: return False
        if not self._isConfigured(computation, director): return False
        return True


    def _notReadyForSubmissionAlert(self, director):
        try:
            page = self._retrievePage(director)
        except AuthenticationError, err:
            return err.page
        main = page._body._content._main
        document = main.document(title='Phonon computation' )
        document.byline = '<a href="http://danse.us">DANSE</a>'    

        p = document.paragraph()
        p.text = [
            'Not yet ready for submission',
            ]

        configurationdoc = document.document(title='Configuration')
        computation = director.clerk.getRecordByID(self.table, self.inventory.id)
        self._view_configuration(computation, configurationdoc, director=director)
        
        return page


    def _isConfigured(self, computation, director):
        if not computation.short_description: return False
        if not computation.displacementAmplitude: return False
        if computation.supercell == [1,1,1]: return False
        if computation.qGrid == [1,1,1]: return False
        return True


    def _retrievePage(self, director):
        return director.retrieveSecurePage( 'computation' )


def _readDOSidf(dosfile):
    from idf.DOS import read
    info, E,DOS = read(dosfile)
    return E, DOS


from vnf.components.Job import isdone
from vnf.components.Computation import retrieve_results as retrieve_computation_results

def actor():
    return Actor('phononsfromabinitio')


# version
__id__ = "$Id$"

# End of file 
