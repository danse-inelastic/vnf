#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2007-2008  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

'''
This actor gives the user a menu for performing analysis of his simulations/models and several follow-up forms for configuring those analyses.
'''

from vnf.components.FormActor import FormActor as base, action, \
actionRequireAuthentication, action_link, InputProcessingError, AuthenticationError

class ChainWizard(base):
    
    class Inventory(base.Inventory):

        import pyre.inventory
        id = pyre.inventory.str( 'id', default = '')
        
        analysisType = pyre.inventory.str('analysisType', default = 'sqe')
        analysisType.validator = pyre.inventory.choice(['sqe', 'eisf', 'dos',
            'diffusionCoefficient', 'meanSquareDisplacement', 'velocityAutocorrelation'])
        analysisType.meta['tip'] = 'type of analysis and method to call in this class'

    def default(self, director):
        return self.analysisMenu( director )


    def analysisMenu(self, director):
        try:
            page = director.retrieveSecurePage( 'generic' )
        except AuthenticationError, err:
            return err.page

        main = page._body._content._main
        document = main.document(title='Material Analysis')
        
        #formcomponent = self.retrieveFormToShow( 'analysisMenu')
        #formcomponent.director = director
        # build the form form
        #form = document.form(name='', action=director.cgihome)
        document.description = ''
        document.byline = '<a href="http://danse.us">DANSE</a>'        

        prefix = 
        p = form.paragraph()
        p.text = ['<h2>Scattering Functions</h2>']        
        p = form.paragraph()
        p.text = ['''Using fundamental dynamics one can construct velocity autocorrelation functions, elastic incohoerent
        structure factors, scattering intensities, etc. for use in scattering kernels of instrument simulation.''']
        self.engineRadioButton(form, engines['vacf'])
        
        # specify action
        action = actionRequireAuthentication(          
            actor = 'materialanalysis', 
            sentry = director.sentry,
            routine = 'selectAnalysis',
            id=id,
            arguments = {'form-received': formcomponent.name },
            )
        from vnf.weaver import action_formfields
        action_formfields( action, form )
        # expand the form with fields of the data object that is being edited
        formcomponent.expand( form )
        next = form.control(name='submit',type="submit", value="next")
        return page 
        
    def selectAnalysis(self, director):
        '''send to the right method, or form, based on what analytic method is chosen'''
        simulationId, analysisClass = self.processFormInputs(director)
        # create a new analysis, complete with id
        #exec('from vnf.dom.%s import %s' % (analysisClass,analysisClass))
        #analysis = director.clerk.newOwnedObject(analysisClass)
        method = getattr(self, classToMethod(analysisClass) )
        return method( director )
    
    def sqe(self, director):
        
        #might want to reference this method from the redirect in gulpsimulationwizard:
#            def verifySimulation(self, director):
#        try:
#            page = self._retrievePage(director)
#        except AuthenticationError, err:
#            return err.page
#        # eventually have some sort of gulp simulation verification
#
#        # this is a bit weird. the type is the table name. but usually
#        # table name has a 's' at the end, and it is not desirable.
#        # the following code takes the table class name.
#        table = director.clerk._getTable('sqefrommd')
#        
#        sqefrommd = director.clerk.newOwnedObject(table)
#        
#        actor = 'sqefrommdwizard'
#        routine = 'configureSimulation'
#        return director.redirect(actor, routine, id=sqefrommd.id, type=sqefrommd.name)
        
        
        try:
            page = director.retrieveSecurePage( 'generic' )
        except AuthenticationError, err:
            return err.page
        main = page._body._content._main
        document = main.document(title='S(Q,E) calculation from atomic trajectories')
        formcomponent = self.retrieveFormToShow( 'sqe')
        formcomponent.director = director
        # build the form form
        form = document.form(name='', action=director.cgihome)
        # specify action
        action = actionRequireAuthentication(          
            actor = 'materialanalysis', 
            sentry = director.sentry,
            routine = 'selectAnalysis',
            id=id,
            arguments = {'form-received': formcomponent.name },
            )
        from vnf.weaver import action_formfields
        action_formfields( action, form )
        # expand the form with fields of the data object that is being edited
        formcomponent.expand( form )
        next = form.control(name='submit',type="submit", value="next")
        return page 
    
    def diffusionCoefficient(self, director):
        try:
            page = director.retrieveSecurePage( 'generic' )
        except AuthenticationError, err:
            return err.page
        main = page._body._content._main
        document = main.document(title='Diffusion coefficient from atomic trajectories')
        formcomponent = self.retrieveFormToShow( 'diffusionCoefficient')
        formcomponent.director = director
        # build the form form
        form = document.form(name='', action=director.cgihome)
        # specify action
        action = actionRequireAuthentication(          
            actor = 'materialanalysis', 
            sentry = director.sentry,
            routine = 'selectAnalysis',
            id=id,
            arguments = {'form-received': formcomponent.name },
            )
        from vnf.weaver import action_formfields
        action_formfields( action, form )
        # expand the form with fields of the data object that is being edited
        formcomponent.expand( form )
        next = form.control(name='submit',type="submit", value="next")
        return page 
    
    def velocityAutocorrelation(self, director):
        try:
            page = director.retrieveSecurePage( 'generic' )
        except AuthenticationError, err:
            return err.page
        main = page._body._content._main
        document = main.document(title='Velocity autocorrelation from atomic trajectories')
        formcomponent = self.retrieveFormToShow( 'velocityAutocorrelation')
        formcomponent.director = director
        # build the form form
        form = document.form(name='', action=director.cgihome)
        # specify action
        action = actionRequireAuthentication(          
            actor = 'materialanalysis', 
            sentry = director.sentry,
            routine = 'createJob',
            label = '',
            id = self.inventory.id,
            arguments = {'form-received': formcomponent.name },
            )
        from vnf.weaver import action_formfields
        action_formfields( action, form )
        # expand the form with fields of the data object that is being edited
        formcomponent.expand( form )
        next = form.control(name='submit',type="submit", value="next")
#        self._footer( document, director )
        return page 
    
    
    
    def createJob(self, director):
        self.inventory.type = 'sqefrommds'
        id = self.inventory.id
        
        try:
            page = self._retrievePage(director)
        except AuthenticationError, err:
            return err.page

        if not self._readyForSubmission(director):
            return self._notReadyForSubmissionAlert(director)

        # job
        id = self.inventory.id
        type = self.inventory.type
        computation = director.clerk.getRecordByID(type, id)
        jobref = computation.job

        if not jobref or not jobref.id:
            # create a new job
            from vnf.components.Job import new_job
            job = new_job(director)
            job.computation = computation
            director.clerk.updateRecord(job)
            
            computation.job = job
            director.clerk.updateRecord(computation)
        else:
            job = director.clerk.dereference(jobref)
            
        # redirect to job submission page
        actor = 'job'
        routine = 'view'
        return director.redirect(actor, routine, id = job.id)
    
    def _readyForSubmission(self, director):
        return True 
    
def classToMethod(className):
    return className[0].lower()+className[1:]
    

def actor():
    return MaterialAnalysis('materialanalysis')


# version
__id__ = "$Id: Login.py,v 1.1.1.1 2006-11-27 00:09:47 aivazis Exp $"

# End of file 
