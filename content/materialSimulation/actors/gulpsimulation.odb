#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2007-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from vnf.components.FormActor import FormActor as base, action, actionRequireAuthentication, action_link, InputProcessingError, AuthenticationError


class Actor(base):
    
    class Inventory(base.Inventory):

        import pyre.inventory
        id = pyre.inventory.str( 'id', default = '')

    table = 'gulpsimulations'

    def view(self, director):
        try:
            page = director.retrieveSecurePage( 'computation' )
        except AuthenticationError, err:
            return err.page

        id = self.inventory.id

        computation = director.clerk.getRecordByID(self.table, id)
        if not self._isConfigured(computation, director):
            return director.redirect(
                actor = 'gulpsimulationwizard',
                routine = 'configureSimulation',
                type = self.table,
                id = self.inventory.id,
                )

        main = page._body._content._main
        # populate the main column
        document = main.document(title='Gulp simulation #%s' % (
            id,))

        job = director.clerk.dereference(computation.job)

        p = document.paragraph()
        action = actionRequireAuthentication(
            label = job.id,
            sentry = director.sentry,
            actor = 'job',
            routine = 'view',
            id = job.id,
            )
        link = action_link(action, director.cgihome)
        p.text = [
            'The computation job id for this simulation is %s' % link,
            ]

        if isdone(job):
            server = director.clerk.dereference(job.server)
            outputFiles = ['gulp.out'] # need to replace this with output file settings
            try:
                director.dds.remember(job, files=outputFiles, server=server)
            except:
                return self._alertResultsNotFound(document, director)
            director.dds.make_available(job, files=outputFiles)
            # now 'plot.dat' is available at vnf.caltech.edu with path 
            gulpOutputFilePath = director.dds.abspath(job, 'gulp.out')
            f = file(gulpOutputFilePath) 
            resdoc = document.document(title='Results')
            p = resdoc.paragraph()
            # if the file is too large, only show the top and the bottom
            import os
            if os.stat(gulpOutputFilePath).st_size > 40000:
                top = f.read(35000)
                p.text = ['Here is the first part of the stdout file of the simulation:']
                p = resdoc.preformatted()
                p.text = [top]
                
                # go to 5000 bytes from the end
                f.seek(-5000, 2)
                bottom = f.read()
                p = resdoc.paragraph()
                p.text = ['Here is the last part of the stdout file:']
                p = resdoc.preformatted()
                p.text = [bottom]
            else:
                all = f.read()
                p.text = ['Here is the stdout file of the simulation:']
                p = resdoc.preformatted()
                p.text = [all]
            try:
                # eventually put this in place of the news portlet on the side
                # visualize md or phonons
                # plot various items such as temp, DOS, MSD, etc.
                p = resdoc.paragraph()
                p.text = ['''A movie of the simulation can be accessed by launching 
                the viewer below.''',
                '<center><a href=java/JmolApp.jnlp><img src="images/webstart.gif" alt="Jmol"/></a></center>']
            except:
                pass
            
            configurationdoc = document.document(title='Configuration')
            self._view_configuration(job, computation, configurationdoc, director=director)
        else:
            p = document.paragraph()
            p.text = ['The computation is not finished.  Please check back later.']
        return page


    def _view_configuration(self, job, computation, document, director=None):
        p = document.paragraph()
        p.text = [
            'Gulp simulation #%s' % computation.id,
            ]

        matter = director.clerk.dereference(computation.matter)
        p = document.paragraph()
        p.text = [
            'Material: %s' % (matter.short_description,),
            ]
        
        gulpInputFile = director.dds.abspath(job, 'gulp.gin')

        f = file(gulpInputFile)
        contents = f.read()
        # this is a hack--go back to pyre and put in *real* pre element
        p.text = ['Here is the input file for the simulation:',
                  '<pre>'+contents+'</pre>']
        return


    def _isConfigured(self, sim, director):
        import os
        from vnf.dom.GulpSimulation import GulpSimulation
        path = director.dds.abspath(sim, filename=GulpSimulation.CONFIGURATION_FILE)
        if not os.path.exists(path): return False
        job = sim.job
        if not job: return False
        try:
            job = director.clerk.dereference(job)
        except:
            sim.job = ''
            director.clerk.updateRecord(sim)
            return False
        return True
    


from vnf.components.Job import isdone
from vnf.components.Computation import retrieve_results as retrieve_computation_results

def actor():
    return Actor('gulpsimulation')


# version
__id__ = "$Id$"

# End of file 
