#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2007-2008  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

'''
This actor not only deals with material simulation, as its name suggests,
but also deals with material modeling.
'''

from vnf.components.FormActor import FormActor as base, action, actionRequireAuthentication, action_link, InputProcessingError, AuthenticationError


class Actor(base):
    
    class Inventory(base.Inventory):

        import pyre.inventory
        id = pyre.inventory.str( 'id', default = '')


    def default(self, director):
        return self.listall( director )


    def listall(self, director):
        try:
            page = director.retrieveSecurePage( 'materialsimulation' )
        except AuthenticationError, err:
            return err.page

        main = page._body._content._main
        document = main.document(title='Material Simulation/Modeling')

        #
        p = document.paragraph()
        action = actionRequireAuthentication(
            label = 'create',
            actor = 'materialsimulationwizard',
            routine = 'start',
            sentry = director.sentry,
            )
        create = action_link( action, director.cgihome )
        action = actionRequireAuthentication(
            label = 'analyze',
            actor = 'materialanalysis',
            sentry = director.sentry,
            )
        analyze = action_link( action, director.cgihome )
        p.text = [
            'You can %s a simulation/model or scattering kernel for use in a virtual instrument.' % create,
            'You can also %s your sample.' % analyze,
            ]

        where ="creator='%s'" % director.sentry.username
        simulations = getallsimulations(director.clerk.db, where=where)
        if len(simulations):
            p = document.paragraph()
            p.text = [
                'Following are simulations/models you have created:',
                ]
            document.contents.append(matsimtable(simulations, director))
            
        return page


def getallsimulations(db, where=None):
    from vnf.dom import materialsimulationtables, materialmodelingtables
    tables = materialsimulationtables() + materialmodelingtables()
    
    computations = []
    for table in tables:
        computations += db.fetchall(table, where=where)
        continue
    return computations


def matsimtable(matsims, director):
    from vnf.content.table import Model, View, Table
    class model(Model):

        description = Model.Measure(name='description', type='text')
        type = Model.Measure(name='type', type='text')
        matter = Model.Measure(name='matter', type='text')


    def getDesc(matsim):
        label = matsim.short_description or matsim.id
        action = actionRequireAuthentication(
            sentry = director.sentry,
            label = label,
            actor = 'computation',
            routine = 'view',
            id = matsim.id,
            type = matsim.__class__.__name__.lower(),
            )
        return action_link(action, director.cgihome)
    def getType(matsim):
        return matsim.__class__.__name__
    def getMatter(matsim):
        matter = matsim.matter
        if not matter: return 'not defined'
        matter = director.clerk.dereference(matter)
        identifier = matter.short_description or matter.chemical_formula
        return identifier
    import operator
    generators = {
        'description': getDesc,
        'type': getType,
        'matter': getMatter,
        }
    
    class D: pass
    def d(s):
        r = D()
        for attr, g in generators.iteritems():
            value = g(s)
            setattr(r, attr, value)
            continue
        return r
    data = [d(j) for j in matsims]

    class view(View):
        
        columns = [
            View.Column(id='col1',label='Simulation/modeling', measure='description'),
            View.Column(id='col2',label='Type', measure='type'),
            View.Column(id='col3',label='Matter', measure='matter'),
            ]

        editable = False

    table = Table(model, data, view)
    return table


def _desribe(simulation):
    return '%s computation #%s' % (simulation.__class__.__name__, simulation.id)
    

def actor():
    return Actor('materialsimulation')


# version
__id__ = "$Id: Login.py,v 1.1.1.1 2006-11-27 00:09:47 aivazis Exp $"

# End of file 
