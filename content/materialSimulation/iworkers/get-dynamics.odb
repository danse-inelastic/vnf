#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2009-  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from pyre.components.Component import Component

class Worker(Component):

    class Inventory(Component.Inventory):

        import pyre.inventory

    def run(self, task):
        director = self.director

        import tempfile, os
        tmpdir = tempfile.mkdtemp()
#        local_packtrajectory_py = os.path.join(tmpdir, getdos_py_fn)
#        director.declareProgress(0.1, 'Creating %s ...' % local_packtrajectory_py)
#        open(local_packtrajectory_py, 'w').write(packtrajectory_py_src)

        local_packtrajectory_sh = os.path.join(tmpdir, packtrajectory_sh_fn)
        director.declareProgress(0.05, 'Creating %s ...' % local_packtrajectory_sh)
        open(local_packtrajectory_sh, 'w').write(packtrajectory_sh_src)
        
        # the computation
        gulpSimulation = director.clerk.dereference(task.beneficiary)
        
        # the job
        job = director.clerk.dereference(gulpSimulation.job)
        
        # the server this job was run
        server = director.clerk.dereference(job.server)
        
        # the job dir
        remotejobdir = director.dds.abspath(job, server=server)
        
        director.declareProgress(0.1, 'Copy %s to server %s ...' % (packtrajectory_py_fn, server.short_description))
        director.csaccessor.copyfile(LocalHost, local_packtrajectory_py, server, remotejobdir)
#        
#        director.declareProgress(0.5, 'Copy %s to server %s ...' % (packtrajectory_sh_fn, server.short_description))
#        director.csaccessor.copyfile(LocalHost, local_packtrajectory_sh, server, remotejobdir)

        director.declareProgress(0.15, 'Running %s on server %s ...' % (packtrajectory_sh_fn, server.short_description))
        director.csaccessor.execute('sh %s' % packtrajectory_sh_fn, server, remotejobdir)
        
#        director.declareProgress(0.5, 'Copy %s to server %s ...' % (packtrajectory_sh_fn, server.short_description))
#        director.csaccessor.copyfile(server, remotejobdir, LocalHost, local_packtrajectory_sh)
        
        director.declareProgress(0.7, 'Collecting results from server %s ...' % server.short_description)
        localjobdir = director.dds.abspath(job)
        if not os.path.exists(localjobdir):
            os.makedirs(localjobdir)
        remotedosdat = os.path.join(remotejobdir, GulpResults.compressed_xyzTrajectory_filename)
        director.csaccessor.getfile(server, remotedosdat, localjobdir)
        
        director.declareProgress(1., 'done.')
        return


    def _configure(self):
        super(Worker, self)._configure()
        return



from vnf.dom import GulpResults
from vnf.dom.Server import LocalHost


#packtrajectory_py_fn = '.packtrajectory.py'
packtrajectory_sh_fn = '.packtrajectory.sh'

#packtrajectory_py_src = '''
#from p4vasp.SystemPM import *
#
#
#s=XMLSystemPM("vasprun.xml")
#
#e=s.E_FERMI
#tdos=s.TOTAL_DOS
#
#f=open("%s","w")
#''' % VASP.total_electronic_dos_filename \
#+ r'''
#for v in tdos[0]:
#    f.write("%f %f\n"%(v[0]-e,v[1]))
#f.close()
#'''
#
#packtrajectory_sh_src = '''
##!/usr/bin/env bash
#
#source ~/.abinitio-env
#python %s
#''' % getdos_py_fn

packtrajectory_sh_src = '''
#!/usr/bin/env bash

source ~/.gulp-env
zip % %
''' % (GulpResults.compressed_xyzTrajectory_filename, GulpResults.xyzTrajectory_filename)

def iworker():
    return Worker('get-dynamics', 'iworker')


# version
__id__ = "$Id$"

# End of file 
