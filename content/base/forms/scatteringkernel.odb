# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                   Jiao Lin
#                      California Institute of Technology
#                        (C) 2007  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


# *** to be rewritten ***


from vnf.components.Form import Form as base
from vnf.components.PyHtmlTable import PyHtmlTable
from vnf.components.Actor import actionRequireAuthentication, action_link


class Form( base ):

    class Inventory( base.Inventory ):

        import pyre.inventory as inv
#        kernel = inv.str('kernel',default='gulp')
#        kernel.meta['tip'] = 'type of kernel'
        
        selected_kernel_id = inv.str( 'kernel_id' )

    def expand(self, form):
        '''expand an existing form with fields from this component'''
        prefix = formactor_action_prefix
        
#        experiment_id_field = form.hidden(
#            name = '%s.experiment_id' % prefix,
#            value = self.inventory.experiment_id )
        
        # retrieve id:record dictionary from db
        director = self.director
        clerk = director.clerk
        scatteringKernels = clerk.indexScatteringKernels().values()
        scatteringKernels = [ clerk.getHierarchy(scatteringKernel) for scatteringKernel in scatteringKernels]
            
        p = form.paragraph()
        p.text = ['Select a scattering kernel from the list below']
        numScatteringKernels = len(scatteringKernels)
        columns = ['id', 'reference', 'short_description', 'type', 'creator', 'date' ]
        columnTitles = ["Select as scattering kernel", "Dynamics", "S(Q,E)", 'Short description', 'Type of scattering kernel', 'Creator', 'Date of creation']

        
        t = PyHtmlTable(numScatteringKernels, len(columnTitles), {'width':'400','border':2})#,'bgcolor':'white'})
        for colNum, col in enumerate(columnTitles):
            t.setc(0,colNum,col)
        #name = '%s.%s' % (formactor_action_prefix, 'kernel_id')    
        for rowNum, scatteringKernel in enumerate(scatteringKernels):
            #first put in the radio button
            #selection = form.radio(id='radio', name=name, label = "", value = 'phononDispersions')
#            selection = '''<div class='formfield'>
#<div>
#</div>
#<input type='radio' name='actor.form-received.kernel_id' value='''+scatteringKernel.id+''' id='radio'/>
#</div>'''
            selection = "<input type='radio' name='actor.form-received.kernel_id' value="+scatteringKernel.id+" id='radio'/>"
            t.setc(rowNum+1, 0, selection)
           
            # the lines below are a demo-type hack
            dynamics = '<a href="/java/headDynamics'+str(rowNum)+'.jnlp">view</a>'
            t.setc(rowNum+1, 1, dynamics)
            # what we really need is the 3D (or at least 2D) S(Q,E) data in array form in the db
            # and that to be retrieved now and plotted
            
            # the lines below are a demo-type hack
            plot = '<a href="/java/sqeViewer3.jnlp">view</a>'
            t.setc(rowNum+1, 2, plot)
            # what we really need is the 3D (or at least 2D) S(Q,E) data in array form in the db
            # and that to be retrieved now and plotted
            
            
            #then fill out the rest of the columns
            for colNum, colName in enumerate( columns[2:] ):           
                value = scatteringKernel.getColumnValue(colName)
                if colName == 'short_description':
                    link = action_link(
                        actionRequireAuthentication(
                        'neutronexperimentwizard',
                        director.sentry,
                        label = value,
                        routine = 'show',
                        id = scatteringKernel.id,
                        ),  director.cgihome
                        )
                    value = link
                t.setc(rowNum+1,colNum+3,value)
        p.text += [t.return_html()]
        

    def processUserInputs(self):
        'process user input '
        return self.inventory.kernel


#formactor_action_prefix = 'actor.form-received' # assumed actor is a form actor
from vnf.components.DBObjectForm import formactor_action_prefix

def form(): return Form( 'selectkernel' )


# version
__id__ = "$Id$"

# End of file 
