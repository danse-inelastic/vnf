# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                   Jiao Lin
#                      California Institute of Technology
#                        (C) 2007  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from vnf.components.Form import Form as base, InputProcessingError
from vnf.components.Actor import action_link, actionRequireAuthentication


class Form( base ):

    class Inventory( base.Inventory ):
        import pyre.inventory
        
        id = pyre.inventory.str('id')

        ncount = pyre.inventory.str(name = 'ncount', default = 1e6 )
        ncount.meta['label'] = 'Number of neutrons'
        ncount.meta['tip'] = (
            'Please input the number of neutrons to be generated ',
            'by the neutron source',
            )
        ncount.meta['tiponerror'] = (
            'You must enter the number of neutrons as a postive',
            'number: eg. 10000, 1e8',
            )
        
        pass # end of Inventory


    def legend(self):
        'return a legend string'
        return 'Experiment submission'


    def expand(self, form, errors = None):
        '''expand an existing form with fields from this component'''

        director = self.director
        experiment = director.clerk.getNeutronExperiment(
            self.inventory.id)

        prefix = formactor_action_prefix
        id_field = form.hidden(
            name = '%s.id' % prefix,
            value = self.inventory.id )

        if errors:
            p = form.paragraph( cls = 'error' )
            p.text = [
                'The form you filled out contained some errors.',
                'Please look through the values you have entered',
                'and correct any mistakes.',
                ]

        p = form.paragraph()
        p.text = [
            'You have done the main steps for setting up your virtual',
            'neutron experiment: select your instrument, and prepare',
            'your sample. There are a few more things to configure here.',
            ]

        property = 'ncount'
        value = experiment.ncount
        meta = getattr( self.Inventory, property ).meta
        field = form.text(
            id = 'edit_%s' % property,
            name='%s.%s' % (prefix, property),
            label = meta['label'],
            value = value)
        field.help = ' '.join( meta['tip'] )
        if errors and property in errors:
            field.error = ' '.join( meta['tiponerror'] )

        return


    def processUserInputs(self):
        'process user inputs and save them to db'

        errors = []
        
        ncount = self.inventory.ncount
        try: ncount = long(float(ncount))
        except: errors.append( 'ncount' )

        if len(errors):
            raise InputProcessingError, errors

        director = self.director
        experiment = director.clerk.getNeutronExperiment(self.inventory.id)
        experiment.ncount = ncount
        director.clerk.updateRecord( experiment )
        return


    def __init__(self, name = None):
        if name is None:
            name = 'experiment_submission'

        base.__init__(self, name)

        return
    
    pass # end of Form



from vnf.components.misc import nullpointer

formactor_action_prefix = 'actor.form-received' # assumed actor is a form actor


def form(): return Form()


# version
__id__ = "$Id$"

# End of file 
