# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                   Jiao Lin
#                      California Institute of Technology
#                        (C) 2007  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from vnf.components.Form import Form as base
from vnf.components.Actor import action_link, actionRequireAuthentication


class MaterialType:

    def __init__(self, id, short_description, long_description):
        self.id = id
        self.short_description = short_description
        self.long_description = long_description
        return
    

materialTypes = [
    MaterialType('polycrystals', 'Polycrystals', ''),
    MaterialType('singlecrystals', "Single crystals", ''),
    MaterialType('disordereds', 'Disordered materials', '')
    ]

class Form( base ):

    class Inventory( base.Inventory ):
        import pyre.inventory as inv
        #id = inv.str( 'id', default = '' )
        materialType = inv.str( 'materialType', default='polycrystal' )
        materialType.validator = inv.choice(['polycrystal', 'singlecrystal', 'disordered'])

    def legend(self):
        'return a legend string'
        return 'Select material type'

    def expand(self, form):
        '''expand an existing form with fields from this component'''
        # do we need this?
        #record = self.getRecord()
        prefix = formactor_action_prefix
        
        p = form.paragraph()
        p.text=['Select material type']
        name = '%s.%s' % (formactor_action_prefix, 'materialType')
        default = self.inventory.materialType
        for materialType in materialTypes:
            id = materialType.id
            label = materialType.short_description
            kwds = {
                'id':'radio'+id,
                'name':name,
                'label':label,
                'value':id,
                }
            if id == default: kwds['checked']=True
            rb = form.radio(**kwds)
#        polycrystal=form.radio(id='radio1',name=name, label = "Polycrystal", value = 'polycrystal')       
#        singlecrystal=form.radio(id='radio2',name=name, label = "Single crystal", value = 'cylinder') 
        
#        id_field = form.hidden(
#            name = '%s.id' % prefix, value = record.id)
#
#        entries = enumerate( shapes )
#        selector = form.selector(
#            id = 'materialType_selector',
#            name = '%s.materialType' % prefix,
#            entries = entries,
#            label = 'Material Type',
#            selected = shapes[0],
#            )

    def processUserInputs(self):
        'process user inputs and save them to db'
        
        record = self.getRecord( )

        shapetype = shapes[self.inventory.shape]

        record.type = shapetype

        director = self.director
        factory = eval( 'new_%s' % shapetype.lower() )
        realshape = factory( director )

        # refer to real shape record from abstract shape table
        record.reference = realshape.id

        director.clerk.updateRecord( record )
        return


    def getRecord(self):
        'get DB record'
        id = self.inventory.id
        director = self.director
        clerk = director.clerk
        return clerk.getRecordByID( 'Shape', id )


    def __init__(self, name = None):
        if name is None:
            name = 'selectshapetype'

        base.__init__(self, name)

        return
    
    pass # end of Form




def new_id( director ):
    #new token
    token = director.idd.token()
    uniquename = '%s-%s-%s' % (token.locator, token.tid, token.date)
    return uniquename


def new_block( director ):
    from vnf.dom.Block import Block as factory
    record = factory()

    id = new_id( director )
    record.id = id

    record.creator = director.sentry.username
    record.width = record.height = record.thickness = 0.01

    import time
    record.date = time.ctime()

    director.clerk.newRecord( record )
    
    return record



formactor_action_prefix = 'actor.form-received' # assumed actor is a form actor


def form(): return Form()


# version
__id__ = "$Id$"

# End of file 
