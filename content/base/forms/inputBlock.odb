# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                   Jiao Lin
#                      California Institute of Technology
#                        (C) 2007  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from vnf.components.Form import Form as base
from vnf.components.Actor import actionRequireAuthentication, action_link
from vnf.components.DBObjectForm import formactor_action_prefix

class Form( base ):

    class Inventory( base.Inventory ):

        import pyre.inventory as inv
        id = inv.str( 'id', default = '' )
        height = inv.str('height', default = 0.0 )
        height.meta['tip'] = 'height of block'
        width = inv.str('width', default = 0.0 )
        width.meta['tip'] = 'width of block'
        thickness = inv.str('thickness', default = 0.0 )
        thickness.meta['tip'] = 'thickness of block'

    def  expand(self, form, errors = None, properties = None, id = ''):
        '''expand an existing form with fields from this component'''
            
        prefix = formactor_action_prefix
        director = self.director        
        
        if not id:
            tableClass = director.clerk._getTable('block')
            record = director.clerk.newObject(tableClass)
            id = self.inventory.id = record.id
        else:
            record = director.clerk.getRecordByID('blocks', id)
            self.inventory.id = record.id
          
        p = form.paragraph()
        p.text=['Input the shape parameters for a plate sample']  
        height = form.text(id='height', name='%s.height' % prefix, label='Height', 
                           value = record.height)        
        width = form.text(id='width', name='%s.width' % prefix, label='Width',
                          value = record.width)   
        thickness = form.text(id='thickness', name='%s.thickness' % prefix, label='Thickness',
                              value = record.thickness)  
          
    def processUserInputs(self):   
        '''process user inputs and save them to db'''
        
        director = self.director
        
        try: # first try to get a record with the inventory id from the db
            record = director.clerk.getRecordByID('blocks', self.inventory.id)
        except: # if can't find, create a new one
            tableClass = director.clerk._getTable('block')
            record = director.clerk.newDbObject(tableClass)
            self.inventory.id = record.id
      
        record.height = self.inventory.height
        record.thickness = self.inventory.thickness
        record.width = self.inventory.width
            
        self.director.clerk.updateRecord(record)
        return record

def form(): return Form( 'inputBlock' )


# version
__id__ = "$Id$"

# End of file 
