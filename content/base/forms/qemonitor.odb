# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                   Jiao Lin
#                      California Institute of Technology
#                        (C) 2007  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#



def isPositiveInteger(value):
    try:
        value = int(value)
    except:
        return False
    return value > 0

def isReal(value):
    try:
        value = float(value)
    except:
        return False
    return True

def isPositiveReal(value):
    try:
        value = float(value)
    except:
        return False
    return value > 0

def isNonnegativeReal(value):
    try:
        value = float(value)
    except:
        return False
    return value >= 0



from vnf.forms.DBObjectForm import DBObjectForm as base, InputProcessingError


class QEMonitor(base):


    class Inventory(base.Inventory):

        import pyre.inventory
        
        Emin = pyre.inventory.str( name = 'Emin', default = 3000 )
        Emin.meta['label'] = 'Lower energy bound. Unit: second'
        Emin.meta['tiponerror'] = (
            'Please enter a real number',
            )
        Emin.meta['validator'] = isReal

        Emax = pyre.inventory.str( name = 'Emax', default = 6000  )
        Emax.meta['label'] = 'Upper energy bound. Unit: second'
        Emax.meta['tiponerror'] = (
            'Please enter a real number',
            )
        Emax.meta['validator'] = isReal
        
        nE = pyre.inventory.str(name='nE', default=10)
        nE.meta['label'] = 'Number of channels in energy axis'
        nE.meta['tiponerror'] = (
            'Please enter a postive integer.',
            )
        nE.meta['validator'] = isPositiveInteger

        Qmin = pyre.inventory.str( name = 'Qmin', default = 3000 )
        Qmin.meta['label'] = 'Lower Q bound. Unit: angstrom**-1'
        Qmin.meta['tiponerror'] = (
            'Please enter a non-negative real number',
            )
        Qmin.meta['validator'] = isNonnegativeReal

        Qmax = pyre.inventory.str( name = 'Qmax', default = 6000  )
        Qmax.meta['label'] = 'Upper Q bound. Unit: angstrom**-1'
        Qmax.meta['tiponerror'] = (
            'Please enter a positive real number',
            )
        Qmax.meta['validator'] = isPositiveReal
        
        nQ = pyre.inventory.str(name='nQ', default=10)
        nQ.meta['label'] = 'Number of channels in Q axis'
        nQ.meta['tiponerror'] = (
            'Please enter a postive integer.',
            )
        nQ.meta['validator'] = isPositiveInteger

        min_angle_in_plane = pyre.inventory.str( name = 'min_angle_in_plane', default = 6000  )
        min_angle_in_plane.meta['label'] = 'Lower bound for accepting angle in scattering plane. Unit: degree'
        min_angle_in_plane.meta['tiponerror'] = (
            'Please enter a real number',
            )
        min_angle_in_plane.meta['validator'] = isReal

        max_angle_in_plane = pyre.inventory.str( name = 'max_angle_in_plane', default = 6000  )
        max_angle_in_plane.meta['label'] = 'Upper bound for accepting angle in scattering plane. Unit: degree'
        max_angle_in_plane.meta['tiponerror'] = (
            'Please enter a real number',
            )
        max_angle_in_plane.meta['validator'] = isReal
        
        min_angle_out_of_plane = pyre.inventory.str( name = 'min_angle_out_of_plane', default = 6000  )
        min_angle_out_of_plane.meta['label'] = 'Lower bound for accepting angle out of the scattering plane. Unit: degree'
        min_angle_out_of_plane.meta['tiponerror'] = (
            'Please enter a real number',
            )
        min_angle_out_of_plane.meta['validator'] = isReal
        
        max_angle_out_of_plane = pyre.inventory.str( name = 'max_angle_out_of_plane', default = 6000  )
        max_angle_out_of_plane.meta['label'] = 'Upper bound for accepting angle out of the scattering plane. Unit: degree'
        max_angle_out_of_plane.meta['tiponerror'] = (
            'Please enter a real number',
            )
        max_angle_out_of_plane.meta['validator'] = isReal
        
        
    parameters = [#'short_description',
        'Emin', 'Emax', 'nE',
        'Qmin', 'Qmax', 'nQ',
        'min_angle_in_plane', 'max_angle_in_plane',
        'min_angle_out_of_plane', 'max_angle_out_of_plane',
        ]
    
    DBTable = 'qemonitors'


    def __init__(self, name = None):
        if name is None:
            name = 'qemonitor'

        base.__init__(self, name)
        return


    def processUserInputs(self, *args, **kwds):
        errors = filter(
            lambda param: \
            not getattr(self.Inventory, param).meta['validator']\
            (getattr(self.inventory, param)),
            self.parameters)
        
        if len(errors): raise InputProcessingError, errors
        
        return base.processUserInputs(self, *args, **kwds)




def form(): return QEMonitor()


# version
__id__ = "$Id$"

# End of file 
