# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                   Jiao Lin
#                      California Institute of Technology
#                        (C) 2007  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#



from vnf.forms.DBObjectForm import DBObjectForm as base, InputProcessingError


class TofMonitor(base):


    class Inventory(base.Inventory):

        import pyre.inventory
        
        tmin = pyre.inventory.str( name = 'tmin', default = 3000 )
        tmin.meta['label'] = 'Lower tof bound. Unit: second'
        tmin.meta['tiponerror'] = (
            'Please enter a real number',
            )

        tmax = pyre.inventory.str( name = 'tmax', default = 6000  )
        tmax.meta['label'] = 'Upper tof bound. Unit: second'
        tmax.meta['tiponerror'] = (
            'Please enter a real number',
            )
        
        x_min = pyre.inventory.str( name = 'x_min', default = -0.05 )
        x_min.meta['label'] = 'Lower x bound for detector opening. Unit: meter'
        x_min.meta['tiponerror'] = (
            'Please enter a real number',
            )

        x_max = pyre.inventory.str( name = 'x_max', default = 0.05 )
        x_max.meta['label'] = 'Upper x bound for detector opening. Unit: meter'
        x_max.meta['tiponerror'] = (
            'Please enter a real number',
            )
        
        y_min = pyre.inventory.str( name = 'y_min', default = -0.05 )
        y_min.meta['label'] = 'Lower y bound for detector opening. Unit: meter'
        y_min.meta['tiponerror'] = (
            'Please enter a real number',
            )

        y_max = pyre.inventory.str( name = 'y_max', default = 0.05 )
        y_max.meta['label'] = 'Upper y bound for detector opening. Unit: meter'
        y_max.meta['tiponerror'] = (
            'Please enter a real number',
            )
        
        nchan = pyre.inventory.str(name='nchan', default=10)
        nchan.meta['label'] = 'Number of channels in tof axis'
        nchan.meta['tiponerror'] = (
            'Please enter a postive integer.',
            )

    parameters = [#'short_description',
        'x_min', 'x_max',
        'y_min', 'y_max',
        'tmin', 'tmax',
        'nchan',
        ]
    
    DBTable = 'tofmonitors'


    def __init__(self, name = None):
        if name is None:
            name = 'tofmonitor'

        base.__init__(self, name)
        return


    def processUserInputs(self, *args, **kwds):

        errors = filter(
            lambda param: bad(param, getattr(self.inventory, param)),
            self.parameters)
        
        if len(errors): raise InputProcessingError, errors
        
        return base.processUserInputs(self, *args, **kwds)




def bad(key, value):
    if key in ['nchan']: return not positiveinteger(value)
    return not isfloat(value)


def positiveinteger(value):
    try:
        value = int(value)
    except:
        return False
    return value > 0

def isfloat(value):
    try:
        value = float(value)
    except:
        return False
    return True


def form(): return TofMonitor()


# version
__id__ = "$Id$"

# End of file 
