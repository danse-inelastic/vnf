# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                      California Institute of Technology
#                        (C) 2007  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from vnf.components.Form import Form as base
from vnf.components.Actor import actionRequireAuthentication, action_link
from vnf.components.DBObjectForm import formactor_action_prefix
from vnf.dom.Analysis import analysisClasses

class Form( base ):

    analysisChoices=['S(Q,E)','EISF','DOS','Diffusion coefficient',
                         'Mean square displacement','Velocity Autocorrelation Function']
    simulationIds=[]
    simulationChoices=[]

    class Inventory( base.Inventory ):

        import pyre.inventory as inv
        id = inv.str( 'id', default = '' )
        id.meta['tip'] = 'Scattering kernel calculation id'
        
        short_description = inv.str('short_description', default = '' )
        short_description.meta['tip'] = 'A short description'
        
        modelChosen = inv.str('modelChosen', default='vasp')
        modelChosen.meta['tip'] = 'Model or simulation chosen for analysis'
        
        analysisType = inv.str('analysisType', default='S(Q,E)')
        analysisType.meta['tip'] = 'type of analysis'
        
    def expand(self, form):
        '''expand an existing form with fields from this component'''
        prefix = formactor_action_prefix

        director = self.director
        simulations = getallsimulations(director.clerk.db)
        if len(simulations):
            p = form.paragraph()
            p.text = [
                'Choose a simulation/model:',
                ]
            for simulation in simulations:
                desc = _describe(simulation)
                label = simulation.short_description or simulation.id
                self.simulationChoices.append('%s: %s' % (label, desc))
                self.simulationIds.append(simulation.id)
        entries=zip(self.simulationChoices,self.simulationChoices)
        models = form.selector(id='selector1',
                name = '%s.models'%prefix,
                entries = entries,
                label = '',
                selected = self.inventory.modelChosen,
                size=10) 
            
        p = form.paragraph()
        p.text = ['Choose a type of analysis:']
        entries=zip(self.analysisChoices, self.analysisChoices)
        analysisTypes = form.selector(id='selector2',
                name = '%s.analysisTypes'%prefix,
                entries = entries,
                label = '',
                selected = self.inventory.analysisType,
                size=5)           

    def processUserInputs(self):
        '''note the model's id and analytic method chosen and return them so the
        form actor can direct to the appropriate subsequent form'''
        simulationIndex = self.simulationChoices.index(self.inventory.modelChosen)
        analysisIndex = self.analysisChoices.index(self.inventory.analysisType)
        return self.simulationIds[simulationIndex], analysisClasses[analysisIndex]
    
    def getRecord(self):
        'get DB record'
        return self.director.clerk.getRecordByID( self.DBTable, self.inventory.id )
    
def getallsimulations(db):
    from vnf.dom import materialsimulationtables, materialmodelingtables
    tables = materialsimulationtables() + materialmodelingtables()

    computations = []
    for table in tables:
        computations += db.fetchall(table)
        continue
    return computations

def _describe(simulation):
    return '%s %s' % (simulation.__class__.__name__, simulation.id) 


def form(): return Form( 'analysisMenu' )


# version
__id__ = "$Id$"

# End of file 
