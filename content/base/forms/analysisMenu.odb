# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                      California Institute of Technology
#                        (C) 2007  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from vnf.components.Form import Form as base
from vnf.components.Actor import actionRequireAuthentication, action_link
from vnf.components.DBObjectForm import formactor_action_prefix

class Form( base ):

    class Inventory( base.Inventory ):

        import pyre.inventory as inv
        id = inv.str( 'id', default = '' )
        id.meta['tip'] = 'Scattering kernel calculation id'
        
        short_description = inv.str('short_description', default = '' )
        short_description.meta['tip'] = 'A short description'
        
#        engine = inv.str('engine', default='vasp')
#        engine.validator=inv.choice(['vasp', 'ab init'])
#        engine.meta['tip'] = 'Ab initio engine'
#        
#        xcFunctional = inv.str('xcFunctional', default='PAW-PBE')
#        xcFunctional.validator=inv.choice(['PAW-PBE', 'PAW-GGA', 'LDA'])
#        xcFunctional.meta['tip'] = 'Exchange correlation functional'


    #DBTable = 'abinitio'
        
    def expand(self, form):
        '''expand an existing form with fields from this component'''
        prefix = formactor_action_prefix

#        id_field = form.hidden(
#            name = '%s.id' % prefix, value = self.inventory.id)

#        record = self.getRecord()
        director = self.director
        simulations = getallsimulations(director.clerk.db)
        if len(simulations):
            p = form.paragraph()
            p.text = [
                'Choose a simulation/model:',
                ]
            choices=[]
            for simulation in simulations:
                desc = _describe(simulation)
                label = simulation.short_description or simulation.id
                simulationInfo = '%s: %s' % (label, desc)
                choices.append(simulationInfo)
        entries=zip(choices,choices)
        models = form.selector(id='selector1',
                name = '%s.models'%prefix,
                entries = entries,
                label = '',
                size=10) 
            
        p = form.paragraph()
        p.text = ['Choose a type of analysis:']
        
        choices=['S(Q,E)','DOS','Diffusion coefficient','MSD']
        entries=zip(choices,choices)
        #eng=str(record.engine)
        analysisTypes = form.selector(id='selector2',
                name = '%s.analysisTypes'%prefix,
                entries = entries,
                label = '',
                size=4)           
        
        
        
        
        
        
        
        
        
        
        

        

    def processUserInputs(self):
        '''note the model and analytic method chosen and direct accordingly''' 
#        record = self.getRecord()
#        props = [
#            'short_description',
#            'engine',
#            'xcFunctional',
#            'kineticEnergyCutoff',
#            'displacementAmplitude',
#            ]
#        for prop in props:
#            value = getattr(self.inventory, prop)
#            setattr(record, prop, value)
#            continue
#
#        record.monkhorstPackMesh = [self.inventory.nKx, self.inventory.nKy, self.inventory.nKz]
#        record.supercell = [self.inventory.scx, self.inventory.scy, self.inventory.scz]
#        record.qGrid = [self.inventory.nQx, self.inventory.nQy, self.inventory.nQz]
#        self.director.clerk.updateRecord(record)
#        return record
        pass
    
    
    def getRecord(self):
        'get DB record'
        return self.director.clerk.getRecordByID( self.DBTable, self.inventory.id )
    
def getallsimulations(db):
    from vnf.dom import materialsimulationtables, materialmodelingtables
    tables = materialsimulationtables() + materialmodelingtables()

    computations = []
    for table in tables:
        computations += db.fetchall(table)
        continue
    return computations

def _describe(simulation):
    return '%s %s' % (simulation.__class__.__name__, simulation.id) 


def form(): return Form( 'analysisMenu' )


# version
__id__ = "$Id$"

# End of file 
