# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                   Jiao Lin
#                      California Institute of Technology
#                        (C) 2007  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#



from vnf.forms.DBObjectForm import DBObjectForm as base, InputProcessingError


class T0Chopper(base):


    class Inventory(base.Inventory):

        import pyre.inventory
        
        nu = pyre.inventory.str(name='nu', default=600)
        nu.meta['label'] = 'Frequency'
        nu.meta['tiponerror'] = (
            'Please enter a postive integer. Unit: Hz',
            )
        
        #delta = pyre.inventory.str(name='delta', default=0.1)
        #delta.meta['label'] = 'Time from edge of chopper to center Phase angle'
        #delta.meta['tiponerror'] = (
        #    'Please enter a postive number. Unit: second',
        #    )

        ymin = pyre.inventory.str(name='ymin', default=-0.03)
        ymin.meta['label'] = 'Lower y bound. Unit: meter'
        ymin.meta['tiponerror'] = (
            'Please enter a real number',
            )
        
        ymax = pyre.inventory.str(name='ymax', default=0.03)
        ymax.meta['label'] = 'Upper y bound. Unit: meter'
        ymax.meta['tiponerror'] = (
            'Please enter a real number',
            )
        
        w1 = pyre.inventory.str(name='w1', default=0.06)
        w1.meta['label'] = 'center width. Unit: meter'
        w1.meta['tiponerror'] = (
            'Please enter a positive number',
            )

        w2 = pyre.inventory.str(name='w2', default=0.06)
        w2.meta['label'] = 'edge width. Unit: meter'
        w2.meta['tiponerror'] = (
            'Please enter a positive number',
            )

        tc = pyre.inventory.str(name='tc', default=0.0)
        tc.meta['label'] = 'Time when desired neutron is at the center of the chopper. Unit: second'
        tc.meta['tiponerror'] = (
            'Please enter a positive number',
            )
        
        len = pyre.inventory.str(name='len', default=0.1)
        len.meta['label'] = 'Slit package length. Unit: meter'
        len.meta['tiponerror'] = (
            'Please enter a positive number',
            )
                
                
    parameters = [#'short_description',
        'nu', #'delta'
        'ymin', 'ymax',
        'w1', 'w2',
        'tc', 'len',
        ]
    
    DBTable = 't0choppers'


    def __init__(self, name = None):
        if name is None:
            name = 't0chopper'

        base.__init__(self, name)
        return


    def processUserInputs(self, *args, **kwds):

        errors = filter(
            lambda param: bad(param, getattr(self.inventory, param)),
            self.parameters)
        
        if len(errors): raise InputProcessingError, errors
        
        return base.processUserInputs(self, *args, **kwds)



def bad(key, value):
    if key in ['ymin']: return not negativefloat(value)
    return not positivefloat(value)


def positiveinteger(value):
    try:
        value = int(value)
    except:
        return False
    return value > 0

def negativefloat(value):
    try:
        value = float(value)
    except:
        return False
    return value < 0

def nonnegativefloat(value):
    try:
        value = float(value)
    except:
        return False
    return value >= 0

def positivefloat(value):
    try:
        value = float(value)
    except:
        return False
    return value > 0


def form(): return T0Chopper()


# version
__id__ = "$Id$"

# End of file 
