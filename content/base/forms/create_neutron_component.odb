# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                   Jiao Lin
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#



from vnf.components.Form import Form as base, formactor_action_prefix


class Form(base):

    class Inventory(base.Inventory):

        import pyre.inventory

        type = pyre.inventory.str( 'type' )
        name = pyre.inventory.str( 'name' )
        
        pass # end of Inventory


    def __init__(self, name = None):
        if name is None:
            name = 'create_neutron_component'

        base.__init__(self, name)

        return


    def expand(self, form, errors=None):
        '''expand an existing form with fields from this component'''

        #base.expand( self, form )

        prefix = formactor_action_prefix

        # name
        field = form.text(
            id = 'component name' ,
            name='%s.name' % prefix,
            label = 'Name',
            value = 'New component')
        field.tip = "Please give this new component a name"
        if errors:
            if errors.get('name'):
                field.error = errors['name']
        
        # type
        tables = component_tables()
        types = [t.__name__ for t in tables]

        entries = zip(types, types)
        selector = form.selector(
            id = 'type_selector',
            name = '%s.type' % prefix,
            entries = entries,
            label = 'Type',
            selected = types[0],
            )
        return


    def processUserInputs(self):
        #base.processUserInputs( self )
        return self.inventory.name, self.inventory.type



def component_tables():
    from vnf.dom import alltables
    all = alltables()
    from vnf.dom.NeutronComponent import NeutronComponent
    from vnf.dom.neutron_components.SampleComponent import SampleComponent
    def isComponent(candidate):
        return issubclass(candidate, NeutronComponent) \
               and not issubclass(candidate, SampleComponent)
    return filter(isComponent, all)


def form(): return Form()

# version
__id__ = "$Id$"

# End of file 
