#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                  Jiao Lin
#                     California Institute of Technology
#                       (C) 2007  All Rights Reserved
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from vnf.components.Form import Form as base, InputProcessingError, formactor_action_prefix


class Form(base):


    class Inventory(base.Inventory):

        import pyre.inventory

        id = pyre.inventory.str( 'id', default = '' )

        short_description = pyre.inventory.str(name = 'short_description', default = 1e6 )
        short_description.meta['label'] = 'Job description'
        short_description.meta['tip'] = (
            'Please give a short description for this job',
            )
        
        server = pyre.inventory.str( 'server', default = 'serverid' )
        server.meta['label'] = 'Computation server'
        server.meta['tip'] = (
            'Please choose the server on which the job will be run',
            )
        
        numprocessors = pyre.inventory.str( 'numprocessors', default = 1 )
        numprocessors.meta['label'] = 'Number of processors'
        numprocessors.meta['tip'] = (
            'Please input the number of processors',
            )
        numprocessors.meta['tiponerror'] = (
            'Please enter a positive integer',
            )

        walltime = pyre.inventory.str( 'walltime', default = 1)
        walltime.meta['label'] = 'Time limit (hours)'
        walltime.meta['tip'] = (
            'Please input a limit on the time your job will run. (Unit: hours)',
            )
        walltime.meta['tiponerror'] = (
            'Please enter a positive integer',
            )

    DBTable = 'Job'


    def __init__(self, name = None):
        if name is None:
            name = 'job'

        base.__init__(self, name)

        return


    def legend(self):
        'return a legend string'
        record = self.getRecord()
        return 'Job %s:' % record.id


    def expand(self, form, errors=None):
        '''expand an existing form with fields from this component'''
        director = self.director
        
        record = self.getRecord()
        
        prefix = formactor_action_prefix        

        # properties of a job

        id_field = form.hidden(
            name = '%s.id' % prefix, value = record.id)

        property = 'short_description'
        meta = getattr( self.Inventory, property ).meta
        field = form.text(
            id = 'short_description',
            name = '%s.short_description' % prefix,
            label = meta['label'],
            value = record.short_description or \
            'job for %s' % _describe_computation
            (director.clerk.dereference(record.computation))
            )
        field.help = ' '.join( meta['tip'] )

        servers = director.clerk.getServers()
        entries = [ (server.id, server.short_description) for server in servers ]
        ids = [ id for id, server in entries ]

        selected_server = record.server.id
        if selected_server not in ids: selected_server = entries[0][0]
        
        property = 'server'
        meta = getattr( self.Inventory, property ).meta
        selector = form.selector(
            id = 'server_selector',
            name = '%s.server' % prefix,
            entries = entries,
            label = meta['label'],
            selected = selected_server,
            )
        selector.help = meta['tip']

        if director.sentry.username == 'demo':
            # for demo user, we don't want them to use a lot of resources
            # so let us hide those fields for the resources
            form.hidden(name='%s.numprocessors' % prefix, value=1)
            form.hidden(name='%s.walltime' % prefix, value=1)
            return form
        
        property = 'numprocessors'
        meta = getattr( self.Inventory, property ).meta
        field = form.text(
            id = 'numprocessors',
            name = '%s.numprocessors' % prefix,
            label = meta['label'],
            value = record.numprocessors,
            )
        field.help = meta['tip']
        if errors and errors.get('numprocessors'): field.error = errors['numprocessors']

        property = 'walltime'
        meta = getattr( self.Inventory, property ).meta
        field = form.text(
            id = 'walltime',
            name = '%s.walltime' % prefix,
            label = meta['label'],
            value = record.walltime,
            )
        field.help = meta['tip']
        if errors and errors.get('walltime'): field.error = errors['walltime']
        return form


    def processUserInputs(self):
        errors = {}
        
        short_description = self.inventory.short_description
        server = self.inventory.server
        
        numprocessors = self.inventory.numprocessors
        if not isPositiveInteger(numprocessors):
            errors['numprocessors'] = self.Inventory.numprocessors.meta['tiponerror']
            
        walltime = self.inventory.walltime
        if not isPositiveInteger(walltime):
            errors['walltime'] = self.Inventory.walltime.meta['tiponerror']

        if errors: raise InputProcessingError, errors
        
        record = self.getRecord()

        record.short_description = short_description
        record.server = server
        record.numprocessors = numprocessors
        record.walltime = walltime

        director = self.director
        director.clerk.updateRecord( record )
        
        return record


    def getRecord(self):
        'get DB record'
        id = self.inventory.id
        director = self.director
        clerk = director.clerk
        return clerk.getRecordByID( self.DBTable, id )



def isPositiveInteger(candiate):
    try: value = int(candiate)
    except: return False
    return value > 0


def _describe_computation(computation):
    return '%s %s' % (computation.__class__.__name__, computation.id)


def form(): return Form()


# version
__id__ = "$Id$"

# End of file 
