# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                   Jiao Lin
#                      California Institute of Technology
#                        (C) 2007  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from vnf.components.Form import Form as base
from vnf.components.PyHtmlTable import PyHtmlTable
from vnf.components.Actor import actionRequireAuthentication, action_link
from vnf.components.DBObjectForm import formactor_action_prefix

class Form( base ):

    class Inventory( base.Inventory ):

        import pyre.inventory as inv
        
        id = inv.str( 'id', default = '' )
        
        short_description = inv.str('short_description', default = '' )
        short_description.meta['tip'] = 'A short description'
        
        listOfAtoms = inv.str('listOfAtoms')
        
        ax = inv.str('ax',default = '1.0')
        ay = inv.str('ay',default = '0.0')
        az = inv.str('az',default = '0.0')
        bx = inv.str('bx',default = '0.0')
        by = inv.str('by',default = '1.0')
        bz = inv.str('bz',default = '0.0')
        cx = inv.str('cx',default = '0.0')
        cy = inv.str('cy',default = '0.0')
        cz = inv.str('cz',default = '1.0')


    def  expand(self, form, errors = None, properties = None, id = ''):
        '''expand an existing form with fields from this component'''
                  
        prefix = formactor_action_prefix
        i = self.inventory
        
        self.sampleDescription = form.text(id='text1', name='%s.sampleDescription'%prefix, label='Sample Description')
        p = form.paragraph()
        p.text = ['Import the sample from a database:']
        p = form.paragraph()
        p.text = ['<a href="java/cod2.jnlp"><img src="images/CodPicture.gif" alt="CodUI"/></a>']        
        
        p = form.paragraph()
        p.text = ['or input material parameters manually:']      
        box = form.box()
        self.ax = box.text(id='ax', name='%s.ax' % prefix, label='a: (x)', 
                      value = self.inventory.ax)        
        self.ay = box.text(id='ay', name='%s.ay' % prefix, label='(y)', 
                      value = self.inventory.ay)   
        self.az = box.text(id='az', name='%s.az' % prefix, label='(z)', 
                      value = self.inventory.az)  
        box = form.box()
        self.bx = box.text(id='bx', name='%s.bx' % prefix, label='b: (x)', 
                      value = self.inventory.bx)        
        self.by = box.text(id='by', name='%s.by' % prefix, label='(y)', 
                      value = self.inventory.by)   
        self.bz = box.text(id='bz', name='%s.bz' % prefix, label='(z)', 
                      value = self.inventory.bz)  
        box = form.box()
        self.cx = box.text(id='cx', name='%s.cx' % prefix, label='c: (x)', 
                      value = self.inventory.cx)        
        self.cy = box.text(id='cy', name='%s.cy' % prefix, label='(y)', 
                      value = self.inventory.cy)   
        self.cz = box.text(id='cz', name='%s.cz' % prefix, label='(z)', 
                      value = self.inventory.cz)  
        self.listOfAtoms = form.textarea(id='listOfAtoms', name='%s.listOfAtoms' % prefix, 
                                  label='List of atoms (i.e. H  0.0  0.0  0.5)', rows=20, 
                                  value = self.inventory.listOfAtoms)
          
    def processUserInputs(self):   
        '''process user inputs for material and save them to db
        commit: if true, commit to database record. 
        '''
        polycrystalRecord = self.director.clerk.getRecordByID( self.name, self.inventory.id )
        polycrystalRecord.short_description = self.inventory.short_description
        props = ['ax','ay','az','bx','by','bz','cx','cy','cz']
        for prop in props:
            value = getattr(self.inventory, prop)
            setattr(polycrystalRecord, prop, float(value))
        polycrystalRecord.listOfAtoms =     
        self.director.clerk.updateRecord(polycrystalRecord)
        return polycrystalRecord
    
formactor_action_prefix = 'actor.form-received' # assumed actor is a form actor

def form(): return Form( 'polycrystal' )


# version
__id__ = "$Id$"

# End of file 
