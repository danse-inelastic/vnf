# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                      California Institute of Technology
#                        (C) 2007  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from vnf.components.Form import Form as base
from vnf.components.Actor import actionRequireAuthentication, action_link
from vnf.components.DBObjectForm import formactor_action_prefix

class Form( base ):

    class Inventory( base.Inventory ):

        import pyre.inventory as inv
        id = inv.str( 'id', default = '' )
        id.meta['tip'] = 'Scattering kernel calculation id'
        
        short_description = inv.str('short_description', default = '' )
        short_description.meta['tip'] = 'A short description'
        
        engine = inv.str('engine', default='vasp')
        engine.validator=inv.choice(['vasp', 'ab init'])
        engine.meta['tip'] = 'Ab initio engine'
        
        xcFunctional = inv.str('xcFunctional', default='PAW-PBE')
        xcFunctional.validator=inv.choice(['PAW-PBE', 'PAW-GGA', 'LDA'])
        xcFunctional.meta['tip'] = 'Exchange correlation functional'
        
        kineticEnergyCutoff = inv.float('kineticEnergyCutoff', default=140.0)
        kineticEnergyCutoff.meta['tip'] = 'Kinetic energy cutoff'

        #monkhorstPackMesh.meta['tip'] = 'Monkhorst pack mesh'
        nKx = inv.int('nKx')
        nKy = inv.int('nKy')
        nKz = inv.int('nKz')
        
        #supercell.meta['tip'] = 'Supercell for phonon calculation'
        scx = inv.int('scx')
        scy = inv.int('scy')
        scz = inv.int('scz')
        
        displacementAmplitude = inv.float('displacementAmplitude', default=0.01)
        displacementAmplitude.meta['tip'] = 'Displacement amplitude'      
        
        #qGrid.meta['tip'] = 'Q grid for phonon calculation'
        nQx = inv.int('nQx')
        nQy = inv.int('nQy')
        nQz = inv.int('nQz')


    DBTable = 'abinitio'
        
    def expand(self, form):
        '''expand an existing form with fields from this component'''
        prefix = formactor_action_prefix
#        for property in self.parameters:
#        
#            value = getattr( record, property )
#            exec 'self.inventory.%s = value' % property
#            value = tostr( getattr(self.inventory, property) )
#            
#            field = form.text(
#                id = property,
#                name='%s.%s' % (prefix, property),
#                label=property,
#                value = value)
#            
#            descriptor = getattr(self.Inventory, property)
#            tip = descriptor.meta.get('tip')
#            if tip:
#                field.help = tip
        record = self.getRecord()
        
        self.short_description = form.text(
                id = 'text0',
                name='short_description',
                label='Name of this calculation',
                value = record.short_description)
        
        p = form.paragraph()
        p.text = ['<h2>Electronic structure settings</h2>']

#drop down menu for abinitio engine: [vasp, (abinit)]
        choices=['vasp','abinit (not completely functional)']
        entries=enumerate(choices)

        eng=str(record.engine)
        engine = form.selector(id='selector1',
                name = 'abInitioHarmonic.engine',
                entries = entries,
                label = 'Electronic Structure Engine',
                selected = eng)    

# drop down menu XC-functional type: [PAW-PBE, PAW-GGA, LDA]
        choices=['PAW-PBE', 'PAW-GGA', 'LDA']
        entries=enumerate(choices)

        xcFunctional = form.selector(id='selector2',
            name = 'abInitioHarmonic.xcFunctional',
            entries = entries,
            label = 'Exchange correlation functional',
            selected = record.xcFunctional,
            )
        
        kineticEnergyCutoff = form.text(
                id = 'text1',
                name='%s.kineticEnergyCutoff' % prefix,
                label='Kinetic energy cutoff (eV)',
                value = str(record.kineticEnergyCutoff))
        
        box = form.box()
        nKx = box.text(
            id = 'text2',
            name='%s.nKx' % prefix,
            label = 'Number of k-points (a*)',
            value = str(record.monkhorstPackMesh[0]))  
        nKy = box.text(
            id = 'text3',
            name='%s.nKy' % prefix,
            label = 'Number of k-points (b*)',
            value = str(record.monkhorstPackMesh[1]))       
        nKz = box.text(
            id = 'text4',
            name='%s.nKz' % prefix,
            label = 'Number of k-points (c*)',
            value = str(record.monkhorstPackMesh[2]))     

        p = form.paragraph()
        p.text = ['<h2>Phonon Settings</h2>']

        box = form.box()
        supercellx = box.text(
                id = 'text5',
                name='%s.scx' % prefix,
                label='Supercell expansion (a)',
                value = str(record.supercell[0]))  
        supercelly = box.text(
                id = 'text6',
                name='%s.scy' % prefix,
                label='Supercell expansion (b)',
                value = str(record.supercell[1]))       
        supercellz = box.text(
                id = 'text7',
                name='%s.scz' % prefix,
                label='Supercell expansion (c)',
                value = str(record.supercell[2]))   
        displacementAmplitude = form.text(
                id = 'text8',
                name='%s.displacementAmplitude' % prefix,
                label='Displacement amplitude',
                value = str(record.displacementAmplitude)) 
        box = form.box()
        Qx = box.text(
                id = 'text9',
                name='%s.nQx' % prefix,
                label='Phonon Q-points (a*)',
                value = str(record.qGrid[0]))  
        Qy = box.text(
                id = 'text10',
                name='%s.nQy' % prefix,
                label='Phonon Q-points (b*)',
                value = str(record.qGrid[1]))       
        Qz = box.text(
                id = 'text11',
                name='%s.nQz' % prefix,
                label='Phonon Q-points (c*)',
                value = str(record.qGrid[2])) 
        

    def processUserInputs(self):
        record = self.getRecord()
        props = [
            'engine',
            'xcFunctional',
            'kineticEnergyCutoff',
            'displacementAmplitude',
            ]
        for prop in props:
            value = getattr(self.inventory, prop)
            setattr(record, prop, value)
            continue

        record.monkhorstPackMesh = [self.inventory.nKx, self.inventory.nKy, self.inventory.nKz]
        record.supercell = [self.inventory.scx, self.inventory.scy, self.inventory.scz]
        record.qGrid = [self.inventory.nQx, self.inventory.nQy, self.inventory.nQz]
        self.director.clerk.updateRecord(record)
        return record
    
    
    def getRecord(self):
        'get DB record'
        return self.director.clerk.getRecordByID( self.DBTable, self.inventory.id )
    
    


def form(): return Form( 'planeWaveHarmonic' )


# version
__id__ = "$Id$"

# End of file 
