# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                   Jiao Lin
#                      California Institute of Technology
#                        (C) 2007  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from vnf.components.Form import Form as base
from vnf.components.Actor import actionRequireAuthentication, action_link
from vnf.components.DBObjectForm import formactor_action_prefix

class Form( base ):

    class Inventory( base.Inventory ):

        import pyre.inventory as inv
        id = inv.str( 'id', default = '' )
        height = inv.str('height', default = 0.0 )
        height.meta['tip'] = 'height of cylinder'
        innerRadius = inv.str('innerRadius', default = 0.0 )
        innerRadius.meta['tip'] = 'inner radius of cylinder'
        outerRadius = inv.str('outerRadius', default = 0.0 )
        outerRadius.meta['tip'] = 'outer radius of cylinder'


    def  expand(self, form, errors = None, properties = None, id = ''):
        '''expand an existing form with fields from this component'''
        
        prefix = formactor_action_prefix
        director = self.director        
        
        if not id:
            tableClass = director.clerk._getTable('cylinder')
            record = director.clerk.newObject(tableClass)
            id = self.inventory.id = record.id
        else:
            record = director.clerk.getRecordByID('cylinders', id)
            self.inventory.id = record.id
          
        p = form.paragraph()
        p.text=['Input the shape parameters for an annular, cylindrical sample.']
        height = form.text(id='height', name='%s.height' % prefix, label='Height (cm)',
                           value = record.height)        
        innerRadius = form.text(id='innerradius', name='%s.innerradius' % prefix, 
                                label='Inner radius (cm)', value = record.innerradius) 
        outerRadius = form.text(id='outerradius', name='%s.outerradius' % prefix, 
                                label='Outer radius (cm)', value = record.outerradius)  
          
    def processUserInputs(self):   
        '''process user inputs and save them to db'''

        director = self.director
        
        try: # first try to get a record with the inventory id from the db
            record = director.clerk.getRecordByID('cylinders', self.inventory.id)
        except: # if can't find, create a new one
            tableClass = director.clerk._getTable('cylinder')
            record = director.clerk.newDbObject(tableClass)
            self.inventory.id = record.id
      
        record.height = self.inventory.height
        record.innerradius = self.inventory.innerRadius
        record.outerradius = self.inventory.outerRadius
            
        self.director.clerk.updateRecord(record)
        return record
    

def form(): return Form( 'inputCylinder' )


# version
__id__ = "$Id$"

# End of file 
