from vnf.components.MaterialSimulationWizard import \
     actionRequireAuthentication, action_link, AuthenticationError, InputProcessingError

from vnf.components.MaterialSimulationWizard import MaterialSimulationWizard as base


class SqeFromMdWizard(base):
    
    
    class Inventory(base.Inventory):
        import pyre.inventory
        type = pyre.inventory.str('type', default='sqefrommds')
        

    def configureSimulation(self, director, simulation):
        self.inventory.type = 'sqefrommds'
        id = self.inventory.id = simulation.id

        try:
            page = director.retrieveSecurePage( 'sqefrommdwizard' )
        except AuthenticationError, err:
            return err.page
        
        main = page._body._content._main
        document = main.document(title='S(Q,E) generation from atom trajectories' )       
        document.byline = '<a href="http://danse.us">DANSE</a>'        
        
        formcomponent = self.retrieveFormToShow('sqeFromMd')
        formcomponent.director = director
        # build the form form
        form = document.form(name='', action=director.cgihome)
        # specify action
        action = actionRequireAuthentication(          
            actor = 'sqefrommdwizard', 
            sentry = director.sentry,
            routine = 'createJob',
            label = '',
            id = self.inventory.id,
            arguments = {'form-received': formcomponent.name },
            )
        from vnf.weaver import action_formfields
        action_formfields( action, form )
        # expand the form with fields of the data object that is being edited
        formcomponent.expand( form )
        next = form.control(name='submit',type="submit", value="next")
#        self._footer( document, director )
        return page  
    
    def createJob(self, director):
        self.inventory.type = 'sqefrommds'
        id = self.inventory.id
        
        try:
            page = self._retrievePage(director)
        except AuthenticationError, err:
            return err.page

        if not self._readyForSubmission(director):
            return self._notReadyForSubmissionAlert(director)

        # job
        id = self.inventory.id
        type = self.inventory.type
        computation = director.clerk.getRecordByID(type, id)
        jobref = computation.job

        if not jobref or not jobref.id:
            # create a new job
            from vnf.components.Job import new_job
            job = new_job(director)
            job.computation = computation
            director.clerk.updateRecord(job)
            
            computation.job = job
            director.clerk.updateRecord(computation)
        else:
            job = director.clerk.dereference(jobref)
            
        # redirect to job submission page
        actor = 'job'
        routine = 'view'
        return self.redirect(director, actor, routine, id = job.id)
    
    def _readyForSubmission(self, director):
        return True
        
    
def actor():
    return SqeFromMdWizard('sqefrommdwizard')


# version
__id__ = "$Id$"