#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                  Jiao Lin
#                     California Institute of Technology
#                     (C) 2007-2009  All Rights Reserved
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from vnf.components.Actor import Actor as Base, action, action_link

propstomatch = [
    'firstname',
    'lastname',
    'email',
    'organization',
    ]

class Actor(Base):

    class Inventory(Base.Inventory):

        import pyre.inventory

        firstname = pyre.inventory.str(name='firstname')
        lastname = pyre.inventory.str(name='lastname')
        username = pyre.inventory.str(name='username')
        email = pyre.inventory.str(name="email")
        password = pyre.inventory.str(name="password")
        confirmation = pyre.inventory.str(name="confirmation")
        organization = pyre.inventory.str(name='organization')


    def default(self, director):
        page = director.retrievePage( 'login' )

        main = page._body._content._main

        # populate the main column
        document = main.document( title = 'Password reset' )
        document.description = ('')

        p = document.paragraph()
        signup_action = action(
            label = 'sign up',
            sentry = director.sentry,
            actor = 'reset-password', 
            routine = 'interview',
            )
        link = action_link( signup_action, director.cgihome ) 
        p.text  = [
            'If you lost your password, please %s again with the same' % link,
            'username you have used before.',
            ]
        return page


    def interview(self, director, errors=None):
        page = director.retrievePage("registration")
        
        main = page._body._content._main

        # populate the main column
        document = main.document( title = 'Reset your vnf password' )
        document.description = ('')

        p = document.paragraph()
        action1 = action(actor='login', label='sign in')
        signin_link = action_link( action1, director.cgihome)
        p.text = [
            'To reset your password, you will need to refill this sign-up form',
            'with the information that match our record of your account.',
            'If you now recall your password,',
            'please %s' % signin_link,
            ]

        # build the registration form
        form = document.form(
            name='registration', legend='Your VNF account details', action=director.cgihome)
        
        form.hidden(name='actor', value='reset-password')
        form.hidden(name='routine', value='validateState')

        prefix = self.name
        def _pn(name): return '%s.%s' % (prefix, name)

        def _errorAlert(prop, field):
            if errors and errors.get(prop):
                field.error = errors[prop]
            return

        firstname = form.text(
            id='firstname', name=_pn('firstname'), label='First name',
            value = self.firstname)
        firstname.help = ''
        _errorAlert('firstname', firstname)
        
        lastname = form.text(
            id='lastname', name=_pn('lastname'), label='Last name',
            value = self.lastname)
        lastname.help = ''
        _errorAlert('lastname', lastname)
        
        username = form.text(
            id='username', name=_pn('username'), label='Desired Login Name',
            value = self.username)
        username.help = 'Usernames are case sensitive; make sure your caps lock key is not enabled.'
        _errorAlert('username', username)
        
        password = form.password(id='password', name=_pn('password'), label='Password')
        password.help = ('Passwords are also case sensitive.')
        _errorAlert('password', password)
 
        confirmation = form.password(id='confirmation', name=_pn('confirmation'), label='Re-enter password')
        confirmation.help = ('Re-enter your password to confirm')

        email = form.text(id='email', name=_pn('email'), label='Email',
                          value = self.email)
        email.help = ('This address is used to keep you informed of status of your virtual experiments, updates to your VNF service, etc.')
        _errorAlert('email', email)

        organization = form.text(
            id='organization', name=_pn('organization'), label='Organization',
            value = self.organization)
        organization.help = ()
        _errorAlert('organization', organization)
        
        submit = form.control(name="submit", type="submit", value="Reset my password")
        
        return page


    def validateState(self, director):
        errors = {}
        if self.password != self.confirmation:
            errors['password'] = 'Password and confirmation you entered do not match.'

        from vnf.dom.Registrant import Registrant as Table
        username = self.username
        all = director.clerk.db.fetchall( Table, where = "username='%s'" % username )
        if len(all)==0:
            errors['username'] = ''.join([
                'Username %r has not been registered.' % username,
                'Please input the username you used before.',
                ])
            return self.interview(director, errors=errors)

        registrant = director.clerk.getRegistrant(username)
        for prop in propstomatch:
            if getattr(self, prop) != getattr(registrant, prop):
                errors[prop] = 'Your input does not match our record'
            continue

        if errors:
            return self.interview(director, errors=errors)
        return self.register(director)


    def register(self, director):
        # save into the database
        registrant = director.clerk.getRegistrant(self.username)

        for prop in propstomatch:
            assert getattr(registrant, prop) == getattr(self, prop)
            continue
        
        registrant.password = self._encode(director, self.password)
        
        director.clerk.updateRecord(registrant)

        from vnf.components.misc import announce

        # send an acknowlegement to registrant
        announce(director, 'reset-password', registrant)

        # alert administrators
        announce(director, 'reset-password-alert', registrant)
        
        return director.retrievePage("password-reset-complete")


    def __init__(self, name=None):
        if name is None:
            name = "reset-password"
        super(Actor, self).__init__(name)
        return


    def _configure(self):
        super(Actor, self)._configure()

        self.firstname = self.inventory.firstname
        self.lastname = self.inventory.lastname
        self.username = self.inventory.username
        self.email = self.inventory.email
        self.password = self.inventory.password
        self.confirmation = self.inventory.confirmation
        self.organization = self.inventory.organization

        return


    def _encode(self, director, password):
        method = director.clerk.getUser('__method__').password
        
        from vnf.components import usersFromDB
        encoder = usersFromDB()._encoders[method]

        return encoder(password)


    pass # end of Actor



def actor():
    return Actor()


# version
__id__ = "$Id$"

# End of file 
