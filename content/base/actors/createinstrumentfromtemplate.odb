#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Jiao Lin
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from vnf.components.Actor import action_link, action, actionRequireAuthentication, AuthenticationError

from vnf.components.FormActor import FormActor as base, InputProcessingError
class Actor(base):

    class Inventory(base.Inventory):

        import pyre.inventory
        template = pyre.inventory.str('template')
        id = pyre.inventory.str('id')
        
        editee = pyre.inventory.str('editee')
        
        insertafter = pyre.inventory.int('insertafter')

        submit = pyre.inventory.str('submit')
        

    def start(self, director):
        try:
            page = self._retrievePage(director)
        except AuthenticationError, err:
            return err.page

        if self.inventory.id:
            raise RuntimeError
        
        # create a new instrument by copying from the template
        template = director.clerk.getInstrument(self.inventory.template)
        instrument = director.clerk.deepcopy(template)
        self.inventory.id = instrument.id

        return self.edit(director)


    def edit(self, director):
        return self.edit_instrument(director)


    def edit_instrument(self, director, errors=None):
        try:
            page = self._retrievePage(director)
        except AuthenticationError, err:
            return err.page

        id = self.inventory.id
        instrument = director.clerk.getInstrument(id)
        
        main = page._body._content._main
        document = main.document(title= 'Instrument editor')

        components = director.clerk.dereference(instrument.components)
        compsdict = {}
        for name, component in components: compsdict[name]=component

        # form component
        formcomponent = self.retrieveFormToShow('instrument')
        formcomponent.inventory.id = id
        formcomponent.director = director
        
        # create a dummy form
        form = document.form(
            name='instrument editor',
            legend= 'Instrument editor: Instrument #%s' % instrument.id,
            action=director.cgihome)

        # specify action
        action = actionRequireAuthentication(
            label = '',
            sentry = director.sentry,
            actor = 'createinstrumentfromtemplate', 
            routine = 'verify_instrument_configuration',
            id = self.inventory.id,
            arguments = {'form-received': formcomponent.name },
            )
        from vnf.weaver import action_formfields
        action_formfields( action, form )

        #
        formcomponent.expand(form, errors=errors)


        #
        p = form.paragraph()
        p.text = ['<h4>Components</h4>']
        
        # edit components link
        action = actionRequireAuthentication(
            label = 'here',
            sentry = director.sentry,
            actor = 'createinstrumentfromtemplate', 
            routine = 'edit_components',
            id = self.inventory.id,
            )
        link = action_link(action, director.cgihome)
        p = form.paragraph()
        p.text = [
            'To manage the neutron components in your instrument,',
            'you can start from %s.' % link,
            ]

        # button
        submit = form.control(name="submit", type="submit", value="Done")

        # cancel
        action = actionRequireAuthentication(
            label = 'Cancel',
            sentry = director.sentry,
            actor = 'instrument', 
            routine = 'show',
            id = self.inventory.id,
            )
        link = action_link(action, director.cgihome)
        p = form.paragraph()
        p.text = [link]
        
        return page


    def edit_components(self, director, errors=None):
        try:
            page = self._retrievePage(director)
        except AuthenticationError, err:
            return err.page

        id = self.inventory.id
        instrument = director.clerk.getInstrument(id)
        
        main = page._body._content._main
        document = main.document(title= 'Instrument editor')

        components = director.clerk.dereference(instrument.components)
        compsdict = {}
        for name, component in components: compsdict[name]=component

        p = document.paragraph()
        p.text = [
            'The following is a graph of all neutron components',
            'in this neutron instrument.',
            ]

        p = document.paragraph()
        p.text = [
            'Here, you can edit a component, move a component, or',
            'delete a component from this instrument.',
            ]

        p = document.paragraph()
        p.text = [
            'You can also insert a neutron component to the instrument.',
            ]

        # present the component list
        # 1. gather texts for all components
        from vnf.dom.neutron_components.SampleComponent import SampleComponent
        texts = []
        for i, name in enumerate(instrument.componentsequence):

            component = compsdict[name]
            
            if isinstance(component, SampleComponent):
                # if it is sample place holder, no action links
                texts.append(name)
            else:
                action = actionRequireAuthentication(
                    label = 'edit',
                    sentry = director.sentry,
                    actor = 'createinstrumentfromtemplate', 
                    routine = 'edit_neutron_component',
                    id = self.inventory.id,
                    editee = '%s,%s' % (component.name, component.id)
                    )
                editlink = action_link( action, director.cgihome )

                action = actionRequireAuthentication(
                    label = 'move',
                    sentry = director.sentry,
                    actor = 'createinstrumentfromtemplate', 
                    routine = 'move_neutron_component',
                    id = self.inventory.id,
                    editee = '%s' % name,
                    )
                movelink = action_link( action, director.cgihome )

                action = actionRequireAuthentication(
                    label = 'delete',
                    sentry = director.sentry,
                    actor = 'createinstrumentfromtemplate', 
                    routine = 'delete_neutron_component_confirmation',
                    id = self.inventory.id,
                    editee = name,
                    )
                deletelink = action_link( action, director.cgihome )
                texts.append(
                    '%s: (%s, %s, %s)' % (
                        name,
                        editlink,
                        movelink,
                        deletelink,
                        )
                    )

            # add a vertical line for connecting components
            if i == len(components)-1:
                label = "append"
                symbol = '*'
            else:
                label = "insert"
                symbol = '|'
            action = actionRequireAuthentication(
                label = label,
                sentry = director.sentry,
                actor = 'createinstrumentfromtemplate',
                routine = 'insert_neutron_component',
                id = self.inventory.id,
                insertafter = i,
                )
            link = action_link(action, director.cgihome)
            texts.append( '%s<small>%s</small>' % (symbol, link) )
            continue

        # the "prepend" link
        symbol = '*'
        label = 'prepend'
        action = actionRequireAuthentication(
            label = label,
            sentry = director.sentry,
            actor = 'createinstrumentfromtemplate',
            routine = 'insert_neutron_component',
            id = self.inventory.id,
            insertafter = -1,
            )
        link = action_link(action, director.cgihome)
        prepend = '%s<small>%s</small>' % (symbol, link)
        texts = [prepend] + texts
        
        # 2. create a table. This is a quick hack
        htmllines = []
        htmllines.append('<table>')
        for text in texts:
            htmllines.append('<tr>')
            htmllines.append('<td align="center">')
            htmllines.append(text)
            htmllines.append('</td>')
            htmllines.append('</tr>')
            continue
        htmllines.append('</table>')

        literal = document.literal()
        literal.text = htmllines
        
        # finish
        action = actionRequireAuthentication(
            label = 'Done',
            sentry = director.sentry,
            actor = 'instrument', 
            routine = 'show',
            id = self.inventory.id,
            )
        link = action_link(action, director.cgihome)
        p = document.paragraph()
        p.text = [link]
        
        return page


    def verify_instrument_configuration(self, director):
        try:
            page = self._retrievePage(director)
        except AuthenticationError, err:
            return err.page

        try:
            self.processFormInputs( director )
        except InputProcessingError, err:
            errors = err.errors
            self.form_received = None
            director.routine = 'edit_instrument'
            return self.edit_instrument( director, errors = errors )
        
        return self.done(director)


    def done(self, director):
        actor = 'instrument'
        routine = 'show'
        return director.redirect(actor=actor, routine=routine, id=self.inventory.id)
        

    def delete_neutron_component_confirmation(self, director):
        try:
            page = self._retrievePage(director)
        except AuthenticationError, err:
            return err.page

        componentname = self.inventory.editee

        main = page._body._content._main
        document = main.document(title= 'Editing instrument %s' % self.inventory.id)

        p = document.paragraph()
        p.text = [
            'You are about to delete component %r.' % componentname,
            ]

        p = document.paragraph()
        
        p = document.paragraph()
        p.text = [
            'Are you sure you want to delete component %s?' % componentname,
            ]

        p = document.paragraph()
        action = actionRequireAuthentication(
            label = 'Yes',
            sentry = director.sentry,
            actor = 'createinstrumentfromtemplate', 
            routine = 'delete_neutron_component',
            id = self.inventory.id,
            editee = componentname,
            )
        yeslink = action_link(action, director.cgihome)
        p.text = [
            yeslink,
            ]

        p = document.paragraph()
        action = actionRequireAuthentication(
            label = 'No',
            sentry = director.sentry,
            actor = 'createinstrumentfromtemplate', 
            routine = 'edit_components',
            id = self.inventory.id,
            )
        nolink = action_link(action, director.cgihome)
        p.text = [
            nolink,
            ]
        return page


    def delete_neutron_component(self, director):
        try:
            page = self._retrievePage(director)
        except AuthenticationError, err:
            return err.page

        componentname = self.inventory.editee
        self._delete_component(director, componentname)
        return self.edit_components(director)


    def move_neutron_component(self, director, errors=None): 
        try:
            page = self._retrievePage(director)
        except AuthenticationError, err:
            return err.page

        componentname = self.inventory.editee

        main = page._body._content._main

        # populate the main column
        title = 'Editing instrument %s' % self.inventory.id
        document = main.document(title=title)
        document.description = ''
        document.byline = 'byline?'

        p = document.paragraph()
        p.text = [
            '',
            ]

        formcomponent = self.retrieveFormToShow('move_neutron_component')
        formcomponent.director = director
        
        # create form
        legend = 'Change position and orientation of neutron component %r' % (
            componentname,)
        form = document.form(
            name='moveneutroncomponent',
            legend= legend,
            action=director.cgihome)

        # specify action
        action = actionRequireAuthentication(
            label = '',
            sentry = director.sentry,
            actor = 'createinstrumentfromtemplate',
            routine = 'verify_neutron_component_move',
            id = self.inventory.id,
            editee = componentname,
            arguments = {'form-received': formcomponent.name } )
        from vnf.weaver import action_formfields
        action_formfields( action, form )

        # expand the form with fields of the data object that is being edited
        instrument = director.clerk.getInstrument(self.inventory.id)
        formcomponent.expand(
            form,
            instrument=instrument, componentname=componentname,
            errors=errors,)

        # run button
        submit = form.control(name="actor.form-received.submit", type="submit", value="Move component")

        # cancel 
        action = actionRequireAuthentication(
            label = 'Cancel',
            sentry = director.sentry,
            actor = 'createinstrumentfromtemplate', 
            routine = 'edit_components',
            id = self.inventory.id,
            )
        link = action_link(action, director.cgihome)
        p = form.paragraph()
        p.text = [link]
        
        return page


    def verify_neutron_component_move(self, director):
        try:
            page = self._retrievePage(director)
        except AuthenticationError, err:
            return err.page
        
        try:
            position, orientation, reference = self.processFormInputs( director )
        except InputProcessingError, err:
            errors = err.errors
            self.form_received = None
            director.routine = 'move_neutron_component'
            return self.move_neutron_component( director, errors = errors )

        instrument = director.clerk.getInstrument(self.inventory.id)
        geometer = instrument.geometer

        componentname = self.inventory.editee

        assert componentname in instrument.componentsequence
        
        geometer.delete(componentname, director.clerk.db)
        geometer.register(
            componentname, position, orientation, director.clerk.db,
            reference=reference)
        
        return self.edit_components(director)
    

    def edit_neutron_component(self, director, errors=None):
        try:
            page = self._retrievePage(director)
        except AuthenticationError, err:
            return err.page

        editee = self.inventory.editee
        tablename, id = editee.split(',')
        component = director.clerk.getRecordByID(tablename, id)
        typename = component.__class__.__name__

        main = page._body._content._main
        # populate the main column
        document = main.document(
            title='Editing istrument %s' % self.inventory.id)
        document.description = ''
        document.byline = 'byline?'

        p = document.paragraph()
        p.text = [
            '',
            ]

        formcomponent = self.retrieveFormToShow(typename.lower())
        formcomponent.inventory.id = component.id
        formcomponent.director = director
        
        # create form
        form = document.form(
            name=typename,
            legend= formcomponent.legend(),
            action=director.cgihome)

        # specify action
        action = actionRequireAuthentication(
            label = '',
            sentry = director.sentry,
            actor = 'createinstrumentfromtemplate', 
            routine = 'verify_neutron_component_configuration',
            id = self.inventory.id,
            editee = editee,
            arguments = {'form-received': formcomponent.name } )
        from vnf.weaver import action_formfields
        action_formfields( action, form )

        # expand the form with fields of the data object that is being edited
        formcomponent.expand(form, errors=errors)

        # run button
        submit = form.control(name="actor.form-received.submit", type="submit", value="Continue")

        # cancel 
        action = actionRequireAuthentication(
            label = 'Cancel',
            sentry = director.sentry,
            actor = 'createinstrumentfromtemplate', 
            routine = 'edit_components',
            id = self.inventory.id,
            )
        link = action_link(action, director.cgihome)
        p = form.paragraph()
        p.text = [link]
        return page


    def verify_neutron_component_configuration(self, director):
        try:
            page = self._retrievePage(director)
        except AuthenticationError, err:
            return err.page
        
        try:
            self.processFormInputs( director )
        except InputProcessingError, err:
            errors = err.errors
            self.form_received = None
            director.routine = 'edit_neutron_component'
            return self.edit_neutron_component( director, errors = errors )

        return self.edit_components(director)


    def insert_neutron_component(self, director, errors=None):
        try:
            page = self._retrievePage(director)
        except AuthenticationError, err:
            return err.page

        main = page._body._content._main
        
        # populate the main column
        title='Editing instrument %s: Create new component' % self.inventory.id
        document = main.document(title=title)

        # the form component
        formcomponent = self.retrieveFormToShow( 'create_neutron_component' )

        # create the form
        instrument = director.clerk.getInstrument(self.inventory.id)
        form = document.form(
            name='instrument editor',
            legend= 'Instrument editor: %s' % instrument.id,
            action=director.cgihome)

        # specify action
        action = actionRequireAuthentication(
            label = '',
            sentry = director.sentry,
            actor = 'createinstrumentfromtemplate', 
            routine = 'verify_component_insertion',
            id = self.inventory.id,
            insertafter = self.inventory.insertafter,
            arguments = {'form-received': formcomponent.name },
            )
        from vnf.weaver import action_formfields
        action_formfields( action, form )

        # expand the form with fields 
        formcomponent.expand( form, errors = errors )
        
        submit = form.control(name="submit", type="submit", value="Insert")        
        return page


    def verify_component_insertion(self, director):
        try:
            page = self._retrievePage(director)
        except AuthenticationError, err:
            return err.page
        
        name, type = self.processFormInputs( director )

        instrument = director.clerk.getInstrument(self.inventory.id)
        sequence = instrument.componentsequence

        errors = {}
        if name in sequence:
            errors['name'] = 'Component %r already exists, choose a different name' % name

        if errors:
            self.form_received = None
            director.routine = 'edit_neutron_component'
            return self.insert_neutron_component( director, errors = errors )

        self._insert_component(director, self.inventory.insertafter, name, type)
        return self.edit_components(director)        
    

    def __init__(self, name='createinstrumentfromtemplate'):
        base.__init__(self, name)
        return


    def _insert_component(self, director, insertafter, name, type):
        instrument = director.clerk.getInstrument(self.inventory.id)

        # create a new neutron component
        newcomponent = director.clerk.newOwnedObject(type)

        # update instrument.components
        components = instrument.components
        components.add(newcomponent, director.clerk.db, name=name)

        # update instrument.geometer
        geometer = instrument.geometer
        geometer.register(name, (0,0,0), (0,0,0), director.clerk.db, reference='previous')

        # new update instrument.componentsequence
        sequence = instrument.componentsequence
        ncomponents = len(sequence)
        #   list.insert inserts before the given index,
        #   so we have to do some transformations
        if insertafter < 0: index = 0
        else: index = insertafter+1
        sequence.insert(index, name)
        instrument.componentsequence = sequence
        director.clerk.updateRecord(instrument)
        return


    def _delete_component(self, director, name):
        instrument = director.clerk.getInstrument(self.inventory.id)

        componentname = name
        
        # update instrument.components
        componentsref = instrument.components
        components = director.clerk.dereference(componentsref)
        d = {}
        for k,v in components: d[k] = v
        component = d[componentname]
        componentsref.delete(component, director.clerk.db)

        # update instrument.geometer
        geometerref = instrument.geometer
        geometerref.delete(componentname, director.clerk.db)

        # update instrument.componentsequence
        seq = instrument.componentsequence
        del seq[seq.index(componentname)]
        director.clerk.updateRecord(instrument)
        return
    

    def _retrievePage(self, director):
        return director.retrieveSecurePage( 'instrument' )


def actor():
    return Actor()

# version
__id__ = "$Id$"

# End of file 
