#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2007-2008  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#



from vnf.components.FormActor import FormActor as base, action, actionRequireAuthentication, action_link, InputProcessingError, AuthenticationError

class Actor(base):
    
    class Inventory(base.Inventory):

        import pyre.inventory
        id = pyre.inventory.str( 'id', default = '')
        id.meta['tip'] = 'id of reduction session'


    def default(self, director):
        return self.listall( director )


    def listall(self, director):
        try:
            page = director.retrieveSecurePage( 'job' )
        except AuthenticationError, err:
            return err.page

        main = page._body._content._main
        document = main.document(title='Jobs')

        from vnf.dom.Job import Job
        where="creator='%s'" % director.sentry.username
        jobs = director.clerk.indexJobs(where=where).itervalues()

        document.contents.append(jobtable(jobs, director))
        return page


    def edit(self, director, errors=None, id=None):
        try:
            page = director.retrieveSecurePage( 'job' )
        except AuthenticationError, err:
            return err.page
        
        main = page._body._content._main

        job = self.processFormInputs( director )
        if job is None: # input is not from form
            if id is None: id = self.inventory.id
            job = director.clerk.getJob( id )
        else: id = job.id
        
        document = main.document( title = 'Job editor' )

        formcomponent = self.retrieveFormToShow( 'job' )
        formcomponent.inventory.id = id
        formcomponent.director = director

        form = document.form(
            name='job',
            legend = formcomponent.legend(),
            action=director.cgihome)

        # specify action
        action = actionRequireAuthentication(
            actor = 'job', sentry = director.sentry,
            label = '', routine = 'verify',
            id = id,
            arguments = {'form-received': formcomponent.name },
            )
        from vnf.weaver import action_formfields
        action_formfields( action, form )

        # expand the form with fields of the data object that is being edited
        formcomponent.expand(form, errors=errors)

        submit = form.control(name="submit", type="submit", value="Submit")
        
        return page


    def verify(self, director):
        try:
            page = director.retrieveSecurePage( 'neutronexperimentwizard' )
        except AuthenticationError, err:
            return err.page
        
        try:
            self.processFormInputs( director )
        except InputProcessingError, err:
            errors = err.errors
            self.form_received = None
            director.routine = 'edit'
            return self.edit( director, errors = errors )

        return self.submit(director)



    def view(self, director):
        try:
            page = director.retrieveSecurePage( 'job' )
        except AuthenticationError, err:
            return err.page

        id = self.inventory.id
        job = director.clerk.getJob( id )

        # if job has not been submitted, present the submission form
        if job.state in ['created']:
            return self.edit(director, id = id)
        if job.state in ['submissionfailed']:
            return self.view_failed_submission(director, id=id)
        if job.state in ['submitting']:
            return self.in_submission(director, id=id)

        #
        assert job.creator == director.sentry.username

        # update job status
        state = check( job, director )

        # prepare page
        main = page._body._content._main
        document = main.document( title = 'Job # %s: %s' % (
            job.id, job.state ) )

        # put up all info about the job
        record = job
        props = record.getColumnNames()
        lines = ['%s=%s' % (prop, getattr(record, prop) ) for prop in props]
        for line in lines:
            p = document.paragraph()
            p.text = [line]
            continue

        # link to computation
        p = document.paragraph()
        computation_ptr = job.computation
        link = action_link(
            actionRequireAuthentication
            ( actor = 'computation',
              sentry = director.sentry,
              routine = 'view',
              label = 'here',
              id = computation_ptr.id,
              type = computation_ptr.table.__name__,
              ),
            director.cgihome
            )
        p.text = ["To see what this job is about, please click %s" % link]

        # download link
        p = document.paragraph()
        action = actionRequireAuthentication(
            sentry = director.sentry,
            label = 'Download',
            actor = 'job',
            routine = 'download',
            id = id,
            )
        link = action_link(action, director.cgihome)
        p.text = [
            '%s this job' % link,
            ]
        
        # refresh link
        p = document.paragraph()
        link = action_link(
            actionRequireAuthentication
            ( actor = 'job',
              sentry = director.sentry,
              routine = 'view',
              label = 'Refresh',
              id = id,
              ),
            director.cgihome
            )
        p.text = [link]

        return page


    def download(self, director):
        try:
            page = director.retrieveSecurePage( 'job' )
        except AuthenticationError, err:
            return err.page

        import os

        id = self.inventory.id
        job = director.clerk.getJob(id)

        from vnf.applications.PackJobDir import PackJobDir
        PTRFILEEXT = PackJobDir.PTRFILEEXT
        ptrfilepath = '.'.join( [director.dds.abspath(job), PTRFILEEXT] )
        
        # if pointer file does not exists, need to start packing
        if not os.path.exists(ptrfilepath):
            return self._download_start_packing(director)

        # if packing is in process, say that
        s = open(ptrfilepath).read()
        if s == PackJobDir.PACKINGINPROCESS:
            return self._download_packing_in_progress(director)

        # if something is available for download, try to see if it needs update
        server = director.clerk.dereference(job.server)
        jobmtime = director.dds.getmtime(job, server = server)
        ptrmtime = os.path.getmtime(ptrfilepath)
        if jobmtime > ptrmtime + 60*3: # 60*3 -- give 3 minute of delay
            self._debug.log( "jobmtime, ptrmtime = %s, %s" % (jobmtime, ptrmtime) )
            # if job directory is newer than the bar ball, pack again
            return self._download_start_packing(director)

        # hyperlink
        href = os.path.join(director.home, 'tmp', s)

        # prepare page
        main = page._body._content._main
        document = main.document( title = 'Job # %s: %s' % (
            job.id, job.state ) )

        p = document.paragraph()
        link = '<a href="%s">download link</a>' % href
        p.text = ['Here is the %s' % link]

        return page
    

    def submit(self, director, id = None):
        try:
            page = director.retrieveSecurePage( 'job' )
        except AuthenticationError, err:
            return err.page

        if id is None: id = self.inventory.id
        job = director.clerk.getJob(id)

        if job.state in ['submitted', 'running', 'onhold',
                         'finished', 'terminated', 'cancelled']:
            return self.already_submitted(director)
        if job.state in ['submitting']:
            return self.in_submission(director)

        try:
            submit(job, director, debug=0)
        except Exception, err:
            import traceback
            self._debug.log( traceback.format_exc() )
            main = page._body._content._main
            document = main.document( title = 'Job not submitted' )
            p = document.paragraph()
            server = director.clerk.dereference(job.server)
            p.text = [
                'Failed to submit job %s to %s' % (
                job.id, server.short_description, ),
                ]
            return page

        # check state of job
        #check( job, director )
        
        main = page._body._content._main
        document = main.document( title = 'Job in submission' )
        p = document.paragraph()
        server = director.clerk.dereference(job.server)
        p.text = [
            'Job #%s is being submitted to %s' % (
            job.id, server.short_description, ),
            ]
            
        # refresh link
        p = document.paragraph()
        link = action_link(
            actionRequireAuthentication
            ( actor = 'job',
              sentry = director.sentry,
              routine = 'view',
              label = 'here',
              id = id,
              ),
            director.cgihome
            )
        p.text = [
            'To see the status of this job, please click %s' % link,
            ]
            
        return page


    def already_submitted(self, director):
        try:
            page = director.retrieveSecurePage( 'job' )
        except AuthenticationError, err:
            return err.page

        job = director.clerk.getJob(self.inventory.id)
        main = page._body._content._main
        document = main.document( title = 'Job already submitted: %s' % job.id )
        
        p = document.paragraph()
        link = action_link(
            actionRequireAuthentication
            ( actor = 'job',
              sentry = director.sentry,
              routine = 'view',
              label = 'here',
              id = self.inventory.id,
              ),
            director.cgihome
            )
        p.text = [
            'This job has already been submitted. To view its status, please click %s' % link
            ]
        return page


    def in_submission(self, director, id=None):
        try:
            page = director.retrieveSecurePage( 'job' )
        except AuthenticationError, err:
            return err.page

        if id is None: id = self.inventory.id

        job = director.clerk.getJob(id)
        main = page._body._content._main
        document = main.document( title = 'Job is being submmitted: %s' % job.id )
        
        p = document.paragraph()
        link = action_link(
            actionRequireAuthentication
            ( actor = 'job',
              sentry = director.sentry,
              routine = 'view',
              label = 'here',
              id = id,
              ),
            director.cgihome
            )
        p.text = [
            'This job is being submitted. To check its status, please click %s' % link
            ]
        return page


    def view_failed_submission(self, director, id=None):
        try:
            page = director.retrieveSecurePage( 'job' )
        except AuthenticationError, err:
            return err.page

        if id is None: id = self.inventory.id
        job = director.clerk.getJob(id)
        
        main = page._body._content._main
        document = main.document( title = 'Job %s: submission failed' % job.id )
        
        p = document.paragraph()
        p.text = [
            'This job was not submitted successfully. ',
            ]

        #p = document.paragraph()
        #p.text = ['The error was:']
        #p = document.paragraph()
        #p.text = [job.error]

        p = document.paragraph()
        link = action_link(
            actionRequireAuthentication
            ( actor = 'job',
              sentry = director.sentry,
              routine = 'edit',
              label = 'resubmit',
              id = id,
              ),
            director.cgihome
            )
        p.text = [
            'If you are sure the error was fixed, please %s' % link
            ]
        return page


    def _download_start_packing(self, director):
        try:
            page = director.retrieveSecurePage( 'job' )
        except AuthenticationError, err:
            return err.page

        id = self.inventory.id
        job = director.clerk.getJob(id)
        from vnf.components.Job import pack
        pack(job, director, debug=False)

        return self._download_packing_in_progress(director)
    

    def _download_packing_in_progress(self, director):
        try:
            page = director.retrieveSecurePage( 'job' )
        except AuthenticationError, err:
            return err.page

        id = self.inventory.id

        main = page._body._content._main
        document = main.document( title = 'Job %s: packing data' % id )
        
        p = document.paragraph()
        action = actionRequireAuthentication(
            sentry = director.sentry,
            label = 'check back',
            actor = 'job',
            routine = 'download',
            id = id,
            )
        link = action_link(action, director.cgihome)            
        p.text = [
            'We are packing up the job directory for you.',
            'Please %s in a few minutes to download.' % link,
            ]
        return page


from vnf.components.Job import submit, check


def jobtable(jobs, director):
    from vnf.content.table import Model, View, Table
    class model(Model):

        id = Model.Measure(name='id', type='text')
        computation = Model.Measure(name='computation', type='text')
        owner = Model.Measure(name='owner', type='text')
        server = Model.Measure(name='server', type='text')
        #processors
        status = Model.Measure(name='status', type='text')
        time_start = Model.Measure(name='time_start', type='text')
        #time_complete

    def getID(job):
        id = job.id
        action = actionRequireAuthentication(
            sentry = director.sentry,
            label = id,
            actor = 'job',
            routine = 'view',
            id = job.id,
            )
        link = action_link(action, director.cgihome)
        return link
    def getComputation(job):
        computation = job.computation
        if not computation: return 'not defined'
        computation = director.clerk.dereference(computation)
        identifier = computation.short_description or computation.id
        action = actionRequireAuthentication(
            sentry = director.sentry,
            label = identifier,
            actor = 'computation',
            routine = 'view',
            id = computation.id,
            type = computation.__class__.__name__.lower(),
            )
        link = action_link(action, director.cgihome)
        return '%s: %s' % (computation.__class__.__name__, link)
    def getServer(job):
        server = job.server
        if not server: return 'not defined'
        server = director.clerk.dereference(server)
        label = server.short_description or server.id
        return label
    import operator
    generators = {
        'id': getID,
        'computation': getComputation,
        'owner': operator.attrgetter('creator'),
        'server': getServer,
        'status': operator.attrgetter('state'),
        'time_start': operator.attrgetter('time_start'),
        }
    
    class D: pass
    def d(s):
        r = D()
        for attr, g in generators.iteritems():
            value = g(s)
            setattr(r, attr, value)
            continue
        return r
    data = [d(j) for j in jobs]

    class view(View):
        
        columns = [
            View.Column(id='col1',label='ID', measure='id'),
            View.Column(id='col2',label='Computation', measure='computation'),
            #View.Column(id='col3',label='Owner', measure='owner'),
            View.Column(id='col4',label='Server', measure='server'),
            View.Column(id='col5',label='Status', measure='status'),
            View.Column(id='col6',label='Time started', measure='time_start'),
            ]

        editable = False

    table = Table(model, data, view)
    return table


def actor():
    return Actor('job')


# version
__id__ = "$Id: Login.py,v 1.1.1.1 2006-11-27 00:09:47 aivazis Exp $"

# End of file 
