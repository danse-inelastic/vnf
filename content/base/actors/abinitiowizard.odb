#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                  Jiao Lin
#                     California Institute of Technology
#                       (C) 2008  All Rights Reserved
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from vnf.components.MaterialSimulationWizard import \
     actionRequireAuthentication, action_link, AuthenticationError, InputProcessingError

from vnf.components.MaterialSimulationWizard import MaterialSimulationWizard as base


class AbinitioWizard(base):
    
    
    class Inventory(base.Inventory):
        
        import pyre.inventory


    def configureSimulation(self, director, matter=None):
        # self assert computation type
        self.inventory.type = 'abinitio'
        # make sure we have a material to work on
        if matter:
            self.inventory.mattertype = matter.__class__.__name__
            self.inventory.matterid = matter.id
        else:
            matter = director.clerk.getRecordByID(
                self.inventory.mattertype, self.inventory.matterid)

        # prepare page frame
        try:
            page = director.retrieveSecurePage( 'abinitiowizard' )
        except AuthenticationError, err:
            return err.page
        
        # make a new computation record if necessary
        id = self.inventory.id
        from vnf.dom.AbInitio import AbInitio as Computation
        if not id:
            computation = director.clerk.newDbObject(Computation)
            self.inventory.id = id = computation.id
            computation.matter = matter
            director.clerk.updateRecord(computation)
        else:
            computation = director.clerk._getRecordByID(Computation, id)
            assert computation.matter.id == matter.id
            pass


        main = page._body._content._main
        document = main.document(title='Ab initio electronic structure simulation' )
        document.byline = '<a href="http://danse.us">DANSE</a>'    
        
        formcomponent = self.retrieveFormToShow( 'abinitio')
        formcomponent.director = director
        formcomponent.inventory.id = id
        # build the form form
        form = document.form(name='', action=director.cgihome)
        # specify action
        action = actionRequireAuthentication(          
            actor = 'abinitiowizard', 
            sentry = director.sentry,
            routine = 'verifyConfiguration',
            id=self.inventory.id, type=self.inventory.type,
            arguments = {'form-received': formcomponent.name },
            )
        from vnf.weaver import action_formfields
        action_formfields( action, form )
        # expand the form with fields of the data object that is being edited
        formcomponent.expand( form )
        next = form.control(name='submit',type="submit", value="next")
        return page


    def verifyConfiguration(self, director):
        try:
            page = self._retrievePage(director)
        except AuthenticationError, err:
            return err.page
        
        try:
            self.processFormInputs(director)
        except InputProcessingError, err:
            errors = err.errors
            self.form_received = None
            director.routine = 'configureSimulation'
            return self.configureSimulation( director, errors = errors )

        return self.createJob(director)
    

    def _retrievePage(self, director):
        return director.retrieveSecurePage( 'abinitiowizard' ) 


    pass # end of AbinitioWizard


def actor():
    return AbinitioWizard('abinitiowizard')


# version
__id__ = "$Id$"

# End of file 
