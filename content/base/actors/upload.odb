#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                  Jiao Lin
#                     California Institute of Technology
#                       (C) 2007  All Rights Reserved
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from vnf.components.Actor import Actor as base, action, actionRequireAuthentication, action_link, AuthenticationError


class Actor(base):


    class Inventory(base.Inventory):

        import pyre.inventory

        root = pyre.inventory.str( name = 'root', default = '../content/data/tmp/uploads' )
        root.meta['tip'] = 'root of directories to save uploaded files'

        id = pyre.inventory.str(name='id')

        pass # end of Inventory


    def uploader(self, director):
        page = director.retrieveSecurePage('greet')

        # skeleton
        main = page._body._content._main
        document = main.document( title = 'Upload' )

        # unique id for the upload
        from vnf.components.misc import new_id
        uploadid = new_id(director)

        # the uploader widget
        import vnf.content
        action = actionRequireAuthentication(
            sentry = director.sentry,
            actor = 'upload', 
            routine = 'receive_file',
            id = uploadid,
            )
        uploader = vnf.content.uploader(action)
        document.contents.append(uploader)

        #
        return page
    

    def receive_file(self, director):
        page = director.retrieveSecurePage('greet')

        # the directory to save the uploads
        import os
        root = self.inventory.root
        id = self.inventory.id
        directory = os.path.join(root, id)

        # make sure the directory exists
        if not os.path.exists(directory):
            os.makedirs(directory)
            
        # save uploaded files
        uploads = director.getUploads()
        for filename, content in uploads.iteritems():
            path = os.path.join(directory, filename)
            open(path, 'wb').write(content)
            msg = 'saved uploaded file %r to %r.' % (filename, path)
            self._debug.log(msg)
            continue

        # response
        main = page._body._content._main
        document = main.document( title = 'Received file(s)' )
        return page


    def __init__(self, name=None):
        if name is None:
            name = "upload"
        super(Actor, self).__init__(name)
        return


    def _configure(self):
        base._configure(self)
        return


    pass # end of Actor


def actor(): return Actor()


# version
__id__ = "$Id$"

# End of file 
