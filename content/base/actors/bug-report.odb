#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                  Jiao Lin
#                      California Institute of Technology
#                      (C) 2008-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from vnf.components.FormActor import FormActor as base, action, actionRequireAuthentication, action_link, AuthenticationError


class Actor(base):


    class Inventory(base.Inventory):

        import pyre.inventory

        bugid = pyre.inventory.str('bugid')
        
        pass # end of Inventory


    def default(self, director):
        return self.presentform(director)


    def presentform(self, director):
        try:
            page = self._retrievePage(director)
        except AuthenticationError, err:
            return err.page

        main = page._body._content._main
        # populate the main column
        document = main.document(title='Bug report #%s' % self.inventory.bugid)
        document.description = ''

        p = document.paragraph()
        p.text = [
            'Vnf is in alpha-test phase and you may enounter bugs.',
            'It would be helpful if you can provide some details of',
            'how this bug was triggered.',
            'If you don\'t have time to fill out a detailed report',
            'please just click the submit button without any comments,',
            'which would still be helpful.',
            ]

        tracebackdoc = main.document(title='Traceback')
        l = tracebackdoc.literal()
        import sys, cgitb
        l.text = cgitb.html((sys.exc_type, sys.exc_value, sys.exc_traceback)).splitlines()

        commentdoc = main.document(title='Comments')
        formcomponent = self.retrieveFormToShow(
            'bug-report' )
        formcomponent.director = director
        
        # create form
        form = commentdoc.form(
            name='bug-report',
            legend= formcomponent.legend(),
            action=director.cgihome)

        # specify action
        action = actionRequireAuthentication(
            actor = 'bug-report', routine = 'verify',
            sentry = director.sentry,
            bugid = self.inventory.bugid,
            arguments = {'form-received': formcomponent.name },
            )
        from vnf.weaver import action_formfields
        action_formfields( action, form )

        # expand the form with fields of the data object that is being edited
        formcomponent.expand( form )

        # run button
        submit = form.control(name="actor.form-received.submit", type="submit", value="Submit")

        return page


    def verify(self, director):
        try:
            page = self._retrievePage(director)
        except AuthenticationError, err:
            return err.page

        comments = self.processFormInputs( director )
        self._emailComments(comments, director)

        return self.acknowledge(director)


    def acknowledge(self, director):
        try:
            page = self._retrievePage(director)
        except AuthenticationError, err:
            return err.page

        main = page._body._content._main
        # populate the main column
        document = main.document(title='Thank you')
        document.description = ''

        p = document.paragraph()
        p.text = [
            'Thank you for taking time to send the bug report.',
            ]
        return page


    def __init__(self, name=None):
        if name is None:
            name = "bug-report"
        super(Actor, self).__init__(name)
        return


    def _retrievePage(self, director):
        page = 'bug-report'
        return director.retrieveSecurePage(page)


    def _emailComments(self, comments, director):
        from vnf.components.misc import announce
        announcement = 'bug-report'
        username = director.sentry.username
        if not username: return
        user = director.clerk.getUser(username)
        announce(director, announcement, user, self.inventory.bugid, comments)
        return


    def _configure(self):
        base._configure(self)
        return


    pass # end of Actor



def actor():
    return Actor()


# version
__id__ = "$Id$"

# End of file 
