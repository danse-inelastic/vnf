# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                   Jiao Lin
#                      California Institute of Technology
#                        (C) 2008  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from vnf.components.Actor import Actor as base


class Test( base ):

    class Inventory( base.Inventory ):

        import pyre.inventory

        pass # end of Inventory


    def __init__(self, name = 'testtable'):
        base.__init__(self, name)
        return


    def default(self, director):
        page = director.retrievePage( 'greet' )
        main = page._body._content._main
        document = main.document(title = 'table test')

        from vnf.content.Table import Table, ColumnDescriptor

        cols = [
            ColumnDescriptor( 'col1', 'Title', 'text' ),
            ColumnDescriptor( 'col2', 'Date', 'date',
                              valid_range = [ '01/01/1977', '01/01/2008' ] ),
            ]
        table = Table( cols )
        table.addRow( 'abc', '06/06/2006' )
        table.addRow( 'hi', '05/05/2005' )
        
        document.contents.append(table)
        return page
    

    def sheet(self, director):
        page = director.retrievePage( 'greet' )
        main = page._body._content._main
        document = main.document(title = 'test sheet')

        document.contents.append(sheet())
        return page

    pass # end of Test



def actor():
    return Test( ) 




def sheet():

    data = createDataset(10)
    model = createModel(data)
    view = createView(model)

    view.sort('production')
    return view.render(
        columns=(
            "sku", "production", "shipping", 
            "cost",
            "margin",
            "overhead",
            "msrp", 
            "discount", 
            "price"
            ))


def createModel(dataset):

    import praxis.tabular
    pricing = praxis.tabular.newSheet(name="pricing")

    # automatically create columns with data from the following attributes of dataset records
    attributes = ("sku", "production", "shipping", "margin", "overhead", "discount")

    # now, let's add a custom column to compute the cost=production+shipping
    cost = praxis.tabular.newReferenceMeasure(
        name="cost",
        cellFactory=praxis.tabular.sum, domain=["production", "shipping"])

    # the msrp is cost*(1+margin+overhead)
    msrp = praxis.tabular.newExpressionMeasure(
        name="msrp",
        expression="${cost}*(1.0+${margin}+${overhead})"
        )

    # the price is msrp*(1-discount)
    price = praxis.tabular.newExpressionMeasure(
        name="price",
        expression="${msrp}*(1.0-${discount})"
        )

    # register these columns with the sheet
    pricing.addMeasures(cost, msrp, price)

    # pull data from the dataset into the sheet
    # the columns with literal data from the set get added automatically
    pricing.populate(objects=dataset, measures=attributes)

    # compile the sheet
    pricing.compile()

    return pricing
    

def createView(model):
    # specify the view
    from vnf.content.SheetView import SheetView
    view = SheetView(name="pricing")

    # attach to the pricing model
    view.attach(model)

    import praxis.types
    # specify some non-default renderers for the columns
    production = view.getColumn("production")
    production.label = "Production"
    production.type = praxis.types.dollar()

    view.getColumn("shipping").type = praxis.types.dollar()
    view.getColumn("cost").type = praxis.types.dollar()
    view.getColumn("msrp").type = praxis.types.dollar()
    view.getColumn("price").type = praxis.types.dollar()

    view.getColumn("margin").type = praxis.types.percent()
    view.getColumn("overhead").type = praxis.types.percent()
    view.getColumn("discount").type = praxis.types.percent()

    return view
    



def createDataset(size):
    import random

    alphabet = "0123456789abcdefghijklmnopqrstuvwxyz"

    for i in range(size):
        p = Product()

        # p.sku = "s-%06d" % i
        p.sku = "SKU-%s" % "".join(random.sample(alphabet, 6))
        p.production = float(random.randint(800, 1500))
        p.shipping = float(random.randint(100, 500))
        p.margin = random.randint(30,70)/100.
        p.overhead = random.randint(10,30)/100.
        p.discount = random.randint(10,60)/100.

        yield p

    return


# data class
class Product(object):

    sku = ""
    production = 0.0
    shipping = 0.0
    margin = 0.0
    overhead = 0.0
    discount = 0.0



# version
__id__ = "$Id$"

# End of file 
