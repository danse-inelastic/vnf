#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2007-2008  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

'''
This actor gives the user a menu for performing analysis of his simulations/models and several follow-up forms for configuring those analyses.
'''

from vnf.components.FormActor import FormActor as base, action, actionRequireAuthentication, action_link, InputProcessingError, AuthenticationError


class MaterialAnalysis(base):
    
    class Inventory(base.Inventory):

        import pyre.inventory
        id = pyre.inventory.str( 'id', default = '')


    def default(self, director):
        return self.analysisMenu( director )


    def analysisMenu(self, director):
        try:
            page = director.retrieveSecurePage( 'generic' )
        except AuthenticationError, err:
            return err.page

        main = page._body._content._main
        document = main.document(title='Material Analysis')
                
        if id is None: id = self.inventory.id
        else: self.inventory.id = id

#        type = self.inventory.type = 'gulpsimulations'
#
#        if not simulation:
#            simulation = self._getSimulation(director)
#        id = self.inventory.id = simulation.id

        # make sure material is defined
        if not self._materialDefinedForSimulation(simulation, director):
            return self._needMaterialAlert(director)
        
        try:
            page = director.retrieveSecurePage( 'genericMaterialSimulationWizard' )
        except AuthenticationError, err:
            return err.page
        
        main = page._body._content._main
        document = main.document(title='Classical atomistics kernel' )
        document.byline = '<a href="http://danse.us">DANSE</a>'    
        
        formcomponent = self.retrieveFormToShow( 'gulp')
        formcomponent.director = director
        # build the form form
        form = document.form(name='', action=director.cgihome)
        # specify action
        action = actionRequireAuthentication(          
            actor = 'gulpsimulationwizard', 
            sentry = director.sentry,
            routine = 'verifySimulation',
            id=id, type=type,
            arguments = {'form-received': formcomponent.name },
            )
        from vnf.weaver import action_formfields
        action_formfields( action, form )
        # expand the form with fields of the data object that is being edited
        formcomponent.expand( form )
        next = form.control(name='submit',type="submit", value="next")
        return page 
        
        
        
        
        
        
        


def getallsimulations(db):
    from vnf.dom import materialsimulationtables, materialmodelingtables
    tables = materialsimulationtables() + materialmodelingtables()

    computations = []
    for table in tables:
        computations += db.fetchall(table)
        continue
    return computations


def _desribe(simulation):
    return '%s %s' % (simulation.__class__.__name__, simulation.id)
    

def actor():
    return MaterialAnalysis('materialanalysis')


# version
__id__ = "$Id: Login.py,v 1.1.1.1 2006-11-27 00:09:47 aivazis Exp $"

# End of file 
