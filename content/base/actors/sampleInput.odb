#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                             Michael A.G. Aivazis
#                      California Institute of Technology
#                      (C) 1998-2005  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#




from vnf.components.Actor import AuthenticationError, actionRequireAuthentication
from vnf.components.FormActor import FormActor


class SampleInput(FormActor):

    class Inventory(FormActor.Inventory):

        import pyre.inventory

        sampleId = pyre.inventory.str("sampleId", default='')
        sampleId.meta['tip'] = "the unique identifier for a given sample"
        
#        polycrystalId = pyre.inventory.str("polycrystalId", default=None)
#        polycrystalId.meta['tip'] = "the unique identifier for a given material"
#        
#        singlecrystalId = pyre.inventory.str("singlecrystalId", default=None)
#        singlecrystalId.meta['tip'] = "the unique identifier for a given material"
#        
#        disorderedId = pyre.inventory.str("disorderedId", default=None)
#        disorderedId.meta['tip'] = "the unique identifier for a given material"
        
        page = pyre.inventory.str('page', default='empty')

        
    def default(self, director):
        return self.sampleDescription(director)

    
    def sampleDescription(self, director):
        try:
            page = director.retrieveSecurePage( 'sample' )
        except AuthenticationError, err:
            return err.page
        
        # put this part after clicking the previous link in Sample page instead
        # of here
#        if self.inventory.sampleId == '':
#            # create a new sample
#            from vnf.dom.Sample import Sample
#            sample = director.clerk.newObject( Sample )
#            self.inventory.sampleId = sample.id
        
        main = page._body._content._main
        # populate the main column
        document = main.document(title='Sample Description')
        document.description = ''
        
        formcomponent = self.retrieveFormToShow( 'sampleDescription')
        formcomponent.director = director
        # build the form 
        form = document.form(name='', action=director.cgihome)
        # specify action
        action = actionRequireAuthentication(          
            actor = 'sampleInput', 
            sentry = director.sentry,
            routine = 'storeSampleDescription',
            label = '',
            arguments = {'form-received': formcomponent.name },
            )
        from vnf.weaver import action_formfields
        action_formfields( action, form )
        
        # expand the form with fields of the data object that is being edited
        formcomponent.expand( form, id = self.inventory.sampleId)
        submit = form.control(name='submit',type="submit", value="next")
        return page         
    
    
    def storeSampleDescription(self, director):
        short_description = self.processFormInputs( director )
        try: # first try to get a record with the inventory id from the db
            record = director.clerk.getRecordByID('sample', self.inventory.sampleId)
        except: # if can't find, create a new one
            tableClass = director.clerk._getTable('sample')
            record = director.clerk.newOwnedObject(tableClass)
            self.inventory.sampleId = record.id

        record.short_description = short_description

        # and update db
        director.clerk.updateRecord( record )
        return self.selectMaterialType( director )

    
    def selectMaterialType(self, director):
        try:
            page = director.retrieveSecurePage( 'sample' )
        except AuthenticationError, err:
            return err.page
        
        main = page._body._content._main
        # populate the main column
        document = main.document(title='Material type selection')
        document.description = ''
        
        formcomponent = self.retrieveFormToShow( 'selectmaterialtype')
        formcomponent.director = director
        # build the form 
        form = document.form(name='', action=director.cgihome)
        # specify action
        action = actionRequireAuthentication(          
            actor = 'sampleInput', 
            sentry = director.sentry,
            routine = 'redirectMaterialInput',
            label = '',
            sampleId = self.inventory.sampleId,
            arguments = {'form-received': formcomponent.name },
            )
        from vnf.weaver import action_formfields
        action_formfields( action, form )
        
        # expand the form with fields of the data object that is being edited
        formcomponent.expand( form )
        submit = form.control(name='submit',type="submit", value="next")
        return page 

    
    def redirectMaterialInput(self, director):
        selected = self.processFormInputs(director)
        method = getattr(self, selected )
        return method( director )


    def polycrystal(self, director):
        return self._configureMaterial(director, 'polycrystal')


    def singlecrystal(self, director):
        return self._configureMaterial(director, 'singlecrystal')
    
    
    def disordered(self, director):
        return self._configureMaterial(director, 'disordered')
    
    
    def storeAndVerifyMatterInput(self, director):
        #store matter
        matter =self.processFormInputs(director)
        # attach matter to sample and store 
        sample = director.clerk.getRecordByID('samples', self.inventory.sampleId)
        sample.matter = matter
        director.clerk.updateRecord(sample)
        return self.selectShape( director ) 

    
    def selectShape(self, director):
        try:
            page = director.retrieveSecurePage( 'sample' )
        except AuthenticationError, err:
            return err.page
#        experiment = director.clerk.getNeutronExperiment(self.inventory.id)
        main = page._body._content._main
        # populate the main column
        document = main.document(title='Shape input')
        document.description = ''
        
        formcomponent = self.retrieveFormToShow( 'selectShape')
        formcomponent.director = director
        # build the form 
        form = document.form(name='', action=director.cgihome)
        # specify action
        action = actionRequireAuthentication(          
            actor = 'sampleInput', 
            sentry = director.sentry,
            routine = 'onShapeSelect',
            label = '',
            sampleId = self.inventory.sampleId,
            #id=self.inventory.id,
            arguments = {'form-received': formcomponent.name },
            )
        from vnf.weaver import action_formfields
        action_formfields( action, form )
        
        # expand the form with fields of the data object that is being edited
        formcomponent.expand( form )
        submit = form.control(name='submit',type="submit", value="next")
        #self.processFormInputs(director)
        return page  

    
    def onShapeSelect(self, director):
        selected = self.processFormInputs(director)
        method = getattr(self, selected )
        return method( director )
    
    
    def inputBlock(self, director):
        try:
            page = director.retrieveSecurePage('sample')
        except AuthenticationError, err:
            return err.page
#        experiment = director.clerk.getNeutronExperiment(self.inventory.id)
        main = page._body._content._main
        # populate the main column
        document = main.document(title='Shape input')
        document.description = ''
        
        formcomponent = self.retrieveFormToShow( 'inputBlock')
        formcomponent.director = director
        # build the form 
        form = document.form(name='', action=director.cgihome)
        # specify action
        action = actionRequireAuthentication(          
            actor = 'sampleInput', 
            sentry = director.sentry,
            routine = 'storeAndVerifyShapeInput',
            label = '',
            sampleId = self.inventory.sampleId,
            #id=self.inventory.id,
            arguments = {'form-received': formcomponent.name },
            )
        from vnf.weaver import action_formfields
        action_formfields( action, form )
        
        # expand the form with fields of the data object that is being edited
        formcomponent.expand( form )
        submit = form.control(name='submit',type="submit", value="submit")
        self.processFormInputs(director)
        return page

    
    def inputCylinder(self, director):
        try:
            page = director.retrieveSecurePage('sample')
        except AuthenticationError, err:
            return err.page
#        experiment = director.clerk.getNeutronExperiment(self.inventory.id)
        main = page._body._content._main
        # populate the main column
        document = main.document(title='Shape input')
        document.description = ''
        
        formcomponent = self.retrieveFormToShow( 'inputCylinder')
        formcomponent.director = director
        # build the form 
        form = document.form(name='', action=director.cgihome)
        # specify action
        action = actionRequireAuthentication(          
            actor = 'sampleInput', 
            sentry = director.sentry,
            routine = 'storeAndVerifyShapeInput',
            label = '',
            sampleId = self.inventory.sampleId,
            #id=self.inventory.id,
            arguments = {'form-received': formcomponent.name },
            )
        from vnf.weaver import action_formfields
        action_formfields( action, form )
        
        # expand the form with fields of the data object that is being edited
        formcomponent.expand( form )
        submit = form.control(name='submit',type="submit", value="submit")
        self.processFormInputs(director)
        return page

    
    def storeAndVerifyShapeInput(self, director):
        # store shape
        shape = self.processFormInputs(director) 
        # attach shape to sample and store 
        sample = director.clerk.getRecordByID('samples', self.inventory.sampleId)
        sample.shape = shape
        director.clerk.updateRecord(sample)
        
        actor = 'sample'
        routine = 'default'
        return director.redirect(actor, routine)
    
    
    def _configureMaterial(self, director, material_type):
        try:
            page = director.retrievePage( 'sample' )
        except AuthenticationError, err:
            return err.page
        
        main = page._body._content._main
        # populate the main column
        document = main.document(title='Material input')
        document.description = ''
        
        formcomponent = self.retrieveFormToShow(material_type)
        formcomponent.director = director
        # build the form 
        form = document.form(name = '', action = director.cgihome)
        # specify action
        action = actionRequireAuthentication(          
            actor = 'sampleInput', 
            sentry = director.sentry,
            routine = 'storeAndVerifyMatterInput',
            label = '',
            sampleId = self.inventory.sampleId,
            #id = polycrystalId,
            arguments = {'form-received': formcomponent.name },
            )
        from vnf.weaver import action_formfields
        action_formfields( action, form )
        
        # expand the form with fields of the data object that is being edited
        formcomponent.expand( form , showimportwidget=False)
        submit = form.control(name='submit',type="submit", value="next")
        return page


    def __init__(self, name=None):
        if name is None:
            name = "sampleInput"
        super(SampleInput, self).__init__(name)
        return


def actor():
    return SampleInput("sampleInput")


# version
__id__ = "$Id: Login.py,v 1.1.1.1 2006-11-27 00:09:47 aivazis Exp $"

# End of file 
