#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2007-2008  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from vnf.components.FormActor import FormActor as base, action, actionRequireAuthentication, action_link, InputProcessingError, AuthenticationError


class Actor(base):
    
    class Inventory(base.Inventory):

        import pyre.inventory
        id = pyre.inventory.str( 'id', default = '')

    table = 'abinitio'

    def view(self, director, id = None):
        try:
            page = director.retrieveSecurePage( 'computation' )
        except AuthenticationError, err:
            return err.page

        if id is None: id = self.inventory.id
        else: self.inventory.id = id

        computation = director.clerk.getRecordByID(self.table, id)
        if not self._isConfigured(computation, director):
            actor = director.retrieveActor('abinitiowizard')
            director.configureComponent(actor)
            director.inventory.actor = director.actor = actor
            director.inventory.routine = director.routine = routine = 'start'
            actor.inventory.type = self.table
            actor.inventory.id = self.inventory.id
            return getattr(actor, routine)(director)

        main = page._body._content._main
        # populate the main column
        document = main.document(title='Ab initio simulation %s' % id)

        p = document.paragraph()
        p.text = [
            '...',
            ]

        configurationdoc = document.document(title='The BvK model')
        self._view_configuration(computation, configurationdoc, director=director)

        job = director.clerk.dereference(computation.job)
        if isdone(job):
            if not computation.results_state or computation.results_state == 'retrieval failed':
                retrieve_computation_results(computation, director, debug=0)
                
            resdoc = document.document(title='Results')
            p = resdoc.paragraph()
            action = actionRequireAuthentication(
                actor = self.name, sentry = director.sentry,
                label = 'here',
                routine = 'view_results',
                id = id,
                )
            link = action_link( action, director.cgihome )
            p.text = [
                'To see the results of this computation, please click %s' % link,
                ]
        return page


    def view_results(self, director):
        try:
            page = director.retrieveSecurePage( 'computation' )
        except AuthenticationError, err:
            return err.page

        id = self.inventory.id
        computation = director.clerk.getRecordByID(self.table, id)

        main = page._body._content._main
        # populate the main column
        document = main.document(title='Ab initio simulation %s: results' % id)

        if computation.results_state in ['retrieving']:
            p = document.paragraph()
            p.text = [
                'I am still retrieving computation results,',
                'please check back in a few minutes....',
                ]
            return page

        p = document.paragraph()
        p.text = [
            'more here...',
            ]
        return page


    def _isConfigured(self, computation, director):
        if not computation.short_description: return False
        if not computation.engine: return False
        if not computation.matter: return False
        return True


from vnf.components.Job import isdone
from vnf.components.Computation import retrieve_results as retrieve_computation_results

def actor():
    return Actor('abinitio')


# version
__id__ = "$Id$"

# End of file 
