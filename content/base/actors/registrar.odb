#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                             Michael A.G. Aivazis
#                               Orthologue, Ltd.
#                      (C) 2004-2008  All Rights Reserved
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

from vnf.components.Actor import Actor, action, action_link


class Registrar(Actor):


    class Inventory(Actor.Inventory):

        import pyre.inventory

        firstname = pyre.inventory.str(name='firstname')
        lastname = pyre.inventory.str(name='lastname')
        username = pyre.inventory.str(name='username')
        email = pyre.inventory.str(name="email")
        password = pyre.inventory.str(name="password")
        confirmation = pyre.inventory.str(name="confirmation")
        organization = pyre.inventory.str(name='organization')


    def default(self, director):
        return self.interview(director)


    def interview(self, director, errors=None):
        page = director.retrievePage("registration")
        
        main = page._body._content._main

        # populate the main column
        document = main.document( title = 'Create a VNF Account' )
        document.description = ('')

        p = document.paragraph()
        action1 = action(actor='login', label='sign in')
        signin_link = action_link( action1, director.cgihome)
        p.text = [
            'Please create your VNF account so that you can access',
            'the Virtual Neutron Facility.',
            'If you already have a VNF account,',
            'please %s' % signin_link,
            ]

        # build the registration form
        form = document.form(
            name='registration', legend='Getting started with VNF', action=director.cgihome)
        
        form.hidden(name='actor', value='registrar')
        form.hidden(name='routine', value='validateState')

        if errors:
            p = form.paragraph(cls='error')
            p.text = errors
        
        prefix = self.name
        def _pn(name): return '%s.%s' % (prefix, name)
        
        firstname = form.text(id='firstname', name=_pn('firstname'), label='First name')
        firstname.help = ''
        
        lastname = form.text(id='lastname', name=_pn('lastname'), label='Last name')
        lastname.help = ''
        
        username = form.text(id='username', name=_pn('username'), label='Desired Login Name')
        username.help = 'Usernames are case sensitive; make sure your caps lock key is not enabled.'
        
        password = form.password(id='password', name=_pn('password'), label='Password')
        password.help = ('Passwords are also case sensitive.')

        confirmation = form.password(id='confirmation', name=_pn('confirmation'), label='Re-enter password')
        confirmation.help = ('Re-enter your password to confirm')

        email = form.text(id='email', name=_pn('email'), label='Email')
        email.help = ('This address is used to keep you informed of status of your virtual experiments, updates to your VNF service, etc.')

        organization = form.text(id='organization', name=_pn('organization'), label='Organization')
        organization.help = ()
        
        submit = form.control(name="submit", type="submit", value="Create my account")
        
        return page


    def register(self, director):
        # save into the database
        from vnf.dom.Registrant import Registrant as Table
        registrant = director.clerk.newDbObject(Table)
        registrant.firstname = self.firstname
        registrant.lastname = self.lastname
        registrant.username = self.username
        registrant.email = self.email
        registrant.organization = self.organization
        registrant.password = self._encode(director, self.password)
        
        director.clerk.updateRecord(registrant)

        from vnf.components.misc import announce
        announce(director, 'new-registrant', registrant)
        return director.retrievePage("registration-complete")


    def validateState(self, director):
        errors = []
        if self.password != self.confirmation:
            errors += [
                'Please make sure that you enter the same passwords in the two boxes provided below.'
                ]
        # !!!!!!!!
        # should check username uniqueness too

        if errors:
            return self.interview(director, errors=errors)
        return self.register(director)
 

    def __init__(self, name=None):
        if name is None:
            name = "registrar"
        super(Registrar, self).__init__(name)
        return


    def _configure(self):
        super(Registrar, self)._configure()

        self.firstname = self.inventory.firstname
        self.lastname = self.inventory.lastname
        self.username = self.inventory.username
        self.email = self.inventory.email
        self.password = self.inventory.password
        self.confirmation = self.inventory.confirmation
        self.organization = self.inventory.organization

        return


    def _encode(self, director, password):
        method = director.clerk.getUser('__method__').password
        
        from vnf.components import usersFromDB
        encoder = usersFromDB()._encoders[method]

        return encoder(password)


def actor(): return Registrar()

# version
__id__ = "$Id$"

# End of file 
