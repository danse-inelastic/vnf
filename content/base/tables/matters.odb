#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                  Jiao Lin
#                     California Institute of Technology
#                       (C) 2009  All Rights Reserved
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

def table(matters, director, kwds={}):
    return _table(matters, director, **kwds)


def _table(matters, director, selected=None, name='matter'):
    from vnf.content.table import Model, View, Table
    class model(Model):
        
        id = Model.Measure(name='id', type='text')
        description = Model.Measure(name='description', type='text')
        visualize = Model.Measure(name='visualize', type='text')
        chemical_formula = Model.Measure(name='chemical_formula', type='text')
        cartesian_lattice = Model.Measure(name='cartesian_lattice', type='text')
        atoms = Model.Measure(name='atoms', type='text')
        selected = Model.Measure(name='selected', type='single_choice_in_one_column')

    class D: pass
    import operator
    generators = {
        'id': operator.attrgetter('id'),
        'description': operator.attrgetter( 'short_description' ),
        'visualize': lambda s: format_visualize(s, director),
        'chemical_formula': lambda s: format_chemical_formula(s, director),
        'cartesian_lattice': lambda s: format_lattice_parameters(s, director),
        'atoms': lambda s: format_atoms(s, director),
        'selected': lambda s: format_selected(s, selected),
        }
    def d(s):
        r = D()
        for attr, g in generators.iteritems():
            value = g(s)
            setattr(r, attr, value)
            continue
        return r
    data = [d(s) for s in matters]

    class view(View):
        
        columns = [
            View.Column(id='col0',label='ID', measure='id'),
            View.Column(id='col1',label='Description', measure='description'),
            View.Column(id='col2',label='Visualize', measure='visualize'),
            View.Column(id='col3',label='Chemical formula', measure='chemical_formula'),
            View.Column(id='col4',label='Cartesian Lattice', measure='cartesian_lattice'),
            View.Column(id='col5',label='Atoms', measure='atoms'),
            ]

        if selected:
            from vnf.components.DBObjectForm import formactor_action_prefix as prefix
            name_for_form_action = '%s.%s' % (prefix, name)
            columns.append(
                View.Column(
                    id='col8',
                    label='Select',
                    measure='selected',
                    name_for_form_action=name_for_form_action,
                    )
                )

        editable = False

    table = Table(model, data, view)

    from pyre.components.Component import Component
    c = Component('table', 'table')
    c.table = table
    return c


from pyre.db._reference import reference
def format_selected(matter, selected):
    return {
        'selected': str(int(selected.__class__ == matter.__class__ and selected.id == matter.id)),
        'value': '%s%s%s' % (
            matter.name,
            reference.separator,
            matter.id),
        }
    

def format_visualize(matter,director ):
    # this returns a hyperlink
    # with the text 'view'.  Eventually the text should be
    # replaced with a thumbnail of the object
    from vnf.components.JnlpFile import JnlpFile
    args = {
            'cgihome':director.cgihome,
            'sentry.username':director.sentry.username,
            'sentry.ticket':director.sentry.ticket,
            'matterId':matter.id,
            'displayType':'structure',
            }
    jnlpFile = JnlpFile(
            resources=('jmolVnf.jar', 'Jmol.jar','pg74.216.jdbc3.jar'),
            mainClass='jmolVnf.JmolVnf',
            programArguments = args,
            fileName='jmolVnfLauncher',
            )
    relativeLocationOfFile = jnlpFile.writeJnlp(director)
    return '<a href="'+relativeLocationOfFile+'">view</a>'


def format_chemical_formula(matter,director ):
    atom_symbols = matter.atom_symbols
    atom_symbols = partition(atom_symbols)
    chemicalFormula = ''
    for run in atom_symbols:
        chemicalFormula+=str(run[0])+'_'+str(len(run))+' '
    return chemicalFormula


def format_atoms(matter, director):
    coords = matter.fractional_coordinates
    atom_symbols = matter.atom_symbols

    import numpy
    coords = numpy.array(coords)
    coords.shape = -1,3
    maxN = 5
    if len(coords) > maxN:
        coords = list(coords[:2]) + ['...'] + list(coords[-2:])
        atom_symbols = list(atom_symbols[:2]) + ['...'] \
            + list(atom_symbols[-2:])

    def fv(coord):
        if isinstance(coord, basestring): return coord
        return format_vector(coord)
    return '\n'.join(
        [ '%s: %s' % (symbol, fv(coord) )
          for symbol, coord in zip(atom_symbols, coords) ]
        )


def format_lattice_parameters(matter, director):
    lattice = matter.cartesian_lattice
    import numpy
    lattice = numpy.array(lattice)
    lattice.shape = -1,3
    return '\n'.join( [ format_vector( vec ) for vec in lattice ] )


def format_vector( v ):
    x,y,z = v
    return '%.5f, %.5f, %.5f' % (x,y,z)


from vnf.components.misc import nullpointer
from vnf.components.misc import partition



# version
__id__ = "$Id$"

# End of file 
