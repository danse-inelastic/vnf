#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                  Jiao Lin
#                     California Institute of Technology
#                       (C) 2009  All Rights Reserved
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

def table(samples, director, kwds={}):
    return _table(samples, director, **kwds)


def _table(samples, director, showkernels=False, selected=None):
    from vnf.content.table import Model, View, Table
    class model(Model):
        
        id = Model.Measure(name='id', type='text')
        description = Model.Measure(name='description', type='text')
        visualize = Model.Measure(name='visualize', type='text')
        chemical_formula = Model.Measure(name='chemical_formula', type='text')
#        cartesian_lattice = Model.Measure(name='cartesian_lattice', type='text')
#        atom_positions = Model.Measure(name='atom_positions', type='text')
        shape = Model.Measure(name='shape', type='text')
        kernels = Model.Measure(name='kernels', type='text')
        selected = Model.Measure(name='selected', type='single_choice_in_one_column')

    class D: pass
    import operator
    generators = {
        'id': operator.attrgetter('id'),
        'description': operator.attrgetter( 'short_description' ),
        'visualize': lambda s: format_visualize(s, director),
        'chemical_formula': lambda s: format_chemical_formula(s, director),
#        'cartesian_lattice': lambda s: format_lattice_parameters(s, director),
#        'atom_positions': lambda s: format_atoms(s, director),
        'shape': lambda s: format_shape(s, director),
        'kernels': lambda s: format_kernels(s, director),
        'selected': lambda s: format_selected(s, selected),
        }
    def d(s):
        r = D()
        for attr, g in generators.iteritems():
            value = g(s)
            setattr(r, attr, value)
            continue
        return r
    data = [d(s) for s in samples]

    class view(View):
        
        columns = [
            View.Column(id='col0',label='ID', measure='id'),
            View.Column(id='col1',label='Description', measure='description'),
            View.Column(id='col2',label='Visualize', measure='visualize'),
            View.Column(id='col3',label='Chemical formula', measure='chemical_formula'),
#            View.Column(id='col4',label='Cartesian Lattice', measure='cartesian_lattice'),
#            View.Column(id='col5',label='Atom positions', measure='atom_positions'),
            View.Column(id='col6',label='Sample container', measure='shape'),
            ]

        if showkernels:
            columns.append(
                View.Column(id='col7',label='Scattering Kernels', measure='kernels')
                )

        if selected:
            from vnf.components.DBObjectForm import formactor_action_prefix as prefix
            name_for_form_action = '%s.selected' % prefix
            columns.append(
                View.Column(
                    id='col8',
                    label='Select',
                    measure='selected',
                    name_for_form_action=name_for_form_action,
                    )
                )

        editable = False

    table = Table(model, data, view)

    from pyre.components.Component import Component
    c = Component('table', 'table')
    c.table = table
    return c


from pyre.db._reference import reference
def format_selected(sample, selected):
    return {
        'selected': str(int(selected == sample)),
        'value': '%s%s%s' % (
            sample.name,
            reference.separator,
            sample.id),
        }
    

def format_kernels(sample, director):
    from vnf.dom.neutron_components.SampleComponent import SampleComponent
    if isinstance(sample, SampleComponent):
        return 'McStas kernel: %s' % sample.__class__.__name__

    try: kernels = sample.kernels
    except AttributeError:
        return 'undefined'
    
    if not kernels: return 'undefined'
    kernels = director.clerk.dereference(kernels)
    
    lines = []
    for name, kernel in kernels:
        line = '%s #%s' % (kernel.__class__.__name__, kernel.id)
        lines.append(line)
        continue

    return '\n'.join(lines)


def format_visualize(sample,director ):
    # this returns a hyperlink
    # with the text 'view'.  Eventually the text should be
    # replaced with a thumbnail of the object
    try: matter = sample.matter
    except AttributeError: return 'unknown'
    if nullpointer(matter): return "undefined"
    matter = director.clerk.dereference(matter)
    from vnf.components.JnlpFile import JnlpFile
    args = {'matterId':matter.id}
    jnlpFile = JnlpFile(
            resources=('jmolVnf.jar', 'Jmol.jar','pg74.216.jdbc3.jar'),
            mainClass='jmolVnf.JmolVnf',
            programArguments = args,
            fileName='jmolVnfLauncher',
            )
    relativeLocationOfFile = jnlpFile.writeJnlp(director)
    return '<a href="'+relativeLocationOfFile+'">view</a>'

def format_chemical_formula(sample,director ):
    try: matter = sample.matter
    except AttributeError: return 'unknown'
    if nullpointer(matter): return "undefined"
    matter = director.clerk.dereference(matter)
    
    atom_symbols = matter.atom_symbols
    atom_symbols = partition(atom_symbols)
    chemicalFormula = ''
    for run in atom_symbols:
        chemicalFormula+=str(run[0])+'_'+str(len(run))+' '
    return chemicalFormula


def format_atoms(sample, director):
    try: matter = sample.matter
    except AttributeError: return 'unknown'
    if nullpointer(matter): return "undefined"
    matter = director.clerk.dereference(matter)

    coords = matter.fractional_coordinates
    import numpy
    coords = numpy.array(coords)
    coords.shape = -1,3
    atom_symbols = matter.atom_symbols
    return '\n'.join(
        [ '%s: %s' % (symbol, format_vector(coord) )
          for symbol, coord in zip(atom_symbols, coords) ]
        )


def format_lattice_parameters(sample, director):
    try: matter = sample.matter
    except AttributeError: return 'unknown'
    if nullpointer(matter): return "undefined"
    matter = director.clerk.dereference(matter)
    
    lattice = matter.cartesian_lattice
    import numpy
    lattice = numpy.array(lattice)
    lattice.shape = -1,3
    return '\n'.join( [ format_vector( vec ) for vec in lattice ] )


def format_vector( v ):
    x,y,z = v
    return '%.5f, %.5f, %.5f' % (x,y,z)


class ShapeFormatter:

    def __call__(self, shape):
        handler = 'on%s' % shape.__class__.__name__
        handler = getattr( self, handler )
        return handler( shape )


    def onBlock(self, block):
        texts = [
            'Plate',
            'thickness=%.3fcm' % (block.thickness * 100),
            'height=%.3fcm' % (block.height * 100),
            'width=%.3fcm' % (block.width * 100),
            ]
        return '\n'.join( texts )
    
    def onCylinder(self, cylinder):
        texts = [
            'Cylinder',
            'height=%.3fcm' % (cylinder.height * 100),
            'inner radius=%.3fcm' % (cylinder.innerradius * 100),
            'outer radius=%.3fcm' % (cylinder.outerradius * 100),
            ]
        return '\n'.join( texts )


def format_shape( sample, director ):
    try: shape = sample.shape
    except AttributeError: return 'unknown'
    if nullpointer(shape): return "undefined"
    shape = director.clerk.dereference(shape)
    return ShapeFormatter()( shape )


from vnf.components.misc import nullpointer
from vnf.components.misc import partition



# version
__id__ = "$Id$"

# End of file 
