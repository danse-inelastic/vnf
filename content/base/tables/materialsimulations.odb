#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                  Jiao Lin
#                     California Institute of Technology
#                       (C) 2009  All Rights Reserved
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from vnf.components.Actor import action_link, actionRequireAuthentication


def table(matsims, director):
    from vnf.content.table import Model, View, Table
    class model(Model):

        description = Model.Measure(name='description', type='text')
        type = Model.Measure(name='type', type='text')
        matter = Model.Measure(name='matter', type='text')
        chain = Model.Measure(name='chain', type='text')
        creationDate = Model.Measure(name='creationDate', type='text')


    def getDesc(matsim):
        label = matsim.short_description or matsim.id
        action = actionRequireAuthentication(
            sentry = director.sentry,
            label = label,
            actor = 'computation',
            routine = 'view',
            id = matsim.id,
            type = matsim.__class__.__name__.lower(),
            )
        return action_link(action, director.cgihome)
    def getCreationDate(exp):
        date = exp.date
        return date
    def getType(matsim):
        return matsim.__class__.__name__
    def getMatter(matsim):
        matter = matsim.matter
        if not matter: return 'not defined'
        matter = director.clerk.dereference(matter)
        identifier = matter.short_description or matter.chemical_formula
        return identifier
    def getChain(matsim):
        # for now just take them to the general postprocessing page..
        # eventually can specialize to what computation is
        #if matsim.type is 
        action = actionRequireAuthentication(
            sentry = director.sentry,
            actor = 'chainwizard',
            label = 'chain',
            previousSimulationId = matsim.id,
            )
        chain = action_link( action, director.cgihome )
        return chain       
        
    import operator
    generators = {
        'description': getDesc,
        'type': getType,
        'matter': getMatter,
        'creationDate': getCreationDate,
        'chain': getChain,
        }
    
    class D: pass
    def d(s):
        r = D()
        for attr, g in generators.iteritems():
            value = g(s)
            setattr(r, attr, value)
            continue
        return r
    data = [d(j) for j in matsims]

    class view(View):
        
        columns = [
            View.Column(id='col1',label='Description', measure='description'),
            View.Column(id='col2',label='Type', measure='type'),
            View.Column(id='col3',label='Matter', measure='matter'),
            #View.Column(id='col4',label='Chain', measure='chain'),
            View.Column(id='col5',label='Date created', measure='creationDate'),
            ]

        editable = False

    table = Table(model, data, view)

    from pyre.components.Component import Component
    c = Component('table', 'table')
    c.table = table
    return c


# version
__id__ = "$Id$"

# End of file 
