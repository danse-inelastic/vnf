# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                   Jiao Lin
#                      California Institute of Technology
#                        (C) 2007  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#



from vnf.forms.DBObjectForm import DBObjectForm as base, InputProcessingError


class SinIQModel(base):


    class Inventory(base.Inventory):

        import pyre.inventory
        bg = pyre.inventory.str( name = 'bg', default = 0.05 )
        bg.meta['label'] = 'background'
        bg.meta['tiponerror'] = (
            'Please enter a positive number.',
            )
        
        amplitude = pyre.inventory.str( name = 'amplitude', default = 10 )
        amplitude.meta['label'] = 'amplitude'
        amplitude.meta['tiponerror'] = (
            'Please enter a positive number',
            )
        
        L = pyre.inventory.str( name = 'L', default = 0.002 )
        L.meta['label'] = 'Characteristic length'
        L.meta['tiponerror'] = (
            'Please enter a positive number',
            )

        phase = pyre.inventory.str( name = 'phase', default = 10 )
        phase.meta['label'] = 'phase'
        phase.meta['tiponerror'] = (
            'Please enter a number',
            )
        
    parameters = [#'short_description',
        'bg', 'amplitude', 'L', 'phase']
    DBTable = 'siniqmodels'


    def __init__(self, name = None):
        if name is None:
            name = 'siniqmodel'

        base.__init__(self, name)

        return


    def processUserInputs(self, *args, **kwds):
        errors = []
        if badBG(self.inventory.bg): errors.append('bg')
        if badL(self.inventory.L): errors.append('L')
        if badAmplitude(self.inventory.amplitude): errors.append('amplitude')
        if badPhase(self.inventory.phase): errors.append('phase')
        
        if len(errors): raise InputProcessingError, errors
        return base.processUserInputs(self, *args, **kwds)


    def _verify(self, prop, errors):
        value = getattr( self.inventory, prop )
        try:
            value = float(value)
            if value < 0: errors.append( prop )
        except:  errors.append(prop)
        return


def badBG(bg):
    try: bg = float(bg)
    except: return True
    return bg < 0

def badL(L):
    try: L = float(L)
    except: return True
    return L <= 0

def badAmplitude(amplitude):
    try: amplitude = float(amplitude)
    except: return True
    return amplitude <= 0

def badPhase(phase):
    try: phase = float(phase)
    except: return True
    return False


def form(): return SinIQModel()


# version
__id__ = "$Id$"

# End of file 
