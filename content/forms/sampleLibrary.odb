# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                   Jiao Lin
#                      California Institute of Technology
#                        (C) 2007  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from vnf.components.Form import Form as base
from vnf.components.PyHtmlTable import PyHtmlTable
from vnf.components.Actor import actionRequireAuthentication, action_link


class Form( base ):

    class Inventory( base.Inventory ):

        import pyre.inventory as inv
#        kernel = inv.str('kernel',default='gulp')
#        kernel.meta['tip'] = 'type of kernel'
        
        selected_kernel_id = inv.str( 'kernel_id' )

    def expand(self, form):
        '''expand an existing form with fields from this component'''
        prefix = formactor_action_prefix

        director = self.director
        clerk = director.clerk
        scatterers = clerk.indexScatterers(where='template=True').values()
        scatterers = [ clerk.getHierarchy(scatterer) for scatterer in scatterers]
        samples = scatterers
            
        p = form.paragraph()
        import operator
        generators = [
            operator.attrgetter( 'short_description' ),
            lambda s: s.matter.realmatter.chemical_formula,
            lambda s: format_lattice_parameters(s.matter.realmatter),
            lambda s: format_atoms(s.matter.realmatter),
            lambda s: format_shape(s.shape.realshape),
            ]

        columnTitles = [
            'Sample description','Chemical formula', 'Cartesian lattice', 
            'Atom positions', 'Shape',]

        t=PyHtmlTable(len(samples), len(columnTitles), {'width':'95%','border':2,'bgcolor':'white'})
        # first row for labels 
        for colNum, col in enumerate(columnTitles):
            t.setc(0,colNum,col)

        # other rows for values
        for row, sample in enumerate( samples ):
            #first put in the radio button
            selection = "<input type='radio' name='actor.form-received.kernel_id' value="+sample.id+" id='radio'/>"
            t.setc(row+1, 0, selection)
            for colNum, generator in enumerate( generators ):
                value = generator( sample )
                t.setc(row+1,colNum,value)
                continue
            continue
        
        p.text = [t.return_html()]
        

    def processUserInputs(self):
        'process user input '
        return 



def format_lattice_parameters(matter):
    lattice = matter.cartesian_lattice
    import numpy
    lattice = numpy.array(lattice)
    lattice.shape = -1,3
    vectornames = ['a', 'b', 'c']
    return '<br>'.join( [
        '%s: %s' % (name, format_vector( vec ))
        for name, vec in zip(vectornames, lattice) ] )


def format_atoms(matter):
    coords = matter.fractional_coordinates
    import numpy
    coords = numpy.array(coords)
    coords.shape = -1,3
    atom_symbols = matter.atom_symbols
    return '<br>'.join(
        [ '%s: %s' % (symbol, format_vector(coord) )
          for symbol, coord in zip(atom_symbols, coords) ]
        )


def format_vector( v ):
    x,y,z = v
    return '%.5f, %.5f, %.5f' % (x,y,z)


class ShapeFormatter:

    def __call__(self, shape):
        handler = 'on%s' % shape.__class__.__name__
        handler = getattr( self, handler )
        return handler( shape )


    def onBlock(self, block):
        texts = [
            'Plate',
            'thickness=%.3fcm' % (block.thickness * 100),
            'height=%.3fcm' % (block.height * 100),
            'width=%.3fcm' % (block.width * 100),
            ]
        return '<br>'.join( texts )

def format_shape( shape ):
    return ShapeFormatter()( shape )


#formactor_action_prefix = 'actor.form-received' # assumed actor is a form actor
from vnf.components.DBObjectForm import formactor_action_prefix

def form(): return Form( 'selectkernel' )


# version
__id__ = "$Id$"

# End of file 
