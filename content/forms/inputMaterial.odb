# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                   Jiao Lin
#                      California Institute of Technology
#                        (C) 2007  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from vnf.components.Form import Form as base
from vnf.components.PyHtmlTable import PyHtmlTable
from vnf.components.Actor import actionRequireAuthentication, action_link
from vnf.components.DBObjectForm import formactor_action_prefix

class Form( base ):

    class Inventory( base.Inventory ):

        import pyre.inventory as inv
        id = inv.str( 'id', default = '' )
        short_description = inv.str('short_description', default = '' )
        short_description.meta['tip'] = 'A short description'
        
        listOfAtoms = inv.list('List_of_Atoms')
        
        ax = inv.float('ax',default=1.0)
        ay = inv.float('ay',default=0.0)
        az = inv.float('az',default=0.0)
        bx = inv.float('bx',default=0.0)
        by = inv.float('by',default=1.0)
        bz = inv.float('bz',default=0.0)
        cx = inv.float('cx',default=0.0)
        cy = inv.float('cy',default=0.0)
        cz = inv.float('cz',default=1.0)
        
        

        
    parameters = ['name'] # parameters to edit in the form

    DBTable = '' # db table class name


    def  expand(self, form, errors = None, properties = None):
        '''expand an existing form with fields from this component'''
        
        # get default values from the inventory if new or from the previous
        # record if old
        if self.inventory.id == '':
            configuration = self.inventory
        else:
            configuration = self.getRecord()
            
        prefix = formactor_action_prefix
        
        id_field = form.hidden(
            name = '%s.id' % prefix, value = configuration.id)
        
#        p = form.paragraph()
#        p.text = ['''Input the sample name''']
        
        self.name = form.text(id='name', name='name', label='Sample Name')
        #self.name.help = 'An identifying name for this sample.'
        
        
        p = form.paragraph()
        p.text = ['''Import the sample from the Crystallography Open Database''']
        p = form.paragraph()
        p.text = ['''<a href="/java/cod2.jnlp">Future Image of COD</a>''']        
        
        p = form.paragraph()
        p.text = ['''Input lattice parameters manually'''] 
#        p.text = ['''Input lattice parameters a b c, and a list of atomic 
#positions in xyz format such as<br> 
#Fe   0.0 0.0 0.0<br>
#Fe   0.0 0.5 0.5<br>
#Fe   0.5 0.5 0.0<br>
#...<br>
#''']        
        box = form.box()
#        self.ax = box.text(id='ax', name='%s.ax' % prefix, label='a: (x)', 
#                      value = getattr( configuration, ax ))        
#        self.ay = box.text(id='ay', name='%s.ay' % prefix, label='(y)', 
#                      value = getattr( configuration, ay ))   
#        self.az = box.text(id='az', name='%s.az' % prefix, label='(z)', 
#                      value = getattr( configuration, az ))  
#        box = form.box()
#        self.bx = box.text(id='bx', name='%s.bx' % prefix, label='b: (x)', 
#                      value = getattr( configuration, bx ))        
#        self.by = box.text(id='by', name='%s.by' % prefix, label='(y)', 
#                      value = getattr( configuration, by ))   
#        self.bz = box.text(id='bz', name='%s.bz' % prefix, label='(z)', 
#                      value = getattr( configuration, bz ))  
#        box = form.box()
#        self.cx = box.text(id='cx', name='%s.cx' % prefix, label='c: (x)', 
#                      value = getattr( configuration, cx ))        
#        self.cy = box.text(id='cy', name='%s.cy' % prefix, label='(y)', 
#                      value = getattr( configuration, cy ))   
#        self.cz = box.text(id='cz', name='%s.cz' % prefix, label='(z)', 
#                      value = getattr( configuration, cz )) 
        self.ax = box.text(id='ax', name='%s.ax' % prefix, label='a: (x)', 
                      value = configuration.ax)        
        self.ay = box.text(id='ay', name='%s.ay' % prefix, label='(y)', 
                      value = configuration.ay)   
        self.az = box.text(id='az', name='%s.az' % prefix, label='(z)', 
                      value = configuration.az)  
        box = form.box()
        self.bx = box.text(id='bx', name='%s.bx' % prefix, label='b: (x)', 
                      value = configuration.bx)        
        self.by = box.text(id='by', name='%s.by' % prefix, label='(y)', 
                      value = configuration.by)   
        self.bz = box.text(id='bz', name='%s.bz' % prefix, label='(z)', 
                      value = configuration.bz)  
        box = form.box()
        self.cx = box.text(id='cx', name='%s.cx' % prefix, label='c: (x)', 
                      value = configuration.cx)        
        self.cy = box.text(id='cy', name='%s.cy' % prefix, label='(y)', 
                      value = configuration.cy)   
        self.cz = box.text(id='cz', name='%s.cz' % prefix, label='(z)', 
                      value = configuration.cz)  
        self.listOfAtoms=form.textarea(id='listOfAtoms', name='%s.listOfAtoms' % prefix, 
                                  label='List of atoms (i.e. H  0.0  0.0  0.5)',rows=20)
          
    def processUserInputs(self, commit = True):   
        '''process user inputs and save them to db
        commit: if true, commit to database record. 
        '''

        # prepare a scatterer record 
        if self.inventory.id == '':
            record = self.createRecord()
        else:
            record = self.getRecord()
        setattr(record, prop, self.inventory.getTraitValue( prop ) )
            
        # prepare a materials record 
        if self.inventory.id == '':
            record = self.createRecord()
        else:
            record = self.getRecord()

        

        # transfer user inputs to db record
        for prop in self.parameters:
            setattr(record, prop, self.inventory.getTraitValue( prop ) )

        # commit if requested
        if commit:
            director = self.director
            if empty_id(record.id):
                #if record is new, create a new db record
                id = new_id( director )
                record.id = id
                director.clerk.newRecord( record )
            else:
                #otherwise, update the record
                director.clerk.updateRecord( record )
            pass # endif
        return record


    def getRecord(self):
        'get DB record'
        id = self.inventory.id
        director = self.director
        clerk = director.clerk
        return clerk.getRecordByID( self.DBTable, id )


    def createRecord(self):
        type = self.DBTable
        module = __import__( 'vnf.dom.%s' % type, {}, {}, [''] )
        table = getattr( module, type )
        record = table()
        return record
    

def form(): return Form( 'inputMaterial' )


# version
__id__ = "$Id$"

# End of file 
