# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                   Jiao Lin
#                      California Institute of Technology
#                        (C) 2007  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from vnf.components.Form import Form as base, InputProcessingError
from vnf.components.Actor import action_link, actionRequireAuthentication


class Form( base ):

    class Inventory( base.Inventory ):
        import pyre.inventory
        experiment_id = pyre.inventory.str( 'experiment_id' )
        
        short_description = pyre.inventory.str(
            'short_description', default = 'experiment name' )
        pass # end of Inventory


    def legend(self):
        'return a legend string'
        return ''


    def expand(self, form, errors = None, advanced = False):
        '''expand an existing form with fields from this component'''
        
        director = self.director
        experiment_id = self.inventory.experiment_id
        experiment = director.clerk.getNeutronExperiment( experiment_id )
        
        prefix = formactor_action_prefix

        experiment_id_field = form.hidden(
            name = '%s.experiment_id' % prefix,
            value = self.inventory.experiment_id )

        if errors:
            p = form.paragraph( cls = 'error' )
            p.text = [
                'The form you filled out contained some errors.',
                'Please look through the values you have entered',
                'and correct any mistakes.',
                ]
            pass # endif
        
        
        property = 'short_description'
        value = getattr( experiment, property ) or getattr(self.inventory, property)
        field = form.text(
            id = '%s_input' % property,
            name='%s.%s' % (prefix, property),
            label= 'Experiment name',
            value = value)
        #field.help = 'Please give a short description of your experiment'
        return


    def processUserInputs(self):
        'process user inputs and save them to db'

        director = self.director
        clerk = director.clerk

        #get the selected experiment
        experiment_id = self.inventory.experiment_id
        experiment = clerk.getNeutronExperiment( experiment_id )

        # find out all user input errors here
        errors = []
        if len(errors): raise InputProcessingError, errors

        # transfer inputs to db record
        props = ['short_description']
        inputs = self.inventory
        for prop in props:
            setattr( experiment, prop, getattr(inputs, prop) )
            continue
        # and update db
        clerk.updateRecord( experiment )
        return


    def __init__(self, name = None):
        if name is None:
            name = 'neutronexperimentwizard_start'

        base.__init__(self, name)

        return
    
    pass # end of Form



formactor_action_prefix = 'actor.form-received' # assumed actor is a form actor

def form(): return Form()


# version
__id__ = "$Id$"

# End of file 
