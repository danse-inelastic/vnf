# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                   Jiao Lin
#                      California Institute of Technology
#                        (C) 2007  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from vnf.components.Form import Form as base
from vnf.components.DBObjectForm import formactor_action_prefix

class Form( base ):

    class Inventory( base.Inventory ):

        import pyre.inventory as inv
        typeOfScattering = inv.str('typeOfScattering', default='Incoherent')
        typeOfScattering.validator=inv.choice(['Incoherent', 'Coherent', 'Both'])
        typeOfScattering.meta['tip'] = 'Type of scattering to calculate'
        
        qUnits = inv.str('qUnits', default='1/Ang')
        qUnits.validator=inv.choice(['1/Ang', '1/nm'])
        qUnits.meta['tip'] = 'Units of Q'
        
        qStart = inv.float('qStart', default=-3.0)
        qFinish = inv.float('qFinish', default=10)
        qIncrement = inv.float('qIncrement', default=0.1)
        qShellWidth = inv.float('qShellWidth', default=1.0)
        vecsPerShell = inv.int('vecsPerShell', default=50)
        fourierTransformWindow = inv.float('fourierTransformWindow', default=10)
        numFrequencyPoints = inv.int('numFrequencyPoints', default=1000)
        

    def expand(self, form):
        '''expand an existing form with fields from this component'''
        prefix = formactor_action_prefix
        p = form.paragraph()
        p.text = ['''To use the output from a dynamics calculation, choose settings to
calculate the inelastic scattering intensity.''']
 
        choices=['Incoherent', 'Coherent', 'Both']
        entries= [ (choice, choice) for choice in choices ]
        typeOfScattering = form.selector(id='selector1',
            name = '%s.typeOfScattering' % prefix,
            entries = entries,
            label = 'Type of scattering',
            selected = self.inventory.typeOfScattering)
        choices=['1/Ang', '1/nm']
        entries= [ (choice, choice) for choice in choices ]
        qUnits = form.selector(id='selector2',
            name = '%s.qUnits' % prefix,
            entries = entries,
            label = 'Units of Q',
            selected = self.inventory.qUnits,
            )
#        p = form.paragraph()
#        p.text = ['<h2>Q Values</h2>']
        box = form.box()
        qStart = box.text(
            id='qStart', name='%s.qStart' % prefix, label='Q Values: From',
            value=self.inventory.qStart
            )        
        qFinish = box.text(
            id='qFinish', name='%s.qFinish' % prefix, label='To',
            value=self.inventory.qFinish
            )   
        qIncrement = box.text(
            id='qIncrement', name='%s.qIncrement' % prefix, label='Incremented by',
            value=self.inventory.qIncrement
            )   
        vecsPerShell = form.text(
                id = 'vecsPerShell',
                name = '%s.vecsPerShell' % prefix,
                label = 'Q vectors per shell',
                value = self.inventory.vecsPerShell)          
        fourierTransformWindow = form.text(
                id = 'fourierTransformWindow',
                name = '%s.fourierTransformWindow' % prefix,
                label = 'Fourier Transform Window (% Trajectory Length)',
                value = self.inventory.fourierTransformWindow)   
        numFrequencyPoints = form.text(
                id = 'numFrequencyPoints',
                name = '%s.numFrequencyPoints' % prefix,
                label = 'Number of Frequency Points',
                value = self.inventory.numFrequencyPoints)         

    def processUserInputs(self,director):
        'process user input '
        return 


#formactor_action_prefix = 'actor.form-received' # assumed actor is a form actor
from vnf.components.DBObjectForm import formactor_action_prefix

def form(): return Form( 'inelasticScatteringIntensity' )


# version
__id__ = "$Id$"

# End of file 
