#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from luban.content import load, select

from luban.content.Button import Button
from luban.content.Paragraph import Paragraph


from vnfb.components.MasterTable import FilterSyntaxError, MasterTableActor as base


class Actor(base):


    class Inventory(base.Inventory):

        import pyre.inventory

        # in case of working with one experiment
        id = pyre.inventory.str('id')
        description = pyre.inventory.str('description')


    def default(self, director):
        return self.showListView(director)


    def showListView(self, director):
        view = self.createListView(director)
        return select(id='main-display-area').replaceContent(view)


    def createListView(self, director):
        from vnfb.components.MasterTable import MasterTableFactory, filtercompiler
        def countrecords(filter):
            return self._countExperiments(director, filter)
        def createtable(order_by, reverse_order, slice, filter):
            return self.createExperimentTable(
                director,
                order_by=order_by,
                reverse_order=reverse_order,
                slice=slice,
                filter=filter)
        compilefilter = filtercompiler(columns, measure2dbcol)

        factory = MasterTableFactory(
            self.name, countrecords, createtable, compilefilter, filtercols)

        order_by = self.inventory.order_by
        reverse_order = self.inventory.reverse_order
        number_records_per_page = self.inventory.number_records_per_page
        page_number = self.inventory.page_number

        filter_expr = self.inventory.filter_expr
        filter_key_index = self.inventory.filter_key_index
        filter_value = self.inventory.filter_value

        tableview = factory.create(
            order_by=order_by,
            reverse_order=reverse_order,
            filter_expr=filter_expr, filter_key_index=filter_key_index, filter_value=filter_value,
            number_records_per_page=number_records_per_page,
            page_number=page_number,
            sorting_options = [
                ('id', 'ID'),
                ('short_description', 'Description'),
            ]
            )

        # add some buttons to the left of navbar
        toolbar = tableview.find(id='experiment-table-toolbar-changeview')
        toolbar.add(Paragraph(text='|', Class='splitter'))
        #
        button = Button(label='New', tip='create new experiment', icon='new.png')
        toolbar.add(button)
        button.onclick = load(actor='experiment', routine='new')

        return tableview
    
        
    def createExperimentTable(self, director, order_by=None, reverse_order=None, slice=None, filter=None):
        experiments = self._getExperiments(director, filter=filter, order_by=order_by, reverse_order=reverse_order, slice=slice)

        cols = columns
        args = experiments, cols, director
        thetable = director.retrieveComponent(
            'experiment-table',
            factory="visual", args=args,
            vault=['visuals'])
        thetable.oncellchanged = select(element=thetable).notify(
            event='row-changed', actor='experimenttable', routine='processRowChange')
        return thetable
    

    def __init__(self, name='experiment'):
        super(Actor, self).__init__(name)
        return


    # db access
    def _countExperiments(self, director, filter=None):
        db = director.clerk.db
        q = experimentQuery(db, filter=filter)
        return q.count()


    def _getExperiments(self, director, filter=None, order_by=None, reverse_order=None, slice=None):
        # this implementation does not work when order_by=Type
        self._debug.log('filter: %r, order_by: %r, slice: %r' % (filter, order_by, slice))

        db = director.clerk.db
        q = experimentQuery(db, filter=filter)

        if order_by:
            q = q.order_by(order_by)
        if slice:
            if reverse_order:
                n = self._countExperiments(director, filter=filter)
                slice = n-slice[1], n-slice[0]
            q = q.slice(*slice)

        ret = q.all()
        if reverse_order:
            ret.reverse()
        return ret


columns = [ 'id', 'description']
measure2dbcol = {
    'description': 'short_description',
    }
filtercols = columns


from dsaw.db.VersatileReference import global_pointer
from vnf.dom.NeutronExperiment import NeutronExperiment
def experimentQuery(db, filter=None):
    return db.query(NeutronExperiment).filter(filter)


def actor(): return Actor()


# version
__id__ = "$Id$"

# End of file 

