#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


import luban.content as lc

from luban.content import load, select, alert

from luban.content.Button import Button
from luban.content.Paragraph import Paragraph


# common actions
setpagetitle = select(id='').setAttr(title='Virtual neutron facility: experiments')
from  vnf.components.visuals import set_contextual_help
sethelppage = set_contextual_help(
    page='UserGuide-experiments', label='about experiments')


#
from vnf.components.MasterTable import FilterSyntaxError, MasterTableActor as base
class Actor(base):


    class Inventory(base.Inventory):

        import pyre.inventory

        # in case of working with one experiment
        id = pyre.inventory.str('id')
        short_description = pyre.inventory.str('short_description')
        instrument = pyre.inventory.str('instrument')
        sample = pyre.inventory.str('sample')


    def default(self, director):
        return self.showListView(director)


    def showListView(self, director):
        try:
            view = self.createListView(director)
        except FilterSyntaxError, msg:
            return alert('filter syntax error: %s' % msg)
        return [
            select(id = 'main-display-area').replaceContent(view),
            setpagetitle,
            ] + sethelppage


    def createListView(self, director):
        order_by        = self.inventory.order_by
        reverse_order   = self.inventory.reverse_order
        number_records_per_page     = self.inventory.number_records_per_page
        page_number     = self.inventory.page_number

        filter_expr     = self.inventory.filter_expr
        filter_key      = self.inventory.filter_key
        filter_value    = self.inventory.filter_value

        label = self.inventory.label
        mine = self.inventory.mine
        
        tableview = director.retrieveVisual(
            'neutronexperiment/tableview',
            director,
            self.name,
            label           = label,
            mine           = mine,
            filter_expr     = filter_expr,
            filter_key      = filter_key,
            filter_value    = filter_value,
            order_by        = order_by,
            reverse_order   = reverse_order,
            number_records_per_page = number_records_per_page,
            page_number     = page_number
            )
        return tableview
    
        
    def showExperimentView(self, director):
        id = self.inventory.id
        
        domaccess = self._domaccess(director)
        if not domaccess.isConstructed(id):
            view = self.createEditor(director)
        else:
            #view = self.createSimpleDisplay(director)
            view = self.createView(director)
        return select(id='main-display-area').replaceContent(view)



    def createView(self, director):
        return director.retrieveVisual(
            name='neutronexperiment/view/skeleton',
            id = self.inventory.id,
            director = director
            )


    def createSimpleDisplay(self, director):
        domaccess = self._domaccess(director)
        id = self.inventory.id
        
        doc = lc.document(Class='container')
        
        if domaccess.isEditable(id):
            link = lc.link(
                label='edit',
                onclick=select(id='main-display-area').replaceContent(
                  load(actor='experiment', routine='createEditor',
                       id=id)
                ),
                )
            doc.add(link)

        doc.oncreate = select(element=doc).append(
            load(actor='orm/neutronexperiments', routine='display',
                 id = self.inventory.id, editlink = False)
            )
        return doc


    def createEditor(self, director):
        return director.redirect(
            actor='experiment/editor', routine='createEditor',
            id = self.inventory.id)


    def new(self, director):
        domaccess = self._domaccess(director)
        exp = domaccess.createExperiment()
        self.inventory.id = domaccess.orm(exp).id
        return self.edit(director)


    def edit(self, director):
        view = self.createEditor(director)
        return select(id='main-display-area').replaceContent(view)


    def _domaccess(self, director):
        return director.retrieveDOMAccessor('experiment')
    

    def _defaults(self):
        super(Actor, self)._defaults()
        self.inventory.order_by = 'date'
        self.inventory.reverse_order = True
        return


    def __init__(self, name='experiment'):
        super(Actor, self).__init__(name)
        return


    # db access



def actor(): return Actor()


# version
__id__ = "$Id$"

# End of file 

