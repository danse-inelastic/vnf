#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

frametitle = "VNF - change password"


from luban.content import load, select, alert, createCredential
import luban.content

from luban.components.Actor import Actor as base
from vnf.content.actors.registrar import ActorAddOn, createKey
class Actor(ActorAddOn, base):
    
    
    class Inventory(base.Inventory):
        
        import pyre.inventory
        
        firstname = pyre.inventory.str(name='firstname')
        lastname = pyre.inventory.str(name='lastname')
        username = pyre.inventory.str(name='username')
        email = pyre.inventory.str(name="email")
        password = pyre.inventory.str(name="password")
        confirmation = pyre.inventory.str(name="confirmation")
        organization = pyre.inventory.str(name='organization')
        
        key = pyre.inventory.str(name='key')
        
        
    def default(self, director):
        return self.interview(director)


    def interview(self, director):
        if self._checkKey(director):
            frame = luban.content.frame(title=frametitle)
            frame.document().paragraph(text="You don't have a correct key for this")
            return frame
        
        f = luban.content.frame(title=frametitle)
        
        #
        skeleton = director.retrieveVisual('skeleton')
        f.add(skeleton)
        
        body_frame = skeleton.find(id='body-frame')
        
        main_display = body_frame.document(id='main-display-area')
        main_display.add(self.createInterviewDocument(director))
        return f
    
    
    def createInterviewDocument(self, director):
        # retrieve data from db
        username = self.username
        registrant = self._getRegistrantRecords(username, director)[0]
        
        # prepare document
        document = luban.content.document( title = 'Change password for a VNF Account', id='interview-document' )
        #
        p = document.paragraph(Class='inline-display', id='interview-doc-description')
        p.text = [
            'Please update your VNF account password so that you can access',
            'the Virtual Neutron Facility.',
            'If you recall your password,',
            'please ',
            ]
        #
        loadlogindoc = load(actor='login', routine='recreate')
        signin_link = luban.content.link( label='sign in', onclick = loadlogindoc)
        document.add(signin_link)

        # build the registration form
        form = document.form(
            name='changepassword', title='Change password', id='change-password-form')
        
        usernamedoc = form.document(id='username')
        usernamedoc.paragraph(text="Username: %s" % self.username)
        
        email = form.text(name='email', label='Email',
                          value = self.inventory.email)
        email.help = ('This address is used to keep you informed of status of your virtual experiments, updates to your VNF service, etc.')
        email.value = registrant.email

        password = form.password(name='password', label='Password')
        password.help = ('Passwords are also case sensitive.')
 
        confirmation = form.password(name='confirmation', label='Re-enter password')
        confirmation.help = ('Re-enter your password to confirm')

        submit = form.submitbutton(label="Update my account")
        
        form.onsubmit = select(element=form).submit(
            actor=self.name, routine='validateState',
            key = self.key, username=self.username,)
        
        return document


    def validateState(self, director):
        if self._checkKey(director):
            return alert("You don't have correct key for this")
        
        errors = {}

        if self.password != self.confirmation:
            errors['password'] = (
                'Password and confirmation you entered do not match.'
                )
        min_password_len = 8
        if len(self.password) < min_password_len:
            errors['password'] = (
                'Password too short. Must have at least %s characters.' % min_password_len
                )

        username = self.username
        all = self._getRegistrantRecords(username, director)
        if not all:
            errors['username'] = (
                'Username %r has not been registered.' % username \
                + 'Please choose a different one.'
                )
        if not self.username:
            errors['username'] = 'Cannot be empty'

        if not self.email:
            errors['email'] = 'Cannot be empty'

        if self.password and self.confirmation and self.password != self.confirmation:
            errors['confirmation'] = 'password does not match confirmation'
            
        if errors:
            return self.formError(director, errors=errors)
        return self.register(director)
 

    def register(self, director):
        if self._checkKey(director):
            return alert("bad key")
        
        # update registrant record
        registrant = self._getRegistrantRecords(self.username, director)[0]
        password = self._encode(director, self.password)
        registrant.password = password

        # update user record
        user = self._getUserRecords(self.username, director)[0]
        user.password = password
        
        # update
        director.clerk.db.updateRecord(registrant)
        director.clerk.db.updateRecord(user)
        
        # reload ipad so that password is up to date
        from vnf.utils.services.ipad import askIpadToReload
        askIpadToReload(director)
        
        # make announcements
        from vnf.utils.communications import announce

        # 1. alert administrators
        announce(director, 'password-change-alert', registrant)
        
        # 2. send an acknowlegement to registrant
        announce(director, 'password-change', registrant)
        
        return self.registrationComplete(director)


    def registrationComplete(self, director):
        document = luban.content.document(title='VNF account password updated')
        p = document.paragraph()
        p.text = [
            'Your VNF account password was updated. ',
            '',
            ]
        return select(id='body-frame').replaceContent(document)


    def formError(self, director, errors=None):
        from luban.content import select
        return [
            select(id='change-password-form').find(name).formfield(
                'showError', message=text)
            for name, text in errors.iteritems()
            ]
    
    
    def __init__(self, name=None):
        if name is None:
            name = "registrar/changepassword"
        super(Actor, self).__init__(name)
        return


    def _configure(self):
        super(Actor, self)._configure()

        self.firstname = self.inventory.firstname
        self.lastname = self.inventory.lastname
        self.username = self.inventory.username
        self.email = self.inventory.email
        self.password = self.inventory.password
        self.confirmation = self.inventory.confirmation
        self.organization = self.inventory.organization
        self.key = self.inventory.key

        return

    
    def _checkKey(self, director):
        """check if the key given by user is correct

        return True if incorrect
        """
        
        username = self.username
        registrant_records = self._getRegistrantRecords(username, director)
        if not registrant_records:
            # not good
            return True
        registrant = registrant_records[0]
        expected = createKey(registrant)
        return self.key != expected


    def _encode(self, director, password):
        method = director.clerk.getUser('__method__').password
        
        from vnf.components import usersFromDB
        encoder = usersFromDB()._encoders[method]

        return encoder(password)


def actor(): return Actor()

# version
__id__ = "$Id$"

# End of file 
