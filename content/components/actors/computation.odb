#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

from luban.content import load, select
from luban.components.AuthorizedActor import AuthorizedActor as base

class Actor(base):

    class Inventory(base.Inventory):
        import pyre.inventory
        id = pyre.inventory.str('id')
        type = pyre.inventory.str('type')
        posterior_action = pyre.inventory.str('posterior_action')
        iworker = pyre.inventory.str('iworker')


    def view(self, director):
        domaccess = director.retrieveDOMAccessor('computation')
        orm = domaccess.orm # why is this here? to reinitialize orm?
        table = director.clerk.db.getTable(self.inventory.type)
        actor = table.getActorName()
        #print actor
        return select(id='main-display-area').replaceContent(
            load(actor=actor, routine='createView',
                 id=self.inventory.id,)
            )

    def restartResultsRetrieval(self, director):
        domaccess = director.retrieveDOMAccessor('computation')
        orm = domaccess.orm  # why is this here? to reinitialize orm?
        
        computation = domaccess.getRecordByID(self.inventory.type, id=self.inventory.id)
        
        from vnf.utils.computation import start_results_retrieval
        start_results_retrieval(computation, director)

        posterior_action = self.inventory.posterior_action
        if posterior_action:
            from vnf.content import safe_eval_action
            return safe_eval_action(posterior_action)


    def createResultsDoc(self, director):
        record = self._getComputationRecord(director)
        return director.retrieveVisual(
            'computation-results',
            computation=record,
            actor=self.name, director=director
            )


    def getTaskIds(self, director):
        """find the itasks for the given iworker

        Input:
        - type, id: identify the computation
        - iworker: the iworker (str)
        
        Return: 
        - type: str
        - content: a comma sperated list of ids of found tasks
        """
        # the computation record
        computation = self._getComputationRecord(director)
        
        # search for tasks
        iworker = self.inventory.iworker
        tasks = computation.findTasks(director.clerk.db, iworker)

        ids = [t.id for t in tasks]
        return ','.join(ids)


    def _getComputationRecord(self, director):
        domaccess = self._domaccess(director)
        orm = domaccess.orm
        type = self.inventory.type
        id = self.inventory.id
        try:
            return domaccess.getComputationRecord(type, id)
        except:
            return domaccess.getRecordByID(type, id)
        

    def _domaccess(self, director):
        domaccess = director.retrieveDOMAccessor('computation')
        orm = domaccess.orm
        return domaccess
    
    def __init__(self, name='computation'):
        super(Actor, self).__init__(name)
        return

def actor(): return Actor()


# version
__id__ = "$Id$"

# End of file 

