#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

import luban.content


# common actions
setpagetitle = luban.content.select(id='').setAttr(title='Virtual neutron facility: material simulations')
from  vnf.components.visuals import set_contextual_help
sethelppage = set_contextual_help(
    page='UserGuide-materialsimulations', label='about material simulations')



from vnf.components.MasterTable import FilterSyntaxError, MasterTableActor as base
class Actor(base):

    class Inventory(base.Inventory):

        import pyre.inventory

        # in case of working with one matter
        id          = pyre.inventory.str('id')
        type        = pyre.inventory.str('type')
        description = pyre.inventory.str('description')

    def default(self, director):
        return self.showListView(director)

    def debugListView(self, director):
        frame = luban.content.frame()
        doc = frame.document(id='main-display-area')
        view = self.createListView(director)
        doc.add(view)
        return  frame


    def showListView(self, director):
        try:
            view = self.createListView(director)
        except FilterSyntaxError, msg:
            return luban.content.alert('filter syntax error: %s' % msg)
        return [
            luban.content.select(id = 'main-display-area').replaceContent(view),
            setpagetitle,
            ] + sethelppage
    
            
    def createListView(self, director):
        order_by        = self.inventory.order_by
        reverse_order   = self.inventory.reverse_order
        number_records_per_page     = self.inventory.number_records_per_page
        page_number     = self.inventory.page_number

        filter_expr     = self.inventory.filter_expr
        filter_key      = self.inventory.filter_key
        filter_value    = self.inventory.filter_value

        label = self.inventory.label
        mine = self.inventory.mine
        
        tableview = director.retrieveVisual(
            'materialsimulation/tableview',
            director,
            self.name,
            label           = label,
            mine            = mine,
            filter_expr     = filter_expr,
            filter_key      = filter_key,
            filter_value    = filter_value,
            order_by        = order_by,
            reverse_order   = reverse_order,
            number_records_per_page = number_records_per_page,
            page_number     = page_number
            )        
        return tableview
    

    def newSimulation(self, director):
        """Retrieves list of simulations"""
        if not director.accesscontrol.checkPrivilege(
            target='simulation', name='run'):
            title = 'Alert'
            doc = luban.content.document(title=title)
            doc.paragraph(text="You don't have access to run simulations.")
            return doc
        
        return director.retrieveVisual('material_simulations/new',
                                        director    = director)

    # this is obsolete
    def _createTable(self,
                    director,
                    order_by        = None,
                    reverse_order   = None,
                    slice           = None,
                    filter          = None,
                    label           = None):

        order_by        = order_by or self.inventory.order_by
        reverse_order   = reverse_order or self.inventory.reverse_order
        filter          = filter or self.inventory.filter_expr

        domaccess       = director.retrieveDOMAccessor(self.name)

        matsims         = domaccess.getSimulations(
                                                    order_by        = order_by,
                                                    reverse_order   = reverse_order,
                                                    slice           = slice,
                                                    filter          = filter,
                                                    label           = label
                                                    )

        # Temp solution
        matsims         += director.clerk.getQESimulations()

        cols = columns
        args = matsims, cols, director
        thetable = director.retrieveComponent(
                                              'materialsimulation-table',
                                              factory     = "visual",
                                              args        = args,
                                              vault       = ['visuals']
                                              )
        if thetable is None:
            raise RuntimeError, 'failed to load visual "materialsimulation table"'
        # thetable = table(*args)
        thetable.oncellchanged = luban.content.select(element=thetable).notify(
            event='row-changed',
            actor='matsimtable',
            routine='processRowChange')
        return thetable
    
    def view(self, director):
        matter = self._getMatter(director)
        
        from luban.content.Page import Page
        page = Page(title='Material %s' % matter.short_description)

        view = self.createView(director)
        page.add(view)
        
        return page

    def showMaterialSimulation(self, director):
        actor = 'computation'
        routine = 'view'
        id = self.inventory.id
        type = self.inventory.type
        return director.redirect(actor=actor, routine=routine, id=id, type=type)
    
    def createMatterDescriptionInputControl(self, director):
        from luban.content.Splitter import Splitter
        from luban.content.Link import Link
        from luban.content.FormTextField import FormTextField
        doc = Splitter(id='matter-description-editor-container')

        left = doc.section()
        label = 'To give this material a name, click here'
        link = Link(label=label, id='matterdoc-change-matter-name-link')
        left.add(link)

        right = doc.section()
        field = FormTextField(
            id = 'matter-description-input',
            hidden = 1,
            )
        field.onchange = luban.content.load(
            actor='matter', routine='changeDescriptionAndUpdateMatterView',
            id = self.inventory.id, type = self.inventory.type,
            description = luban.content.select(element=field).formfield('getValue')
            )
        right.add(field)

        left.onclick = [luban.content.select(element=link).hide(), luban.content.select(element=field).show()]
        return doc

    def changeDescriptionAndUpdateMatterView(self, director):
        self.changeDescription(director)
        return self.showMaterialView(director)

    def changeDescription(self, director):
        matter = self._getMatter(director)
        matter.short_description = self.inventory.description
        director.clerk.updateRecordWithID(matter)
        return

    def _defaults(self):
        super(Actor, self)._defaults()
        self.inventory.order_by = 'date'
        self.inventory.reverse_order = True
        return


    def __init__(self, name='materialsimulation'):
        super(Actor, self).__init__(name)
        return
    

def actor(): return Actor()


# version
__id__ = "$Id$"

# End of file 

