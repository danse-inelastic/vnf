#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from luban.content import load, select
import luban.content as lc

from vnfb.components.MasterTable import FilterSyntaxError, MasterTableActor as base


class Actor(base):


    class Inventory(base.Inventory):

        import pyre.inventory

        # in case of working with one matter
        id = pyre.inventory.str('id')
        type = pyre.inventory.str('type')
        description = pyre.inventory.str('description')


    def default(self, director):
        return self.showListView(director)


    def showListView(self, director):
        view = self.createListView(director)
        return select(id='main-display-area').replaceContent(view)


    def createListView(self, director):
        # TODO: I guess needs to be refactored the same way as atomicstructure.odb was
        domaccess = director.retrieveDOMAccessor(self.name)
        
        from vnfb.components.MasterTable import MasterTableFactory, filtercompiler
        def countrecords(filter, label=None):
            return domaccess.countSimulations(filter, label=label)
        def createtable(order_by, reverse_order, slice, filter, label=None):
            return self.createTable(
                director,
                order_by=order_by,
                reverse_order=reverse_order,
                slice=slice,
                filter=filter,
                label=label
                )
        compilefilter = filtercompiler(columns, measure2dbcol)

        smartlabelaccess = director.retrieveDOMAccessor('smartlabel')
        def filterfromlabel(label):
            return smartlabelaccess.createFilterExprFromLabel(
                label, self.name)
        smartlabels = smartlabelaccess.getLabelNames(self.name)

        labelaccess = director.retrieveDOMAccessor('label')
        labels = labelaccess.getLabelNames(self.name)
            
        factory = MasterTableFactory(
            self.name, countrecords, createtable,
            compilefilter, filtercols,
            filterfromlabel, smartlabels, labels)

        order_by = self.inventory.order_by
        reverse_order = self.inventory.reverse_order
        number_records_per_page = self.inventory.number_records_per_page
        page_number = self.inventory.page_number

        filter_expr = self.inventory.filter_expr
        filter_key = self.inventory.filter_key
        filter_value = self.inventory.filter_value

        label = self.inventory.label

        tableview = factory.create(
            label=label,
            filter_expr=filter_expr, filter_key=filter_key, filter_value=filter_value,
            order_by=order_by,
            reverse_order=reverse_order,
            number_records_per_page=number_records_per_page,
            page_number=page_number)

        # add new button
        toolbar = tableview.find(id='materialsimulation-table-toptoolbar')

        button = lc.button(label='New', tip='create new simulation', icon='new.png')
        toolbar.add(button)
        button.onclick = select(id='main-display-area').replaceContent(
            load(actor='materialsimulation', routine='newAtomicStructureForm')
            )


        return tableview


    def createTable(
        self, director,
        order_by=None, reverse_order=None, slice=None,
        filter=None, label=None):

        order_by = order_by or self.inventory.order_by
        reverse_order = reverse_order or self.inventory.reverse_order
        filter = filter or self.inventory.filter_expr

        domaccess = director.retrieveDOMAccessor(self.name)
        matsims = domaccess.getSimulations(
            order_by=order_by, reverse_order=reverse_order, slice=slice,
            filter=filter,
            label=label,
            )

        cols = columns
        args = matsims, cols, director
        thetable = director.retrieveComponent(
            'materialsimulation-table',
            factory="visual", args=args,
            vault=['visuals'])
        # thetable = table(*args)
        thetable.oncellchanged = select(element=thetable).notify(
            event='row-changed', actor='matsimtable', routine='processRowChange')
        return thetable
    

    def view(self, director):
        matter = self._getMatter(director)
        
        from luban.content.Page import Page
        page = Page(title='Material %s' % matter.short_description)

        view = self.createView(director)
        page.add(view)
        
        return page


    def showMaterialSimulation(self, director):
        actor = 'material_simulations/' + self.inventory.type
        routine = 'view'
        id = self.inventory.id
        return director.redirect(actor=actor, routine=routine, id=id)
    
        
    def createMatterDescriptionInputControl(self, director):
        from luban.content.Splitter import Splitter
        from luban.content.Link import Link
        from luban.content.FormTextField import FormTextField
        doc = Splitter(id='matter-description-editor-container')

        left = doc.section()
        label = 'To give this material a name, click here'
        link = Link(label=label, id='matterdoc-change-matter-name-link')
        left.add(link)

        right = doc.section()
        field = FormTextField(
            id = 'matter-description-input',
            hidden = 1,
            )
        field.onchange = load(
            actor='matter', routine='changeDescriptionAndUpdateMatterView',
            id = self.inventory.id, type = self.inventory.type,
            description = select(element=field).formfield('getValue')
            )
        right.add(field)

        left.onclick = [select(element=link).hide(), select(element=field).show()]
        return doc


    def changeDescriptionAndUpdateMatterView(self, director):
        self.changeDescription(director)
        return self.showMaterialView(director)


    def changeDescription(self, director):
        matter = self._getMatter(director)
        matter.short_description = self.inventory.description
        director.clerk.updateRecordWithID(matter)
        return


    def __init__(self, name='materialsimulation'):
        super(Actor, self).__init__(name)
        return



columns = [ 'selected', 'id', 'description', 'type', 'matter', 'date']
measure2dbcol = {
    'description': 'short_description',
    }
filtercols = columns[1:]


def actor(): return Actor()


# version
__id__ = "$Id$"

# End of file 

