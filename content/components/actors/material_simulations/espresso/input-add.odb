#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

from vnf.dom.QEConfiguration import QEConfiguration
from vnfb.utils.qeconst import PARSERS
from vnfb.utils.qegrid import QEGrid

from luban.content import select
from luban.content import load
from luban.content.FormSelectorField import FormSelectorField
from luban.content.FormTextArea import FormTextArea
from luban.content.FormTextField import FormTextField
from luban.content.FormSubmitButton import FormSubmitButton
from luban.content.Form import Form

import luban.content as lc
from luban.components.AuthorizedActor import AuthorizedActor as base

# Requires simulation id, 
class Actor(base):

    class Inventory(base.Inventory):
        import pyre.inventory
        id          = pyre.inventory.str('id', default='')          # Simulation Id
        taskid      = pyre.inventory.str('taskid', default='')
        type        = pyre.inventory.str('type', default='')        # Type of the configuration file
        fname       = pyre.inventory.str('fname', default='')
        description = pyre.inventory.str('description', default='')
        parser      = pyre.inventory.str('parser', default='')
        text        = pyre.inventory.str('text', default='')


    def default(self, director):
        return select(id='main-display-area').replaceContent(self.content(director))


    def content(self, director):

        def viewIndicator(director):
            path = []
            path.append(('Simulations ', load(actor='materialsimulation')))
            path.append(('Quantum Espresso ', load(actor='materialsimulation')))
            path.append(('%s ' % self.id, load(actor    = 'material_simulations/espresso/sim-view',
                                               id       = self.id)))
            path.append(('%s Task ' % self.type, load(actor    = 'material_simulations/espresso/task-view',
                                                      id       = self.id,
                                                      taskid   = self.taskid,
                                                      type     = self.type)))


            path.append('Create Input Configuration')
            
            return director.retrieveVisual('view-indicator', path=path)

        doc         = lc.document(title   = "Create Input Configuration: %s" % self.type)
        splitter    = doc.splitter(orientation="vertical")
        sA          = splitter.section()
        sA.add(viewIndicator(director))
        sB          = splitter.section()

        # Keep for configuration builder
        #sB.add(lc.link(label="Use Configuration Builder", onclick=load(actor = "material_simulations/espresso/config-builder",
        #                                                               id    = self.id)))
        #sB.add(lc.paragraph(text="OR"))

        sB.add(self._setForm())

        return doc

    def _setForm(self):
        "Sets create new settings form"

        form        = Form(id='create-simulation-form')
        table       = QEGrid(lc.grid(Class="qe-form"))
        form.add(table.grid())

        fname           = FormTextField(name = "fname", value = self.fname)
        description     = FormTextField(name = "description", value=self.description)   # Make as textarea
        parser          = FormSelectorField(name="parser",
                                            entries=enumerate(PARSERS))
        text            = FormTextArea(name="text", value=self.text)

        submit      = FormSubmitButton(label="Create Input Configuration")
        cancel      = lc.button(label="Cancel")
        cancel.onclick  = load(actor = 'material_simulations/espresso/sim-view', id=self.id)

        st          = QEGrid(lc.grid()) # Submit Table
        st.addRow((submit, cancel), ("qe-action-accept", "qe-action-cancel"))

        table.addRow(("Name:", fname))
        table.addRow(("Description:", description))
        table.addRow(("Parser:", parser))
        table.addRow(("Configuration:", text))
        table.addRow(("", st.grid()))

        table.setColumnStyle(0, "qe-form-label")
        table.setColumnStyle(1, "qe-form-field")

        form.onsubmit   = select(element=form).submit(actor     = 'material_simulations/espresso/input-add',
                                                      routine   = 'createRecord',
                                                      taskid    = self.taskid,
                                                      id        = self.id)

        return form


    def createRecord(self, director):
        """Create configuration record"""
        params  = {"taskid":        self.taskid,
                   "filename":      self.fname,
                   "description":   self.description,
                   "parser":        PARSERS[int(self.parser)],
                   "text":          self.text,
                   "type":          self.type
                   }
        config  = QEConfiguration()
        config.setDirector(director)
        config.createRecord(params)
        
        return load(actor = 'material_simulations/espresso/sim-view', id = self.id)

    def _verify(self):
        #Note:
        #   - Do not allow the following characters in the input filename:
        #	"/"
        #	"'"
        #	"""
        #   - filename should not be empty
        pass

    def __init__(self):
        super(Actor, self).__init__(name='material_simulations/espresso/input-add')

        return


    def _configure(self):
        super(Actor, self)._configure()
        self.id             = self.inventory.id
        self.taskid         = self.inventory.taskid
        self.type           = self.inventory.type
        self.fname          = self.inventory.fname
        self.description    = self.inventory.description
        self.parser         = self.inventory.parser
        self.text           = self.inventory.text


    def _init(self):
        super(Actor, self)._init()
        return

def actor():
    return Actor()

__date__ = "$Nov 9, 2009 4:09:15 PM$"



