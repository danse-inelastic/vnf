#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

from vnf.qeutils.qeutils import stamp2date
from vnf.qeutils.qegrid import QEGrid
from vnf.qeutils.inputinfo import InputInfo

from luban.content import select
from luban.content import load

import luban.content as lc
from luban.components.AuthorizedActor import AuthorizedActor as base

# Requires simulation id, config id and config type: (id, configid, type)
class Actor(base):

    class Inventory(base.Inventory):
        import pyre.inventory
        id          = pyre.inventory.str('id', default='')    # Simulation Id
        taskid      = pyre.inventory.str('taskid', default='')
        type        = pyre.inventory.str('type', default='')
        linkorder   = pyre.inventory.int('linkorder', default=0)


    def default(self, director):
        return select(id='main-display-area').replaceContent(self.content(director))


    def content(self, director):
        sim     = director.clerk.getQESimulations(id=self.id)
        task    = director.clerk.getQETasks(id=self.taskid)

        def viewIndicator(director):
            qelink  = load( actor           = 'materialsimulation',
                            filter_key      = 'type',
                            filter_value    = 'qesimulations')

            path = []
            path.append(('Simulations ', load(actor='materialsimulation')))
            path.append(('Quantum Espresso ', qelink))
            path.append(('%s ' % self.id, load(actor    = 'material_simulations/espresso/sim-view',
                                               id       = self.id)))

            path.append('%s Task: %s' % (self.type, self.taskid))

            return director.retrieveVisual('view-indicator', path=path)

        doc         = lc.document(title="%s Task: %s" % (self.type, self.taskid))
        splitter    = doc.splitter(orientation="vertical")
        sA          = splitter.section()
        sA.add(viewIndicator(director))
        sC          = splitter.section(id="qe-section-actions")
        self._showActions(sC)

        sB          = splitter.section()
        table       = QEGrid(lc.grid(Class = "qe-table"))
        sB.add(table.grid())
        self._showTask(director, table, task)

        # Should go after all of the rows are added!
        table.setColumnStyle(0, "qe-cell-param")

        return doc


    def _showActions(self, section):  #, inputs
        self._actionBack(section)
        self._actionEdit(section)
        self._actionDelete(section)

        section.add(lc.document(Class="clear-both"))


    def _actionBack(self, section):
        "Back action"
        section.add(lc.link(label="Back",
                            Class="qe-action-back",
                            onclick = load(actor      = 'material_simulations/espresso/sim-view',
                                             id         = self.id))
                    )


    def _actionEdit(self, section):
        "Edit action"
        section.add(lc.link(label="Edit",
                            Class="qe-action-edit",
                            onclick = load(actor      = 'material_simulations/espresso/task-edit',
                                             id         = self.id,
                                             taskid     = self.taskid,
                                             type       = self.type))
                    )


    def _actionDelete(self, section):
        "Delete action"
        section.add(lc.link(label="Delete",
                            Class="qe-action-delete",
                            onclick = load(actor      = 'material_simulations/espresso/task-delete',
                                             id         = self.id,
                                             taskid     = self.taskid,
                                             type       = self.type))
                    )

                    
    def _showTask(self, director, table, task):
        if not task:    # No task, no rows
            return
        
        table.addRow(('Type:', task.type))
        table.addRow(("Package: ", task.package ))
        table.addRow(("Input: ", self._input(director) ))
        table.addRow(('Description:', task.short_description))
        table.addRow(('Label: ', task.label))
        table.addRow(('Time Created: ', stamp2date(task.timecreated)))
        table.addRow(('Current Job: ', 'None'))
        #table.addRow(('All Jobs: ', 'None'))   # Keep. Disable option to run same task multiple times


    def _input(self, director):
        "Show input"
        qeinput = InputInfo(director, self.id, self.taskid, self.type, self.linkorder)
        return qeinput.getLink()


    def __init__(self):
        super(Actor, self).__init__(name='material_simulations/espresso/task-view')


    def _configure(self):
        super(Actor, self)._configure()
        self.id         = self.inventory.id
        self.taskid     = self.inventory.taskid
        self.type       = self.inventory.type
        self.linkorder  = self.inventory.linkorder


    def _init(self):
        super(Actor, self)._init()


def actor():
    return Actor()


__date__ = "$Dec 12, 2009 10:40:57 PM$"


