#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

# OBSOLETE !!!

from vinil.utils.const import STEPS, SERVERS

from luban.content import select
from luban.content.Paragraph import Paragraph
from luban.content.Document import Document
from luban.content.HtmlDocument import HtmlDocument
from luban.content import load
from luban.content.Link import Link
from luban.content.Splitter import Splitter
from luban.content.FormSelectorField import FormSelectorField
from luban.content.Form import Form

from vinil.components.Actor import Actor as base
class Actor(base):

    class Inventory(base.Inventory):
        import pyre.inventory
        id              = pyre.inventory.str('id', default='')
        # 'server' section
        servername      = pyre.inventory.str('servername', default='')
        numproc         = pyre.inventory.int('numproc', default=8)
        numnodes        = pyre.inventory.int('numnodes', default=8)
        procpernode     = pyre.inventory.int('procpernode', default=12)
        npool           = pyre.inventory.int('npool', default=8)
        executable      = pyre.inventory.str('executable', default='mpirun')
        params          = pyre.inventory.str('params', default='--mca btl openib,sm,self')
        # 'modules' section
        modulesespresso    = pyre.inventory.str('modulesespresso', default='openmpi/gnu acml/4.3.0_gfortran64_int32 espresso')


    def content(self, director):
        from vinil.utils.simulationsteps import SimulationSteps
        from vinil.utils.stepper import Stepper
        splitter    = Splitter(orientation='vertical', id="step-splitter")

        simsteps    = SimulationSteps(current=3)
        s_steps     = simsteps.getSteps()
        splitter.add(s_steps)

        s_content   = splitter.section()
        d           = Document(Class="step-content")
        text ="""Here you can set parameters specific to computational server"""
        d.add(Paragraph(text=text))

        #d_form      = Document(Class="step-content-form")
#        config      = director.clerk.getConfigurations(id=1)

        form        = Form(id="form-vinil")
        servername      = form.selector(name="servername", label='Server Name', entries=enumerate(SERVERS)) # value?
        numproc         = form.text(name="numproc", label='Number of Processes', value=self.numproc)
        numnodes        = form.text(name="numnodes", label='Number of Nodes', value=self.numnodes)
        procpernode     = form.text(name="procpernode", label='Processors Per Node', value=self.procpernode)
        npool           = form.text(name="npool", label='Npool', value=self.npool)
        executable      = form.text(name="executable", label='Executable', value=self.executable)
        params          = form.text(name="params", label='Additional Parameters', value=self.params)
        modulesespresso    = form.text(name="", label='Modules', value=self.modulesespresso)

        submit          = form.submitbutton(label="Create Simulation Parameters")
        form.onsubmit   = select(element=form).submit(actor = 'espresso/step-three', routine = 'createRecord', id=self.id)

        d.add(form)

        s_content.add(d)
        linklist    = (("espresso/step-two", "link", self.id), ("espresso/step-four", "link", self.id))
        stepper     = Stepper(linklist)
        s_stepper   = stepper.getStepper()
        splitter.add(s_stepper)

        return splitter


    def createRecord(self, director):
        # Create record
        return load(actor='espresso/step-four', routine='link', id=self.id)  # Redirection to the page

    def pathlist(self, director):
        sim     = director.clerk.getSimulations(id=self.id)
        self.pathlist = [("Home","greet","link"),
                         ("Simulations", "simulations", "link"),
                         ("Quantum Espresso", "espresso/index", "link"),
                         (sim.sname, "espresso/sim-view", "link", self.id),
                         (STEPS[2], None, None)
                         ]

        return self.pathlist

    def __init__(self, *args, **kwds):
        super(Actor, self).__init__(*args, **kwds)

        return


    def _configure(self):
        super(Actor, self)._configure()
        self.id              = self.inventory.id
        self.servername      = self.inventory.servername
        self.numproc         = self.inventory.numproc
        self.numnodes        = self.inventory.numnodes
        self.procpernode     = self.inventory.procpernode
        self.npool           = self.inventory.npool
        self.executable      = self.inventory.executable
        self.params          = self.inventory.params
        self.modulesespresso    = self.inventory.modulesespresso

        return


    def _init(self):
        super(Actor, self)._init()
        return

def actor():
    return Actor('espresso/step-three')



# ************ DEAD CODE **********************

#        form.textarea(label='Configuration file', value=config.text, Class="config-textarea")


__date__ = "$Sep 29, 2009 7:49:10 PM$"


