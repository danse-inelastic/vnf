import os.path
#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

from vnfb.utils.qeutils import stamp2date
from vnfb.utils.qegrid import QEGrid

from luban.content import select
from luban.content import load

import luban.content as lc
from vnfb.utils.qeutils import remoteResultsPath
import os
from vnfb.utils.qeutils import qeinput, packname, resultsdir
from luban.components.AuthorizedActor import AuthorizedActor as base

# Requires simulation id, config id and config type: (id, configid, type)
class Actor(base):

    class Inventory(base.Inventory):
        import pyre.inventory
        simid          = pyre.inventory.str('simid', default='')


    def create(self, director):
        "Create phonon DOS in idf format"
        #self._convertResults(director)
        #self._createRecord(director)
        self._relocateResults(director)

        return director.redirect(actor   = 'material_simulations/espresso/results',
                                 routine = 'default',
                                 id      = self.simid)


    # XXX: Check if the DOS is converted correctly!
    def _convertResults(self, director):
        """Convert matdyn output (matdyn.modes, matdyn.freq, matdyn.dos) to
        'data.idf' file to jobs temp directory
        """
        import idf.DOS
        from qecalc.qetask.qeparser.pwinput import PWInput
        from qecalc.qetask.matdyntask import MatdynTask

        TO_THZ  = 0.0299792458

        # Example: mddir   = "/home/dexity/exports/vnf/vnfb/content/data/tmp/tmpTRqFuy/8CNH5MUJ"
        mddir       = resultsdir(director, self.simid, "MATDYN")    # tmp results directory
        flvec       = os.path.join(mddir, "matdyn.modes")
        flfrq       = os.path.join(mddir, "matdyn.freq")
        fldos       = os.path.join(mddir, "matdyn.dos")
        outdos      = os.path.join(mddir, "data.idf")

        # Configuration setting for QECalc
        settingString = """[matdyn.x]
flvec = %s
flfrq = %s
fldos = %s""" % (flvec, flfrq, fldos)

        matdyn = MatdynTask( configString = settingString)
        #matdyn.syncSetting()
        matdyn.output.parse()
        axis, dos = matdyn.output.property('phonon dos')
        idf.DOS.write(axis*TO_THZ, dos, filename = outdos, comment = '')

        # XXX: Wait for 5 sec before moving it to phonodoses location
        

    def _createRecord(self, director):
        "Creates 'phonondoses' record (taken from: vnfb/components/ComputationResultRetriever.py)"
        from vnfb.dom.material_simulations.PhononDOS import PhononDOSTable

        domaccessor = director.retrieveDOMAccessor('material_simulations/phonondos')
        orm         = domaccessor.orm   # ?
        clerk       = director.clerk
        computation = clerk.getQESimulations(id = self.simid)
        record      = clerk.insertNewOwnedRecord(PhononDOSTable, owner = computation.creator)

        # The result record should know where it comes from
        computation.results.add(record, clerk.db)
        record.matter = computation.structureid
        clerk.db.updateRecord(record)

    # XXX: Replace by correct phonondoses id
    def _relocateResults(self, director):
        "Copy from tmp/ directory to phonodoses directory"
        # Making it in a "kosher" way will make your life hard
        #domaccessor = director.retrieveDOMAccessor('material_simulations/phonondos')
        #orm         = domaccessor.orm   # ?
        #path    = director.dds.abspath(self._job)

        dataroot    = self._dataroot(director)
        pid         = os.path.join("phonondoses", "4Z986WID") # Phonon DOS id
        dest        = os.path.join(dataroot, pid)

        mddir       = resultsdir(director, self.simid, "MATDYN")
        src         = os.path.join(mddir, "data.idf")   # XXX Check if it exists

        import shutil
        print src, dest
        shutil.copy(src, dest)


    def _dataroot(self, director):
        "Returns data root path"
        dds = director.dds
        return os.path.abspath(dds.dataroot)


    def __init__(self):
        super(Actor, self).__init__(name='material_simulations/espresso/phonondos')
        return


    def _configure(self):
        super(Actor, self)._configure()
        self.simid             = self.inventory.simid


    def _init(self):
        super(Actor, self)._init()
        return

def actor():
    return Actor()


__date__ = "$Jan 18, 2010 10:30:25 PM$"


