#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

from vnfb.qeutils.qeconst import TYPE

from luban.content import select
from luban.content import load

import luban.content as lc
from luban.components.AuthorizedActor import AuthorizedActor as base

# Requires simulation id, 
class Actor(base):

    class Inventory(base.Inventory):
        import pyre.inventory
        id          = pyre.inventory.str('id', default='')          # Simulation Id
        taskid      = pyre.inventory.str('taskid', default='')
        type        = pyre.inventory.str('type', default='')        # Type of the configuration file
        structureid = pyre.inventory.str('structureid', default='')
        fname       = pyre.inventory.str('fname', default='')
        description = pyre.inventory.str('description', default='')
        text        = pyre.inventory.str('text', default='')
        mattertype  = pyre.inventory.str('mattertype', default='0')  # From input-pw visual


    def default(self, director):
        return select(id='main-display-area').replaceContent(self.content(director))


    def content(self, director):

        def viewIndicator(director):
            path = []
            path.append(('Simulations ', load(actor='materialsimulation')))
            path.append(('Quantum Espresso ', load(actor='materialsimulation')))
            path.append(('%s ' % self.id, load(actor    = 'material_simulations/espresso/sim-view',
                                               id       = self.id)))
            path.append(('%s Task ' % self.type, load(actor    = 'material_simulations/espresso/task-view',
                                                      id       = self.id,
                                                      taskid   = self.taskid,
                                                      type     = self.type)))
            path.append('Select Option')
            
            return director.retrieveVisual('view-indicator', path=path)

        doc         = lc.document(title   = "Create Input Configuration: %s" % self.type)
        splitter    = doc.splitter(orientation="vertical")
        sA          = splitter.section()
        sA.add(viewIndicator(director))
        sB          = splitter.section()
        sB.add(self._setForm(director))

        return doc

    #XXX: Consider special case for PW2
    def _setForm(self, director):
        "Sets create new settings form"
        visual  = "material_simulations/espresso/input-default"

        if self.type in TYPE:
            #  Not a very flexible way retrieving visuals
            visual  = "material_simulations/espresso/input-%s" % self.type.lower()

        return director.retrieveVisual(visual,
                                       actor        = self.inventory,
                                       director     = director,
                                       structureid  = self.structureid,
                                       simtype      = self._simType(director))


    def _simType(self, director):
        "Returns simulation type"
        sim     = director.clerk.getQESimulations(id=self.id)
        if not sim:
            return ""

        return sim.type


    def __init__(self):
        super(Actor, self).__init__(name='material_simulations/espresso/input-generate')


    def _configure(self):
        super(Actor, self)._configure()
        self.id             = self.inventory.id
        self.taskid         = self.inventory.taskid
        self.type           = self.inventory.type
        self.structureid    = self.inventory.structureid
        self.fname          = self.inventory.fname
        self.description    = self.inventory.description
        self.text           = self.inventory.text
        self.mattertype     = self.inventory.mattertype


    def _init(self):
        super(Actor, self)._init()
        return

def actor():
    return Actor()

__date__ = "$Nov 9, 2009 4:09:15 PM$"





