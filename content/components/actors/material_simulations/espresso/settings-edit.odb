#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

from vnfb.utils.qegrid import QEGrid

from luban.content import select
from luban.content import load
from luban.content.Form import Form
from luban.content.FormSelectorField import FormSelectorField
from luban.content.FormTextField import FormTextField
from luban.content.FormSubmitButton import FormSubmitButton

import luban.content as lc
from luban.components.AuthorizedActor import AuthorizedActor as base

# Requires simulation id,
class Actor(base):

    class Inventory(base.Inventory):
        import pyre.inventory
        id          = pyre.inventory.str('id', default='')          # Simulation Id
        configid    = pyre.inventory.str('configid', default='')
        sname       = pyre.inventory.str('sname', default='')
        description = pyre.inventory.str('description', default='') # Not used
        numproc     = pyre.inventory.int('numproc', default=0)
        numnodes    = pyre.inventory.int('numnodes', default=0)
        npool       = pyre.inventory.int('npool', default=0)
        executable  = pyre.inventory.str('executable', default='')
        params      = pyre.inventory.str('params', default='')
        modules     = pyre.inventory.str('modules', default='')
        text        = pyre.inventory.str('text', default='')


    def default(self, director):
        return select(id='main-display-area').replaceContent(self.content(director))


    def content(self, director):
        sim       = director.clerk.getQESimulations(id=self.id)
        settings  = director.clerk.getQESettings(id=self.configid)


        def viewIndicator(director):
            path = []
            path.append(('Simulations ', load(actor='materialsimulation')))
             # Stub, should filter by simulation type
            path.append(('Quantum Espresso ', load(actor='materialsimulation')))
            path.append(('%s ' % self.id, load(actor    = 'material_simulations/espresso/sim-view',
                                               id       = self.id))
                        )
            path.append("Edit Settings Configuration")

            return director.retrieveVisual('view-indicator', path=path)

        doc         = lc.document(title="Edit Settings Configuration")
        splitter    = doc.splitter(orientation="vertical")
        sA          = splitter.section()
        sA.add(viewIndicator(director))
        sB          = splitter.section()
        sB.add(self._setForm(settings))

        return doc


    def _setForm(self, settings):
        "Edit settings form"
        form        = Form(id='create-simulation-form')
        table       = QEGrid(lc.grid(Class="qe-form"))
        form.add(table.grid())

        sname           = FormTextField(name = "sname", value = settings.sname)
        description     = FormTextField(name = "description", value=settings.description)   # Make as textarea
        numproc         = FormTextField(name = "numproc", value=settings.numproc)
        numnodes        = FormTextField(name = "numnodes", value=settings.numnodes)
        npool           = FormTextField(name = "npool", value=settings.npool)
        executable      = FormTextField(name = "executable", value=settings.executable)
        params          = FormTextField(name = "params", value=settings.params)
        modules         = FormTextField(name = "modules", value=settings.modules)

        submit      = FormSubmitButton(label="Edit Settings Configuration")
        cancel      = lc.button(label="Cancel")
        cancel.onclick  = load(actor = 'material_simulations/espresso/sim-view', id=self.id)

        st          = QEGrid(lc.grid()) # Submit Table
        st.addRow((submit, cancel), ("qe-action-accept", "qe-action-cancel"))

        table.addRow(("Name:", sname))
        table.addRow(("Description:", description))
        table.addRow(("Number of Processors:", numproc))
        table.addRow(("Number of Nodes:", numnodes))
        table.addRow(("Npool:", npool))
        table.addRow(("Executable:", executable))
        table.addRow(("Additional Parameters:", params))
        table.addRow(("Modules:", modules))

        table.addRow(("", st.grid()))

        table.setColumnStyle(0, "qe-form-label")
        table.setColumnStyle(1, "qe-form-field")

        form.onsubmit   = select(element=form).submit(actor     = 'material_simulations/espresso/settings-edit',
                                                      routine   = 'updateRecord',
                                                      id        = self.id,
                                                      configid  = self.configid)

        return form
    


    def updateRecord(self, director):
        """Update settings record"""
        settings     = director.clerk.getQESettings(id=self.configid)
        settings.setDirector(director)

        params  = {"sname":         self.sname,
                   "description":   self.description,  # I don't really need description at this point!
                   "numproc":       self.numproc,
                   "numnodes":      self.numnodes,
                   "npool":         self.npool,
                   "executable":    self.executable,
                   "params":        self.params,
                   "modules":       self.modules
                   # "text":    self.text
                  }                   
        settings.updateRecord(params)
        
        return load(actor = 'material_simulations/espresso/sim-view', id=self.id)


    def __init__(self):
        super(Actor, self).__init__(name='material_simulations/espresso/settings-edit')

        return


    def _configure(self):
        super(Actor, self)._configure()
        self.id             = self.inventory.id
        self.configid       = self.inventory.configid
        self.sname          = self.inventory.sname
        self.description    = self.inventory.description
        self.numproc        = self.inventory.numproc
        self.numnodes       = self.inventory.numnodes
        self.npool          = self.inventory.npool
        self.executable     = self.inventory.executable
        self.params         = self.inventory.params
        self.modules        = self.inventory.modules
        self.text           = self.inventory.text


    def _init(self):
        super(Actor, self)._init()
        return

def actor():
    return Actor()




__date__ = "$Nov 11, 2009 1:03:02 PM$"


