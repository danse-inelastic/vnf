#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

# Use matplotlib and QECalc to analyze results

from vnfb.utils.qeutils import stamp2date
from vnfb.utils.qeutils import parseFile
from vnfb.utils.qegrid import QEGrid

from luban.content import select
from luban.content import load

import luban.content as lc
from luban.components.AuthorizedActor import AuthorizedActor as base

# Requires simulation id, config id and config type: (id, configid, type)
class Actor(base):

    class Inventory(base.Inventory):
        import pyre.inventory
        id          = pyre.inventory.str('id', default='')          # Simulation Id


    def default(self, director):
        return select(id='main-display-area').replaceContent(self.content(director))


    def content(self, director):
        sim         = director.clerk.getQESimulations(id=self.id)
        simtasks    = director.clerk.getQESimulationTasks(where="simulationid='%s'" % self.id)
        #tasks       = director.clerk.getQETasks(where="taskid"id=self.id)
        #self._settings  = director.clerk.getQESettings(id=self.configid)    # type=settings

        def viewIndicator(director):
            path = []
            path.append(('Simulations ', load(actor='materialsimulation')))
            path.append(('Quantum Espresso ', load(actor='materialsimulation')))
            path.append(('%s ' % self.id, load(actor    = 'material_simulations/espresso/sim-view',
                                               id       = self.id)))

            path.append('Simulation Results')

            return director.retrieveVisual('view-indicator', path=path)

        doc         = lc.document(title="Simulation Results")
        splitter    = doc.splitter(orientation="vertical")
        sA          = splitter.section()
        sA.add(viewIndicator(director))
        sC          = splitter.section(id="qe-section-actions")
        self._showActions(sC)

        sB          = splitter.section()
        self._showPlot(director, sB)
        self._showData(sB)

        return doc


    def _showActions(self, section):  #, inputs
        section.add(lc.link(label="Back",
                            Class="qe-action-back",
                            onclick = load(actor      = 'material_simulations/espresso/sim-view',
                                             id         = self.id))
                    )

        section.add(lc.link(label="Electrons",
                            Class="qe-action-edit",
                            onclick = load(actor      = 'material_simulations/espresso/results',
                                             id         = self.id))
                    )

        section.add(lc.link(label="Phonons",
                            Class="qe-action-edit",
                            onclick = load(actor      = 'material_simulations/espresso/results',
                                             id         = self.id))
                    )

        section.add(lc.document(Class="clear-both"))


    def _showData(self, section):
        filename    = "/home/dexity/exports/vnf/vnfb/content/data/tmp/tmpTsdw21/4ICDAVNK/4I2NPMY4ni.scf.in.out"
        print self.getTotalEnergy(filename)
        print self.getFermiEnergy(filename)
        # Total energy
        # Fermy energy
        # Forces
        pass

    def getTotalEnergy(self, filename):
        """
        Borrowed from QECalc
        Extract total energy value from pwscf output
        """
        #read Espresso output into memory:
        file = open(filename)
        pwscfOut = file.readlines()
        posList =  [i for i,line in enumerate(pwscfOut) if '!    total energy' in line]
        return (float(pwscfOut[posList[-1]].split()[4]), 'Ry')


    def getFermiEnergy(self, filename):
        """
        Borrowed from QECalc
        Extract Fermi energy value from pwscf output
        """
        #read Espresso output into memory:
        file = open(filename)
        pwscfOut = file.readlines()
        posList =  [i for i,line in enumerate(pwscfOut) if 'the Fermi energy is' in line]
        return (float(pwscfOut[posList[-1]].split()[4]), 'eV')


    def _showPlot(self, director, section):
        section.add(self.electronDOS())


    def electronDOS(self):
        
        #infile      = EXPORT_ROOT + "/output/ni.scf.dos.out"
        # Added hardcoded dos
        infile      = "/home/dexity/exports/vnf/vnfb/content/data/tmp/tmpVr7_LD/4IJW2PEI/ni.dos"

        # Populate 'x', 'y' and 'z' (cumulative) lists from file
        (e,  up,  down,  cum) = parseFile(infile)

        plot = lc.plot2d(width=500, height=350)

        plot.curve(x=e, y=up, label='Spin Up')
        plot.curve(x=e, y=down, label='Spin Down')

        return plot


    def __init__(self):
        super(Actor, self).__init__(name='material_simulations/espresso/results')

        return


    def _configure(self):
        super(Actor, self)._configure()
        self.id             = self.inventory.id

    def _init(self):
        super(Actor, self)._init()
        return

def actor():
    return Actor()


__date__ = "$Dec 13, 2009 1:01:27 AM$"


