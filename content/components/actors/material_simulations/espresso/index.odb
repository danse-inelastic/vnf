#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

from vinil.utils.utils import newid, stamp2date
from vinil.utils.espressotable import tableSimulations
from vinil.utils.table import tableController

from luban.content import select
from luban.content.Paragraph import Paragraph
from luban.content.Document import Document
from luban.content.HtmlDocument import HtmlDocument
from luban.content import load
from luban.content.Link import Link
from luban.content.Splitter import Splitter
from luban.content.FormSelectorField import FormSelectorField
from luban.content.FormTextField import FormTextField
from luban.content.Form import Form

from vinil.components.Actor import Actor as base
class Actor(base):

    class Inventory(base.Inventory):
        import pyre.inventory
        id      = pyre.inventory.str('id', default='')      # Simulation id


    # Actor.link() calls content() and self.pathlist
    # Default call
    def content(self, director):
        document = Document(title='Quantum Espresso')

        #jobs    = director.clerk.getTable('job')
        #
        #jobs    = director.clerk.getJobs()
        #token = director.idd.token()


        text = """Quantum ESPRESSO  is an integrated suite of
        computer codes for electronic-structure calculations and materials
        modeling at the nanoscale. It is based on density-functional theory,
        plane waves, and pseudopotentials (both norm-conserving and ultrasoft). 
        You can create a new simulation following the button
        "Create New Simulation" or use existing simulation from Favorites as a template.
        To start using Quantum Espresso it is usefull to try out running 
        simulations from Examples"""
        
        p = Paragraph(text=text)
        document.add(p)

        text = '<img src="images/icons/newsimulation.png" id="create-new-simulation"/>'
        # espresso/step-one -> espresso/sim-create
        # TODO: Add link to 'espresso/step-one'
        d = HtmlDocument(text=text, onclick=load(actor='espresso/sim-create', routine='link'))
        document.add(d)

        headers = ("Name", "Type", "Description", "Formula", "Created", " ", " ", " ")

        data    = self.getTableData(director, where="isFavorite")
        self.addTable(document, "Favorites", headers, data)

        data    = self.getTableData(director, where="isExample")
        self.addTable(document, "Examples", headers, data)

        return document

    # TODO: Refactor
    def getTableData(self, director, where=None):
        """Gets table data from Simulations database table to display in table"""
        sim     = director.clerk.getSimulations(where=where)
        ids     = []
        names   = []
        columns = []

        for i in range(len(sim)):
            ids.append(sim[i].id)
            names.append(sim[i].sname)
            row     = [sim[i].type, sim[i].description, sim[i].formula, stamp2date(sim[i].timeCreated) ]
            columns.append(row)

        return (names, columns, ids)

    # TODO: Refactor
    def addTable(self, document, title, headers, data):
        """
        Adds table to the document
        data = (names, columns, ids)
        """
        if len(data[2]) != 0:
            document.add(Paragraph(text=title, Class="header-h2"))
            document.add(tableController(headers, 'espresso/index'))
            document.add(tableSimulations(headers, data[0], data[1], data[2]))


    def pathlist(self, director):
        self.pathlist = [("Home","greet","link"),
                         ("Simulations", "simulations", "link"),
                         ("Quantum Espresso", None, None)]
        return self.pathlist


    def __init__(self, *args, **kwds):
        super(Actor, self).__init__(*args, **kwds)

        return


    def _configure(self):
        super(Actor, self)._configure()
        self.id = self.inventory.id
        return


    def _init(self):
        super(Actor, self)._init()
        return

def actor():
    return Actor('espresso/index')



__date__ = "$Sep 26, 2009 1:59:59 PM$"



# Example of how to redirect to page
#    def linkSim(self, director, document=None):
#        actions = []
#        actions.append(select(id='maindoc').replaceContent(self.contentSim(director)))
#        actions.append(select(id='path-content').replaceContent(self.pathSim(director)))
#
#        return actions



