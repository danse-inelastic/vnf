#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

from vnfb.utils.qeutils import stamp2date
from vnfb.utils.qechain import QEChain
from vnfb.utils.qeparams import QEParams
from vnfb.utils.qeserver import QEServer

from luban.content.Splitter import Splitter

from luban.content import select
from luban.content.Paragraph import Paragraph
from luban.content.Document import Document
from luban.content.HtmlDocument import HtmlDocument
from luban.content import load
from luban.content.Link import Link

import luban.content as lc
from luban.components.AuthorizedActor import AuthorizedActor as base
class Actor(base):

    class Inventory(base.Inventory):
        import pyre.inventory
        id      = pyre.inventory.str('id', default='')      # Simulation Id


    def default(self, director):
        return select(id='main-display-area').replaceContent(self.content(director))


    def content(self, director):
        sim     = director.clerk.getQESimulations(id=self.id)
        
        def viewIndicator(director):
            path = []
            path.append(('Simulations ', load(actor='materialsimulation')))
             # Stub, should filter by simulation type
            path.append(('Quantum Espresso ', load(actor='materialsimulation')))
            path.append(self.id)

            return director.retrieveVisual('view-indicator', path=path)

        doc         = lc.document(title   = 'Simulation Name: %s' % sim.sname)
        splitter    = doc.splitter(orientation="vertical")
        sA          = splitter.section()
        sA.add(viewIndicator(director))
        
        sC          = splitter.section()
        self.showLinks(sC)

        sB          = splitter.section()
        self.showSim(sB, sim)
        self.showInputFiles(director, sB, sim.type)
        self.showSettings(director, sB)
        self.showServer(director, sB)
        self.showJobs(director, sB)
        self.showRefs(sB)
        
        return doc

    def showLinks(self, document):
        document.add(lc.button(label="Edit",
                              onclick = load(actor='material_simulations/espresso/sim-edit',
                              id=self.id)))
        document.add(lc.button(label="Delete",
                              onclick = load(actor='material_simulations/espresso/sim-delete',
                              id=self.id)))
        document.add(lc.button(label="Clone",
                              onclick = load(actor='material_simulations/espresso/sim-clone',
                              id=self.id)))
        document.add(lc.document(Class="clear-both"))


    def showSim(self, document, sim):
        """Shows simulation data"""
        if sim: # ?
            document.add(Paragraph(text="Description: %s" % sim.short_description))
            document.add(Paragraph(text="Type: %s" % sim.type))
            document.add(Paragraph(text="Package: %s" % sim.package))
            document.add(Paragraph(text="Label: %s" % sim.label))
            document.add(Paragraph(text="Created: %s" % stamp2date(sim.date)))


    def showInputFiles(self, director, document, type):
        """Shows chain of configuration files"""
        document.add(Document(Class="clear-both"))
        document.add(Paragraph(text="Input Files: "))
        splitter        = QEChain(director, type)

        document.add(splitter.chain(self.id))


    def showSettings(self, director, document):
        document.add(Document(Class="clear-both"))   # Empty document
        setdoc  = Document(Class="display-inline")
        setdoc.add(Paragraph(text="Simulation Parameters: "))

        params  = QEParams(director)
        setdoc.add(params.getLink(self.id))
        document.add(setdoc) # [STUB]


    def showServer(self, director, document):
        document.add(Document(Class="clear-both"))   # Empty document
        servdoc = Document(Class="display-inline")
        servdoc.add(Paragraph(text="Default Server: "))

        server  = QEServer(director)
        servdoc.add(server.getServer(self.id))
        document.add(servdoc)


    def showJobs(self, director, document):
        """Adds list of job ids to the document"""
        document.add(Document(Class="clear-both"))   # Empty document
        jobsdoc = Document(Class="display-inline")
        jobsdoc.add(Paragraph(text="Jobs: "))
        joblist  = self.jobs(director)

        if len(joblist) != 0:
            for job in joblist:
                jobsdoc.add(Link(label=job.id, Class="action-link",
                                 onclick=load(actor="jobs/view",
                                 routine="link", id=job.id))
                            )
        else:
            jobsdoc.add(Paragraph(text="None", Class="action-link"))

        document.add(jobsdoc)


    # TODO: Should have "Submit to Queue" only
    def showRefs(self, document):
        """Adds References"""
        document.add(Document(Class="clear-both"))   # Empty document
        refsdoc = Document(Class="display-block")
        refsdoc.add(Link(label="Submit to Queue", onclick=load(actor="espresso/sim-view", routine="checkSubmit", id=self.id)))
        document.add(refsdoc)


    def checkSubmit(self):
        # Check config inputs
        # Check settings
        # If check failed, go to error page (with link "Go Back")
        return load(actor="jobs/submitted", routine="submit", id=self.id)


    def jobs(self, director):
        joblist = []
        jobs = director.clerk.getQEJobs(where="simulationid='%s'" % self.id)
        for job in jobs:
            if job:
                joblist.append(job)

        return joblist



    def __init__(self):
        super(Actor, self).__init__(name='material_simulations/espresso/sim-view')

        return


    def _configure(self):
        super(Actor, self)._configure()
        self.id = self.inventory.id
        return


    def _init(self):
        super(Actor, self)._init()
        return

def actor():
    return Actor()


__date__ = "$Nov 2, 2009 3:15:35 PM$"

