#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

import os

from vnfb.utils.qeutils import stamp2date, makedirs
from vnfb.utils.qeutils import addRow
from vnfb.utils.qechain import QEChain
from vnfb.utils.qeparams import QEParams
from vnfb.utils.qeserver import QEServer
from vnfb.utils.qeconst import SIMCHAINS

#from luban.content.Splitter import Splitter

from luban.content import select
from luban.content.Paragraph import Paragraph
from luban.content.Document import Document
from luban.content import load
from luban.content.Link import Link

import luban.content as lc
from luban.components.AuthorizedActor import AuthorizedActor as base
class Actor(base):

    class Inventory(base.Inventory):
        import pyre.inventory
        id      = pyre.inventory.str('id', default='')      # Simulation Id


    def default(self, director):
        return select(id='main-display-area').replaceContent(self.content(director))


    def content(self, director):
        sim         = director.clerk.getQESimulations(id=self.id)
        self.type   = sim.type
        
        def viewIndicator(director):
            path = []
            path.append(('Simulations ', load(actor='materialsimulation')))
             # Stub, should filter by simulation type
            path.append(('Quantum Espresso ', load(actor='materialsimulation')))
            path.append(self.id)

            return director.retrieveVisual('view-indicator', path=path)

        doc         = lc.document(title   = 'Simulation Name: %s' % sim.sname)
        splitter    = doc.splitter(orientation="vertical")
        sA          = splitter.section()
        sA.add(viewIndicator(director))
        
        sC          = splitter.section()
        self.showActions(sC)
        splitter.section(id="input-error-area")


        sB          = splitter.section()

        table       = lc.grid()
        sB.add(table)
        self.showSim(table, sim)
        self.showSettings(director, table)
#        self.showServer(director, table)
#        self.showJobs(director, table)
#        self.showResults(director, table)
#        self.showInputFiles(director, sB, table, sim.type)
#        self.showSubmit(sB)
        
        return doc

    def showActions(self, document):
        document.add(lc.button(label="Edit",
                               id="action-edit",
                              onclick = load(actor='material_simulations/espresso/sim-edit',
                              id=self.id)))
        document.add(lc.button(label="Delete",
                              id="action-delete",
                              onclick = load(actor='material_simulations/espresso/sim-delete',
                              id=self.id)))
        document.add(lc.button(label="Clone",
                              id="action-clone",
                              onclick = load(actor='material_simulations/espresso/sim-clone',
                              id=self.id)))
        document.add(lc.document(Class="clear-both"))


    def showSim(self, table, sim):
        """Shows simulation data"""
        if sim: # ?
            addRow(table, 'Description: ', sim.short_description)
            addRow(table, 'Type: ', sim.type)
            addRow(table, 'Package: ', sim.package)
            addRow(table, 'Label: ', sim.label)
            addRow(table, 'Created: ', stamp2date(sim.date))


    def showSettings(self, director, table):
        params  = QEParams(director)
        link    = params.getLink(self.id)

        addRow(table, "Simulation Settings: ", link)


    def showInputFiles(self, director, document, table, type):
        """Shows chain of configuration files"""
        from vnfb.utils.qeutils import addRow
        addRow(table, 'Input Files: ', '')

        document.add(Paragraph(text=""))
        splitter = QEChain(director, type)

        document.add(splitter.chain(self.id))


    def showServer(self, director, table):
        server  = QEServer(director)
        link    = server.getServer(self.id)

        addRow(table, "Default Server: ", link)


    def showJobs(self, director, table):
        """Adds list of job ids to the document"""

        jobsdoc = Document(Class="display-inline")
        joblist  = self.jobs(director)

        if len(joblist) != 0:
            for job in joblist:
                jobsdoc.add(Link(label=job.id, Class="action-link",
                                 onclick=load(actor="jobs/view",
                                 routine="link", id=job.id))
                            )
        else:
            jobsdoc.add(Paragraph(text="None", Class="action-link"))

        addRow(table, "Jobs: ", jobsdoc)


    # TODO: Should have "Submit to Queue" only
    def showSubmit(self, document):
        """Adds References"""
        document.add(Document(Class="clear-both"))   # Empty document
        refsdoc = Document(Class="display-block")
        refsdoc.add(lc.button(label="Submit to Queue", onclick=load(actor="material_simulations/espresso/sim-view",
                                                               routine="checkSubmit",
                                                               id=self.id)))
        document.add(refsdoc)
        document.add(lc.document(Class="clear-both"))


    def checkSubmit(self, director):
        """Checks if the simulation can be submitted to jobs queue"""
        errors  = {}
        self._checkInputs(director, errors)
        
        # Check settings # Not sure if I need it now
        # If check failed, go to error page (with link "Go Back")
        #return load(actor="jobs/submitted", routine="submit", id=self.id)
        if errors:
            return self.formError(errors)


        return load(actor="material_simulations/espresso/sim-view",
                   routine="submit",
                   id=self.id)


    # Refactor later on
    def submit(self, director):
        """
        The process of submission of simulation includes the following steps:
        1. Store configuration inputs to local disk storage
        2. Copy files to the computational cluster
        3. 
        """

        inputs  = director.clerk.getQEConfigurations(where = "simulationid='%s'" % self.id)

        self._storeFiles(director, inputs)
        self._moveFiles(director, inputs)
        self._scheduleJob(director, inputs)

        return load(actor="materialsimulation")

#        return load(actor="material_simulations/espresso/sim-view",
#                   id=self.id)

    def _checkInputs(self, director, errors):
        """Checks config inputs"""
        sim     = director.clerk.getQESimulations(id = self.id)
        inputs  = director.clerk.getQEConfigurations(where = "simulationid='%s'" % self.id)
        chain   = SIMCHAINS[sim.type]
        if not self._isComplete(chain, inputs):
            errors['input']  = "Error: One of the configuration inputs are missing"
            return


    def _isComplete(self, chain, inputs):
        test    = [0 for i in range(len(chain))]
        types   = self._getInputTypes(inputs)

        for i in range(len(types)):    # Check if inputs has all the values from chain list
            for j in range(len(chain)):
                if types[i] == chain[j]:
                    test[j] = 1

        if test.count(0) == 0:  # No zeros left, then set is complete
            return True

        return False


    def _getInputTypes(self, inputs):
        """Converts configuration entries to """
        types   = []
        for i in inputs:
            if i.text != '':
                types.append(i.type)

        return types


    def _storeFiles(self, director, inputs):
        """Temp solution. Stores files from configuration input strings """
        
        dds = director.dds
        for input in inputs:
            filename    = dds.abspath(input, filename = input.type)
            self.files.append(input.type) # Relative path, e.g. ni.scf.in

            # for f in files: dds.remember(job, f) #?
            self._writeContent(dds, input, filename, input.text)

        #filename    = dds.abspath(input, filename = "run.sh")
        #content     =
        #self._writeContent(dds, input, filename, content)
        # FIXME
        #for f in self.files:
        # Should be local filename
        dds.remember(inputs[0], 'PW')


    def _writeContent(self, dds, record, filename, content):
        """Writes content of the configuration input to file"""
        path    = dds.abspath(record)
        makedirs(path)
        open(filename, 'w').write(content)


    def _moveFiles(self, director, inputs):
        dds     = director.dds
        server  = director.clerk.getServers(id='server001') # Hardcoded

        # See also: submitjob.odb

        #input   = inputs[0]
        #files   = []
        #files.append(self.files[0])
        dds.make_available(inputs[0], server=server, files=['PW',]) #self.files[0]

        # Why job? - Can be any table instead. How to get server?
#        server = clerk.dereference(job.server)
#        director.declareProgress(0.5, 'Preparing: transfering job to the server %s ...' % server.short_description)
#        dds.make_available(job, server=server, files=files)


    def _scheduleJob(self, director, inputs):
        # FIXME
        dds     = director.dds
        from vnfb.utils.qescheduler import schedule
        schedule(inputs[0], director)


    def showResults(self, director, table):
        doc     = Document(id="results-link")
#        link    = self._retrieveResults(director)
        link    = Link(label="Get Results", Class="action-link",
                       onclick=load(actor       = "material_simulations/espresso/sim-view",
                                    routine     = "retrieveStatus",
                                    id          = self.id)
                      )

        doc.add(link)

        addRow(table, "Results: ", doc)


    def retrieveStatus(self, director):
#        inputs  = director.clerk.getQEConfigurations(where = "simulationid='%s'" % self.id)
#        input   = inputs[0]
#
#        return self._packingInProgress(director, input)
        return self._retrieveResults(director)


    def _retrieveResults(self, director):
        inputs  = director.clerk.getQEConfigurations(where = "simulationid='%s'" % self.id)
        input   = inputs[0]
        
        from vnf.applications.PackJobDir import PackJobDir
        PTRFILEEXT = PackJobDir.PTRFILEEXT
        ptrfilepath = '.'.join( [director.dds.abspath(input), PTRFILEEXT] )
        
        # if pointer file does not exists, need to start packing
        if not os.path.exists(ptrfilepath):
            return self._startPacking(director, input)

        # if packing is in process, say that
        s = open(ptrfilepath).read()
        if s == PackJobDir.PACKINGINPROCESS:
            return self._packingInProgress(director, input)


        server      = server  = director.clerk.getServers(id='server001')
        jobmtime    = director.dds.getmtime(input, server = server)
        ptrmtime    = os.path.getmtime(ptrfilepath)
        if jobmtime > ptrmtime + 60*3: # 60*3 -- give 3 minute of delay
            # if job directory is newer than the bar ball, pack again
            return self._startPacking(director, input)

        link    = Link(label="Downloaded", Class="action-link",
                       onclick=load(actor      = "material_simulations/espresso/sim-view",
                                     id         = self.id)
                      )

        return select(id='results-link').replaceContent(link)


    def _startPacking(self, director, input):
        from vnf.components.Job import pack
        pack(input, director, debug=False)

        return self._packingInProgress(director, input)


    def _packingInProgress(self, director, input):
        link    = Link(label="Packing", Class="action-link",
                       onclick=load(actor      = "material_simulations/espresso/sim-view",
                                     id         = self.id)
                      )

        return select(id='results-link').replaceContent(link)



    def formError(self, errors):
        return [
                select(id='%s-error-area' % key).replaceContent(value)
                    for key, value in errors.iteritems()
                ]


    def jobs(self, director):
        joblist = []
        jobs = director.clerk.getQEJobs(where="simulationid='%s'" % self.id)
        for job in jobs:
            if job:
                joblist.append(job)

        return joblist



    def __init__(self):
        super(Actor, self).__init__(name='material_simulations/espresso/sim-view')
        self.files  = [] # Temp

        return


    def _configure(self):
        super(Actor, self)._configure()
        self.id = self.inventory.id
        return


    def _init(self):
        super(Actor, self)._init()
        return

def actor():
    return Actor()


__date__ = "$Nov 2, 2009 3:15:35 PM$"

