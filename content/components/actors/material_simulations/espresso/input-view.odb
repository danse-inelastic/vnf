#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

from vnfb.utils.qeconst import STEPS, TYPES
from vnfb.utils.qeutils import stamp2date

from luban.content import select
from luban.content.Paragraph import Paragraph
from luban.content.Document import Document
from luban.content.HtmlDocument import HtmlDocument
from luban.content import load
from luban.content.Link import Link
from luban.content.Splitter import Splitter
from luban.content.FormSelectorField import FormSelectorField
from luban.content.FormRadioBox import FormRadioBox
from luban.content.Form import Form
from luban.content.Tabs import Tabs
from luban.content.Button import Button

import luban.content as lc
from luban.components.AuthorizedActor import AuthorizedActor as base

# Requires simulation id, config id and config type: (id, configid, type)
class Actor(base):

    class Inventory(base.Inventory):
        import pyre.inventory
        id          = pyre.inventory.str('id', default='')          # Simulation Id
        configid    = pyre.inventory.str('configid', default='')    # Configuration Id
        type        = pyre.inventory.str('type', default='')        # Type of the configuration file
        fname       = pyre.inventory.str('fname', default='')
        description = pyre.inventory.str('description', default='')
        text        = pyre.inventory.str('text', default='')

    def default(self, director):
        return select(id='main-display-area').replaceContent(self.content(director))


    def content(self, director):
        self._sim       = director.clerk.getQESimulations(id=self.id)
        self._input     = director.clerk.getQEConfigurations(id=self.configid)

        def viewIndicator(director):
            path = []
            path.append(('Simulations ', load(actor='materialsimulation')))
            path.append(('Quantum Espresso ', load(actor='materialsimulation')))
            path.append(('%s ' % self.id, load(actor    = 'material_simulations/espresso/sim-view',
                                               id       = self.id)))

            path.append('%s Configuration' % self.type)

            return director.retrieveVisual('view-indicator', path=path)

        doc         = lc.document(title="%s Configuration: %s" % (self.type, self.filename(self._input)))
        splitter    = doc.splitter(orientation="vertical")
        sA          = splitter.section()
        sA.add(viewIndicator(director))
        sB          = splitter.section()

        self.showLinks(sB)    # Finish
        self.showConfig(sB, self._input)

        return doc


    def showLinks(self, document):  #, inputs
        document.add(Link(label="Edit", Class="action-link",
                          onclick = load(actor='material_simulations/espresso/input-edit',
                                         id=self.id,
                                         configid=self.configid,
                                         type=self.type)))
        document.add(Link(label="Delete", Class="action-link",
                          onclick = load(actor='material_simulations/espresso/input-delete',
                                         id=self.id,
                                         configid=self.configid,
                                         type=self.type)))


    def showConfig(self, document, input):
        document.add(Paragraph(text="File Name: %s" % input.filename))
        document.add(Paragraph(text="Type: %s" % input.type))
        document.add(Paragraph(text="Description: %s" % input.description))
        document.add(Paragraph(text="Parser: %s" % input.parser))
        document.add(Paragraph(text="Created: %s" % stamp2date(input.timeCreated)))
        document.add(Paragraph(text="Last Modified: %s" % stamp2date(input.timeModified)))
        document.add(Paragraph(text="Text: %s" % input.text))


    def filename(self, input):
        if input:
            return input.filename

        return ""


    def __init__(self):
        super(Actor, self).__init__(name='material_simulations/espresso/input-add')

        return


    def _configure(self):
        super(Actor, self)._configure()
        self.id             = self.inventory.id
        self.configid       = self.inventory.configid
        self.type           = self.inventory.type
        self.fname          = self.inventory.fname
        self.description    = self.inventory.description
        self.text           = self.inventory.text

    def _init(self):
        super(Actor, self)._init()
        return

def actor():
    return Actor()

__date__ = "$Nov 9, 2009 5:10:40 PM$"



