#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from vnfb.utils.qeconst import SIMULATIONS
from vnfb.utils.orderedDict import OrderedDict
from vnfb.utils.qegrid import QEGrid
from vnf.dom.QESimulation import QESimulation

from luban.content import select
from luban.content.Paragraph import Paragraph
from luban.content.Document import Document
from luban.content.HtmlDocument import HtmlDocument
from luban.content import load
from luban.content.Link import Link
from luban.content.Splitter import Splitter
from luban.content.FormSelectorField import FormSelectorField
from luban.content.FormRadioBox import FormRadioBox
from luban.content.FormTextField import FormTextField
from luban.content.Form import Form


import luban.content as lc
from luban.components.AuthorizedActor import AuthorizedActor as base

class Actor(base):
    """ Create Quantum Espresso simulation"""

    class Inventory(base.Inventory):
        import pyre.inventory
        sname       = pyre.inventory.str('sname', default='')
        simtype     = pyre.inventory.str('simtype', default='')
        description = pyre.inventory.str('description', default='')
        label       = pyre.inventory.str('label', default='')
        serverid    = pyre.inventory.str('serverid', default='')
        matter      = pyre.inventory.str('matter', default='')

    def default(self, director):
        return select(id='main-display-area').replaceContent(self.content(director))


    def content(self, director):
        def viewIndicator(director):
            path = []
            path.append(('Simulations ', load(actor='materialsimulation')))
            path.append(('Create New Simulation ', select(id='main-display-area').replaceContent(
                                                          load(actor='materialsimulation',
                                                               routine='newSimulation')
                                                          ))
                        )
            path.append('Quantum Espresso')
            
            return director.retrieveVisual('view-indicator', path=path)

        # Set servers first
        self._setServers(director)
        serversList = self._serversList()

        doc         = lc.document(title   = "Create New Simulation")
        splitter    = doc.splitter(orientation="vertical")
        sA          = splitter.section()
        sA.add(viewIndicator(director))
        sB          = splitter.section()

        form        = Form(id='create-simulation-form') # , title='Create New Quantum Espresso Simulation'
        table       = QEGrid(lc.grid())
        form.add(table.grid())

#        table       = lc.grid()
#        form.add(table)

        sname       = FormTextField(name = "sname", value = self.sname)
        simtype     = FormSelectorField(name="simtype",
                                        entries=enumerate(SIMULATIONS))
        description = FormTextField(name="description", value=self.description)   # Make as textarea
        label       = FormTextField(name="label", value=self.label)
        serverid    = FormSelectorField(name="serverid",
                                        entries=enumerate(serversList))
        matter      = FormSelectorField(name="matter",
                                        entries=enumerate(["STUB",]))

        table.addRow(("Simulation Name", sname))
        table.addRow(("Simulation Type", simtype))
        table.addRow(("Description", description))
        table.addRow(("Label", label))
        table.addRow(("Server", serverid))
        table.addRow(("Atomic Structure", matter))

        table.setColumnStyle(0, "qe-form-label")

        submit      = form.submitbutton(label="Create New Simulation")
        form.onsubmit   = select(element=form).submit(actor = 'material_simulations/espresso/sim-create',
                                                      routine = 'createRecord')
        cancel      = lc.link(label="Cancel", onclick = load(actor = 'materialsimulation'))
        form.add(cancel)
        
        sB.add(form)

        return doc


    def createRecord(self, director):
        """Create simulation record"""
        self._verify()
        simtype = SIMULATIONS[int(self.simtype)]
        self._setServers(director)

        params  = {"sname":         self.sname,
                   "type":          simtype,
                   "creator":       director.sentry.username,
                   "short_description":   self.description,
                   "label":         self.label,
                   "serverid":      self._serverId(self.serverid)
                   #"matter":        self.matter    # Doesn't work at this moment
                   }
        sim     = QESimulation()
        sim.setDirector(director)
        sim.createRecord(params)

        return load(actor='material_simulations/espresso/sim-view', id = sim.id)  # Redirection to the page


    def _setServers(self, director):
        "Set servers from the database"
        servers     = director.clerk.getServers()
        self._servers = OrderedDict()
        for s in servers:
            # I suppose that short_description serves as a name
            # {id: short_description} pair
            self._servers[s.id]    = s.address

        return self._servers


    def _serversList(self):
        "Returns list of server names"
        return self._servers.values()


    def _serverId(self, i):
        "Return server's id"
        keys    = self._servers.keys()
        #if len(keys) < i + 1 and i >= 0:
        #    return None
        # Check if i-th element is present
        return keys[int(i)]

    # stub
    def _verify(self):
        """Verify data first """
        pass

    def _simtypeValue(self, simtype):
        for i in range(len(SIMULATIONS)):
            if SIMULATIONS[i] == simtype:
                return i

        return 0


    def __init__(self):
        super(Actor, self).__init__(name='material_simulations/espresso/sim-create')

        return


    def _configure(self):
        super(Actor, self)._configure()
        self.sname       = self.inventory.sname
        self.simtype     = self.inventory.simtype
        self.description = self.inventory.description
        self.label       = self.inventory.label
        self.serverid    = self.inventory.serverid
        self.matter      = self.inventory.matter

        return


    def _init(self):
        super(Actor, self)._init()
        return

def actor():
    return Actor()

__date__ = "$Nov 10, 2009 11:02:01 AM$"


