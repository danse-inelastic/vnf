#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from vnfb.utils.qeconst import SIMCHAINS
from vnfb.utils.qegrid import QEGrid
from vnfb.utils.serverlist import ServerList
from vnf.dom.QESimulation import QESimulation

from luban.content import select, load, alert

from luban.content.FormSelectorField import FormSelectorField
from luban.content.FormTextField import FormTextField
from luban.content.FormSubmitButton import FormSubmitButton
from luban.content.FormRadioBox import FormRadioBox
from luban.content.Form import Form

#from vnfb.utils.orderedDict import OrderedDict

import luban.content as lc
from luban.components.AuthorizedActor import AuthorizedActor as base

class Actor(base):
    """ Create Quantum Espresso simulation"""

    class Inventory(base.Inventory):
        import pyre.inventory
        sname       = pyre.inventory.str('sname', default='')
        simtype     = pyre.inventory.str('simtype', default='')
        description = pyre.inventory.str('description', default='')
        label       = pyre.inventory.str('label', default='')
        server      = pyre.inventory.str('server', default='')
        structureid = pyre.inventory.str('structureid', default='')


    def default(self, director):
        return select(id='main-display-area').replaceContent(self.content(director))


    def content(self, director):
        def viewIndicator(director):
            path = []
            path.append(('Simulations ', load(actor='materialsimulation')))
            path.append(('Create New Simulation ', select(id='main-display-area').replaceContent(
                                                          load(actor='materialsimulation',
                                                               routine='newSimulation')
                                                          ))
                        )
            path.append('Quantum Espresso')
            
            return director.retrieveVisual('view-indicator', path=path)

        doc         = lc.document(title   = "Create New Simulation")
        splitter    = doc.splitter(orientation="vertical")
        sA          = splitter.section()
        sA.add(viewIndicator(director))
        sB          = splitter.section()
        sB.add(self._setForm(director))

        return doc


    def showOptions(self, director):
        " Displays 'Select Atomic Structure' page"
        doc = lc.document(title='Select Atomic Structure')
        doc.Class = 'mastertable-as-selector-panel'

        # the container of the atomicstructure selector
        container = doc.document(id     = 'atomicstructure-selector-container',
                                 Class  = 'master-table-wrapper')
        container.oncreate = select(element=container).append(
                                            load(actor='selectoneatomicstructure',
                                                 routine='createListView')
                                    )

        # the button
        b = lc.button(label='Select')
        doc.add(b)
        b.onclick = load(actor          = self.name,
                         structureid    = select(id='atomicstructure-table').table(
                                                        'getIdentifiersForSelectedRow',
                                                        colname = 'selectone')
            )
        return select(id='main-display-area').replaceContent(doc)


    def createRecord(self, director):
        """Create simulation record"""
        self._verify()
        keys    = SIMCHAINS.keys()
        simtype = keys[int(self.simtype)]
        servers = ServerList(director)

        params  = {"sname":         self._sname(),
                   "type":          simtype,
                   "creator":       director.sentry.username,
                   "short_description":   self._description(),
                   "label":         self.label,
                   "serverid":      servers.id(self.server),
                   "structureid":   self.structureid
                   }
        sim     = QESimulation()
        sim.setDirector(director)
        sim.createRecord(params)
        sim.establishGlobalPointer(director.clerk.db)

        return load(actor='material_simulations/espresso/sim-view', id = sim.id)  # Redirection to the page


    def _setForm(self, director):
        "Sets create new simulation form"

        # Set servers first
        servers     = ServerList(director)
        serversList = servers.list()

        form        = Form(id='create-simulation-form') 
        table       = QEGrid(lc.grid(Class="qe-form"))
        form.add(table.grid())

        sname       = FormTextField(name = "sname", value = self.sname)
        simtype     = FormSelectorField(name="simtype",
                                        entries=enumerate(SIMCHAINS.keys()))
        description = FormTextField(name="description", value=self.description)   # Make as textarea
        label       = FormTextField(name="label", value=self.label)
        server      = FormSelectorField(name="server",
                                        entries=enumerate(serversList)) # XXX Move to QESettings
                                        
        submit      = FormSubmitButton(label="Create New Simulation")
        cancel      = lc.button(label="Cancel", onclick = load(actor = 'materialsimulation'))

        st          = QEGrid(lc.grid()) # Submit Table
        st.addRow((submit, cancel), ("qe-action-accept", "qe-action-cancel"))

        table.addRow(("Atomic Structure: *", self._structure(director)))
        table.addRow(("Type: *", simtype))
        table.addRow(("Server: *", server))
        table.addRow(("Name:", sname))
        table.addRow(("Description:", description))
        table.addRow(("Label:", label))
        table.addRow(("", st.grid()))

        table.setColumnStyle(0, "qe-form-label")
        table.setColumnStyle(1, "qe-form-field")

        form.onsubmit   = select(element=form).submit(actor         = 'material_simulations/espresso/sim-create',
                                                      routine       = 'createRecord',
                                                      structureid   = self.structureid)
        
        return form


    def _structure(self, director):
        link        = lc.link(label="Select Atomic Structure",
                              Class="qe-action-structure")
        link.onclick = load(actor=self.name, routine='showOptions')
        section     = link

        if self.structureid != '':
            domaccess   = director.retrieveDOMAccessor('atomicstructure')
            structure   = domaccess.getAtomicStructureRecord(id=self.structureid)

            table   = QEGrid(lc.grid(Class="qe-structure-label"))
            change  = lc.link( label="Change",
                                onclick  = load(actor = self.name, routine = 'showOptions'))
            matter   = "%s (%s)" % (structure.chemical_formula, self.structureid)
            
            table.addRow((matter, change))
            section   = table.grid()

        return section


    def _description(self):
        # Description is not set
        if self.description == '':
            return "QE simulation"

        return self.description

    def _sname(self):
        # Simulation name is not set
        if self.sname == '':
            return "Default"

        return self.sname

    # stub
    def _verify(self):
        """Verify data first """
        pass

    def _simtypeValue(self, simtype):
        keys    = SIMCHAINS.keys()
        for i in range(len(keys)):
            if keys[i] == simtype:
                return i

        return 0





    def __init__(self):
        super(Actor, self).__init__(name='material_simulations/espresso/sim-create')

        return


    def _configure(self):
        super(Actor, self)._configure()
        self.sname       = self.inventory.sname
        self.simtype     = self.inventory.simtype
        self.description = self.inventory.description
        self.label       = self.inventory.label
        self.server      = self.inventory.server
        self.structureid = self.inventory.structureid

        return


    def _init(self):
        super(Actor, self)._init()
        return

def actor():
    return Actor()

__date__ = "$Nov 10, 2009 11:02:01 AM$"


#    def processSelection(self, director):
#        return alert('selected structure %s' % self.inventory.selected)

