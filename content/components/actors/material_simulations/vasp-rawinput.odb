#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from luban.content import load, select

from luban.content.Form import Form
from luban.content.Document import Document
from luban.content.Link import Link
from luban.content.ProgressBar import ProgressBar


from luban.components.Actor import Actor as base


class Actor(base):


    class Inventory(base.Inventory):

        import pyre.inventory

        id = pyre.inventory.str('id')

        INCAR = pyre.inventory.str('INCAR')
        KPOINTS = pyre.inventory.str('KPOINTS')
        POSCAR = pyre.inventory.str('POSCAR')
        POTCAR = pyre.inventory.str('POTCAR')

        itask_id = pyre.inventory.str('itask_id')


    def start(self, director):
        id = self.inventory.id

        computation = self._getSimulation(director)
        if self._vaspRawInputFilesExists(computation, director):
            return self.presentForm(director)

        return self.startBuildingRawInputs(director)


    def startBuildingRawInputs(self, director):
        # the itask worker
        iworker = 'material_simulations/build-vasp-input-files'

        #
        computation = self._getSimulation(director)
        
        # first check if there is itask running
        task = computation.findPendingTask(director.clerk.db, iworker=iworker)
        self._debug.log('task: %s' % task)

        # if no previous task found, create a new task
        if not task:

            from vnf.dom.ITask import createITask, ITask
            task = director.clerk.insertNewOwnedRecord(ITask)
            task = createITask(
                task.id,
                beneficiary = computation,
                worker = iworker,
                type = iworker,
                )
            self._debug.log('task: %s' % task)
            director.clerk.updateRecordWithID(task)

        # start the task
        from vnfb.utils.itask import start
        start(task)
        
        # build the progress bar and return
        pbar = ProgressBar(
            id = 'itask-%s-pbar' % task.id,
            status = 'Generating vasp inputs',
            percentage = 0,
            skip = 1000,
            )
        pbar.onchecking = load(
            actor='itask',
            routine='checkProgress',
            id = task.id,
            )
        pbar.onfinished = load(
            actor = 'material_simulations/vasp-rawinput',
            routine='presentForm',
            id = self.inventory.id)

        title = 'Building raw VASP inputs for Simulation\ %s' % self.inventory.id
        document = Document(title=title)
        document.add(pbar)
        
        return select(id='main-display-area').replaceContent(document)


    def presentForm(self, director):
        computation = self._getSimulation(director)
        doc = Document(title='Simulation\ %s: Advanced VASP configuration' % computation.id)

        link = Link(label='back to Previous Step')
        link.onclick = load(
            actor='material_simulations/abinitiowizard', routine='restart',
            id=computation.id)
        doc.add(link)
        
        form = self.createForm(director)
        doc.add(form)
        
        return select(id='main-display-area').replaceContent(doc)
    

    def createForm(self, director):
        computation = self._getSimulation(director)
        rawInputs = self._readVaspRawInputFIles(computation, director)

        # build the form 
        form = Form(id='vasp-rawinput-form')
        # specify action
        action = select(element=form).submit(
            actor = 'material_simulations/vasp-rawinput', 
            routine = 'verifyForm',
            id=self.inventory.id)
        form.onsubmit = action

        props = VASP_RAW_INPUT_FILES
        for prop in props:
            form.textarea(
                id = '',
                name = prop,
                label = prop,
                value = rawInputs[prop],
                ) #rows = 10)
            continue
        
        next = form.submitbutton(label="next")

        action = load(
            actor='job', routine='create',
            computation_type=computation.name, computation_id=computation.id,
            )
        link = Link(label="Skip this step", onclick=action, Class='skip-link')
        form.add(link)
        return form


    def verifyForm(self, director):
        # ...
        computation = self._getSimulation(director)
        return director.redirect(
            actor='job', routine='create',
            computation_type=computation.name, computation_id=computation.id,
            )


    def _readVaspRawInputFIles(self, computation, director):
        d = {}
        for f in VASP_RAW_INPUT_FILES:
            path = director.dds.abspath(computation, f)
            d[f] = open(path).read()
        return d


    def _vaspRawInputFilesExists(self, computation, director):
        import os
        for f in VASP_RAW_INPUT_FILES:
            path = director.dds.abspath(computation, f)
            if not os.path.exists(path): return False
            continue
        return True


    def _getMatter(self, director):
        return director.clerk.getRecordByID(
            self.inventory.matter_type, self.inventory.matter_id)

    
    def _getSimulation(self, director):
        return director.clerk.getRecordByID(AbInitio, self.inventory.id)
    

    def __init__(self, name='vasp-rawinput'):
        super(Actor, self).__init__(name)
        return


VASP_RAW_INPUT_FILES = [
    'INCAR',
    'KPOINTS',
    'POSCAR',
    'POTCAR',
    ]



from vnf.dom.AbInitio import AbInitio


def actor(): return Actor()


# version
__id__ = "$Id$"

# End of file 

