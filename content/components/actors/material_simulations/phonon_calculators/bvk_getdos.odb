#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


import luban.content as lc
from luban.content import load, select

from luban.components.AuthorizedActor import AuthorizedActor as base


class Actor(base):


    class Inventory(base.Inventory):

        import pyre.inventory

        id = pyre.inventory.str(name='id')


    def createView(self, director):
        doc = lc.document(Class='container')
        
        c = self._getComputation(director)
        if not c.isConfigured():
            return self.createConfigurationView(director)
        
        path = self._pathToMe(director)
        view_indicator = director.retrieveVisual('view-indicator', path=path)
        doc.add(view_indicator)

        #
        domaccess = self._domaccess(director)
        orm = domaccess.orm
        record = orm(c)
        
        # matter view
        matter = c.matter
        matterview = doc.document(
            title='Atomic structure %r' % matter.description,
            collapsable = True, collapsed = True)
        matterview.onexpand = select(element=matterview).replaceContent(
            load(actor='orm/atomicstructures', routine='display',
                 id = orm(matter).id, editlink=False)
            )

        # model view
        model = c.model
        modelview = doc.document(
            title='BvK model %r' % model.short_description,
            collapsable = True, collapsed = True)
        modelview.onexpand = select(element=modelview).replaceContent(
            load(actor='orm/bvkmodels', routine='display',
                 id = orm(model).id, editlink=False)
            )

        # my configuration
        configdoc = doc.document(title = 'Configuration', collapsable = True)
        drawer = director.painter.paintObj.drawers.getDrawer(c.__class__)
        configdoc.add(
            drawer.createPropertiesView(c, editlink=False)
            )

        # results
        resultsdoc = doc.document(title = 'Results', collapsable=True, collapsed=True)
        resultsdoc.onexpand = select(element=resultsdoc).replaceContent(
            load(actor=self.name, routine='createResultsDoc',
                 id=self.inventory.id)
            )
        return doc


    def createResultsDoc(self, director):
        record = self._getComputationRecord(director)
        return director.retrieveVisual(
            'computation-results',
            computation=record, director=director)


    def createConfigurationView(self, director):
        c = self._getComputation(director)

        drawer = director.painter.paintObj.drawers.getDrawer(c.__class__)
        computation_doc = drawer(c)

        form = computation_doc.getDescendentByName('properties-form')
        form.onsubmit.params.update({
            'poststoring_routine': 'createJob',
            })

        # the container
        doc = lc.document()

        # path
        path = self._pathToMe(director)
        view_indicator = director.retrieveVisual('view-indicator', path=path)
        doc.add(view_indicator)

        # 
        doc.add(computation_doc)

        return doc


    def _pathToMe(self, director):
        id = self.inventory.id
        if not id:
            raise RuntimeError
        domaccess = self._domaccess(director)
        label = domaccess.getComputationLabel('dos', id)
        computation = self._getComputation(director)
        return [
            ('Simulations',
             lc.load(actor='materialsimulation')),
            # assume all simulation types that start with "bvk_" are bvk simulations
            ('BvK simulations',
             lc.load(actor='materialsimulation', filter_expr="type=='bvk_*'")),
            ('%s %s' % (computation.__class__.__name__, label),
             lc.select(id='main-display-area').replaceContent(
            lc.load(actor='material_simulations/phonon_calculators/bvk_getdos',
                    routine = 'createView', id=id)
            )),
            ]


    def _getComputation(self, director):
        domaccess = self._domaccess(director)
        id = self.inventory.id
        return domaccess.getComputation('dos', id)


    def _getComputationRecord(self, director):
        domaccess = self._domaccess(director)
        id = self.inventory.id
        return domaccess.getComputationRecord('dos', id)


    def _domaccess(self, director):
        return director.retrieveDOMAccessor('material_simulations/phonon_calculators/bvk')


    def __init__(self, name='material_simulations/phonon_calculators/bvk_getdos'):
        super(Actor, self).__init__(name)
        return


def actor(): return Actor()


# version
__id__ = "$Id$"

# End of file 

