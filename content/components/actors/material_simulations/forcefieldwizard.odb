#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from luban.content import load, select

from luban.content.Document import Document
from luban.content.Link import Link


from luban.components.Actor import Actor as base


class Actor(base):


    class Inventory(base.Inventory):

        import pyre.inventory

        id = pyre.inventory.str('id')

        structure_id = pyre.inventory.str('structure_id')

        short_description = pyre.inventory.str('short_description', default = '' )
        short_description.meta['tip'] = 'A short description'
        
        librarycontent = pyre.inventory.str('librarycontent')
        inputFileContents = pyre.inventory.str('inputFileContents')
        runtype = pyre.inventory.str('runtype')
        
        creator = pyre.inventory.str('creator')
        description = pyre.inventory.str('description')
        potential_name = pyre.inventory.str('potential_name')
        potential_filename = pyre.inventory.str('potential_filename')
        
#        engine = pyre.inventory.str('engine', default='vasp')
#        engine.validator=pyre.inventory.choice(['vasp', 'ab init'])
#        engine.meta['tip'] = 'Ab initio engine'
#        
#        xcFunctional = pyre.inventory.str('xcFunctional', default='PAW-PBE')
#        xcFunctional.meta['tip'] = 'Exchange correlation functional'
#        
#        kineticEnergyCutoff = pyre.inventory.float('kineticEnergyCutoff', default=140.0)
#        kineticEnergyCutoff.meta['tip'] = 'Kinetic energy cutoff'
#
#        #monkhorstPackMesh.meta['tip'] = 'Monkhorst pack mesh'
#        nKx = pyre.inventory.int('nKx')
#        nKy = pyre.inventory.int('nKy')
#        nKz = pyre.inventory.int('nKz')


    def start(self, director):
        assert self.inventory.id == ''
        
        domaccess = director.retrieveDOMAccessor('atomicstructure')
        structure = domaccess.getAtomicStructureRecord('48QWPK9')
        #structurelabel = structure.description or structure.chemical_formula or structure.id
        #structurelabel = domaccess.getAtomicStructureLabel(id)
        structurelabel = structure.chemical_formula or structure.id
        self.inventory.structure_id = structure.id
        
        title = 'Forcefield simulation of %s' % (structurelabel,)
        wizard = Document(id='forcefieldwizard-start', title=title)

        link = Link(label='back to Matter\ %s' % structurelabel)
        link.onclick = load(
            actor='atomicstructure', routine='editAtomicStructureForm',
            id=structure.id)
        wizard.add(link)
        
        form = self.startform(director)
        wizard.add(form)
        
        return select(id='main-display-area').replaceContent(wizard)


    def restart(self, director):
        id = self.inventory.id
        assert id

        domaccess = director.retrieveDOMAccessor("materialsimulation")
        gulpsim = domaccess.getMaterialSimulation("gulpsimulations",id)
        
        structure = gulpsim.structure.dereference(director.clerk.db)
        self.inventory.structure_id = structure.id
        
        structurelabel = structure.short_description or structure.chemical_formula or structure.id
        title = 'Simulation\ %s: Forcefield simulation of Matter\ %s' % (id, structurelabel)
        wizard = Document(id='forcefieldwizard-start', title=title)

        link = Link(label='back to Matter\ %s' % matterlabel)
        link.onclick = load(
            actor='atomicstructure', routine='editAtomicStructureForm',
            id=structure.id)
        wizard.add(link)
        
        form = self.startform(director)
        wizard.add(form)
        
        return select(id='main-display-area').replaceContent(wizard)


    def startform(self, director):
        from luban.content.Splitter import Splitter
        from luban.content.Form import Form
        from luban.content.FormTextField import FormTextField
        from luban.content.FormSelectorField import FormSelectorField
        
        form = Form(
            id='forcefield-wizard-startform',
            title='')

        args = {
            #'simulationId': director.getGUID(),
            #'simulationType': '',
            'matterId': self.inventory.structure_id,
            #'coordinateType':simulation.matter.
            }
        callbackArgs = {
            'cgihome':director.weaver.controllerurl,
            'sentry.username':director.sentry.username,
            'sentry.ticket':director.sentry.ticket,
#            'actor': self.name,
            }
        args.update(callbackArgs)
        
        from vnfb.components.JnlpFile import JnlpFile
        jnlpFile = JnlpFile(
            resources=('GULP.jar', 'j2ssh.jar', 'commons-logging.jar','pg74.216.jdbc3.jar'),
            mainClass='javagulp.controller.LaunchGulpUi',
            programArguments = args,
            fileName='gulpLauncher'
            )
        relativeLocationOfFile = jnlpFile.writeJnlp(director)
        
        p = form.paragraph()
        p.text = ['''The Gulp simulation package uses efficient forcefield
        techniques for simulating larger systems.  Its capabilities include forcefields from 
        a large number of trial functions, phonon / molecular dynamics / optimization, experimental data fitting,
        and crystal property calculation.''']
        
        from luban.content.HtmlDocument import HtmlDocument
        h = HtmlDocument()
        h.text = ['<br><center><a href="'+relativeLocationOfFile+'"><img src="images/webstart.gif" alt="GulpUi"/></a></center>']
        form.add(h)
        p = form.paragraph()
        p.text = ['''Press "Launch" above to activate GulpUi in Java Web Start mode.  Note: you must have
        a Java Virtual Machine (JVM) installed.  If you do not, clicking "Launch" will likely cause your browser to alert you to this
        and install one automatically.  It is highly recommended to use the JVM from Sun Microsystems.  The OpenJDK (default on Ubuntu OS)
        does not work due to bugs in their webstart launcher.''']
        next = form.submitbutton(label="next")
        from luban.content import select
        form.onsubmit = select(element=form).submit(
            actor = 'material_simulations/forcefieldwizard',
            routine = 'configureSubmissionQueue',
            id = self.inventory.id,
            )
        return form


    def storeInputFile(self, director):
        # this method is called by the java web start gui (AtomSim)
        #id = self.inventory.id #this was passed by AtomSim
        from memd.gulp.GulpSettings import GulpSettings
        gulpSettings = GulpSettings()
        gulpSettings.runtype = self.inventory.runtype
        gulpSettings.inputFileContents = self.inventory.inputFileContents
        gulpSettings.potential_name = self.inventory.potential_name
        director.clerk.orm.save(gulpSettings)

#    def storeInputFile(self, director):
#        try:
#            page = self._retrievePage(director)
#        except AuthenticationError, err:
#            return err.page
#
#        inputFileContents = self.inventory.inputFileContents
#        potential_name = self.inventory.potential_name
        
#        simulation = self._getSimulation(director)
        from memd.gulp.GulpPotential import GulpPotential
        try:
            gulpPotential = director.clerk.getRecordByID(GulpPotential, self.inventory.potential_name, 
                associatedDataFileToVerify = self.inventory.potential_filename, director=director)
        except:
            return "failure--cannot find selected potential in database"
        
        #set simulation attributes
#        simulation.runtype = self.inventory.runtype
#        #potential = simulation.potential.dereference(director.clerk.db)
#        simulation.potential = gulpPotential
#        gulpPotential.potential_name = self.inventory.potential_name
#        #director.clerk.updateRecord(potential)
#        director.clerk.updateRecord(simulation)

        #create data directory for the simulation if necessary
        datadir = director.dds.abspath(gulpSettings)
        if not os.path.exists(datadir): os.makedirs(datadir)

        inputFilePath = director.dds.abspath(gulpSettings, filename=GulpSettings.inputFile)
        open(inputFilePath, 'w').write(self.inventory.inputFileContents)
        
        #get the potential from the database
        potentialPath = director.dds.abspath(gulpPotential, filename=gulpPotential.filename)
        potentialContent = open(potentialPath).read()
        #write the potential in the simulation directory
        simulationPotential = director.dds.abspath(gulpSettings, filename=gulpPotential.filename)
        open(simulationPotential, 'w').write(potentialContent)        

        return 'success'
    
    def storePotential(self, director):

        potential_filename = self.inventory.potential_filename
        librarycontent = self.inventory.librarycontent
        
        from memd.gulp.GulpPotential import GulpPotential
        try:
            gulpPotential = director.clerk.getRecordByID(GulpPotential, self.inventory.potential_name, 
                associatedDataFileToVerify = self.inventory.potential_filename, director=director)
        except:
            # if it doesn't exist, create a new one from this entry
            #gulpPotential = director.clerk.newDbObject(GulpPotential, id = self.inventory.potential_name)
            gulpPotential = GulpPotential()
            gulpPotential.filename = potential_filename
            gulpPotential.creator = self.inventory.creator
            gulpPotential.description = self.inventory.description
            director.clerk.orm.save(gulpSettings)
            
            #put the potential in the potentials subdirectory
            libfile = director.dds.abspath(gulpPotential, filename = potential_filename)
            libDirectory,file = os.path.split(libfile)
            if not os.path.exists(libDirectory):
                try:
                    os.makedirs(libDirectory)
                except Exception, err:
                    raise RuntimeError, "unable to create directory %r. %s: %s" % (
                        self.path, err.__class__.__name__, err)
            open(libfile, 'w').write(librarycontent)
            #server = director.clerk.dereference(job.server)
            director.dds.remember(gulpPotential, files=[potential_filename])#, server=server)

        return 'success'

    def startFormShowError(self, director, errors=None):
        from luban.content import select
        return [
            select(id='%s-input' % name).showError(text)
            for name, text in errors.iteritems()
            ]
    
    def __init__(self, name='forcefieldwizard'):
        super(Actor, self).__init__(name)
        return
    
    def configureSubmissionQueue(self, director):

        id = self.inventory.id
        type = self.inventory.type
        
        main = page._body._content._main
        document = main.document(title='Atomic-level Simulation with Forcefields' )

        p = document.paragraph()
        p.text = ['Your gulp simulation #%s is ready for submission.' % id]
        
        p = document.paragraph()
        action = actionRequireAuthentication(
            label = 'start',
            actor = 'gulpsimulationwizard', 
            sentry = director.sentry,
            routine = 'submitSimulation',
            id=id, type=type,
            )
        submit_link = action_link(action, director.cgihome)
        
        action = actionRequireAuthentication(
            label = 'save it for later submission',
            actor = 'gulpsimulationwizard', 
            sentry = director.sentry,
            routine = 'saveSimulation',
            id=id, type=type,
            )
        save_link = action_link(action, director.cgihome)
        
        action = actionRequireAuthentication(
            label = 'delete',
            actor = 'gulpsimulationwizard', 
            sentry = director.sentry,
            routine = 'cancel',
            id=id, type=type,
            )
        delete_link = action_link(action, director.cgihome)

        p.text = [
            'You can %s this simulation, or %s, or %s it.' % (submit_link, save_link, delete_link),
            ]
        return page
        
    



import os
def isConfigured(sim, director):
    path = director.dds.abspath(sim, filename=GulpSimulation.CONFIGURATION_FILE)
    if os.path.exists(path): return True
    return False

from vnf.dom.GulpSimulation import GulpSimulation


def actor(): return Actor()


# version
__id__ = "$Id$"

# End of file 

