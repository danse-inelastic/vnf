#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

from luban.content import load, select
import luban.content as lc

from luban.content.Document import Document
from luban.content.Link import Link

from luban.components.Actor import Actor as base

from luban.content.Splitter import Splitter, SplitSection

from luban.content.Form import Form
from luban.content.FormTextField import FormTextField
from luban.content.FormSelectorField import FormSelectorField
from luban.content.HtmlDocument import HtmlDocument
#from luban.content import select

class Actor(base):

    class Inventory(base.Inventory):

        import pyre.inventory

        simulationId = pyre.inventory.str('simulationId', default = '')
        structureId = pyre.inventory.str('structureId', default = '')
        short_description = pyre.inventory.str('short_description', default = '' )
        short_description.meta['tip'] = 'A short description'
        inputFileContents = pyre.inventory.str('inputFileContents', default='')
        runtype = pyre.inventory.str('runtype', default='')
        creator = pyre.inventory.str('creator', default='')
        description = pyre.inventory.str('description', default='')
        
        potentialContent = pyre.inventory.str('potentialContent', default='')
        potential_name = pyre.inventory.str('potential_name', default='')
        potential_filename = pyre.inventory.str('potential_filename', default='')
        potentialCreator = pyre.inventory.str('potentialCreator', default='')
        potentialDescription = pyre.inventory.str('potentialDescription', default='')

    def default(self, director):
#        domaccess = director.retrieveDOMAccessor('atomicstructure')
#        '3W4G7NUM'
#        structure = domaccess.getAtomicStructureRecord(self.inventory.structureId)
#        structurelabel = structure.chemical_formula or structure.id
        #title = 'Forcefield simulation of %s' % (structurelabel,)
        title = 'Simulation with forcefields'
        wizard = Document(id='forcefieldwizard-start', title=title)
        doc = self.createMatterSelector(director)
        wizard.add(doc)
        return select(id='main-display-area').replaceContent(wizard)
    
    def createMatterSelector(self, director):
        visual = director.retrieveVisual(
            'material_simulations/moldyn/matter-selector',
            director=director,
            onselect = load(
                actor=self.name, routine='loadWorkflowSelector',
                structureId=select(id='atomicstructure-table').table(
                    'getIdentifierForSelectedRow', colname='selectone'),
                )
            )
        return visual

    
    def loadWorkflowSelector(self, director):
        vis = director.retrieveVisual(
            'material_simulations/moldyn/sim-workflow-selector', 
            atomicstructure = self.inventory.structureId,
            director = director,
            )
        return select(id='main-display-area').replaceContent(vis)


    def atomSimForm(self, director):
        form = director.retrieveVisual(
            'material_simulations/moldyn/atomsim-start', 
            structureId=self.inventory.structureId,
            director=director,
            )
        return select(id='main-display-area').replaceContent(form)
    
    def storeInputFile(self, director):
        # this method is called by the java web start gui (AtomSim)
        orm = director.clerk.orm
        # first store the potential
        #self.storePotential(director)--> TODO: this is already stored by gulpUi so don't need to re-store
        #TODO: make it so it will load settings back in if restarting
        # then store the settings
        #from memd.gulp.GulpSettings import GulpSettings
        from vnfb.dom.material_simulations.GulpSettings import GulpSettings
        gulpSettings = GulpSettings()
        gulpSettings.id = self.inventory.simulationId
        import time
        gulpSettings.date = time.ctime()
        gulpSettings.creator = director.sentry.username
        gulpSettings.runtype = self.inventory.runtype
        gulpSettings.description = self.inventory.runtype
        #gulpSettings.inputFileContents = self.inventory.inputFileContents
        #gulpSettings.potential_name = self.inventory.potential_name
        domaccess = director.retrieveDOMAccessor('atomicstructure')
        structure = domaccess.getAtomicStructure(self.inventory.structureId)
        gulpSettings.matter = orm(structure) # this turns an object back into a table?
        #since the potential has already been stored, we just get it 
        from memd.gulp.GulpPotential import GulpPotential
        try:
            potentialRecord = orm.db.query(orm(GulpPotential)).filter_by(
                        potential_name = self.inventory.potential_name).one()
        except Exception, err:
            print err
            self.storePotential(director)
            potentialRecord = orm.db.query(orm(GulpPotential)).filter_by(
                        potential_name = self.inventory.potential_name).one()
        #gulpSettings.potential = orm.record2object(record)
        gulpSettings.potential = potentialRecord

        #save the settings
        director.clerk.insertNewRecord(gulpSettings)
#        orm.save(gulpSettings, save_not_owned_referred_object=0, 
#                 id = self.inventory.simulationId)
        # these last few lines will eventually be taken care of by the orm
        #create data directory for the simulation if necessary
        datadir = director.dds.abspath(gulpSettings)
        if not os.path.exists(datadir): 
            os.makedirs(datadir)

        inputFilePath = director.dds.abspath(gulpSettings, filename=getattr(gulpSettings, "inputFile")) # this is a hack until we can fix db layer so it interacts correctly with dds
        open(inputFilePath, 'w').write(self.inventory.inputFileContents)
        
        #these lines should be executed right before the job is submitted
        #get the potential from the database
        gulpPotential = gulpSettings.potential
        potentialPath = director.dds.abspath(potentialRecord, filename = getattr(potentialRecord, "filename"))
        potentialContent = open(potentialPath).read()
        #write the potential in the simulation directory
        simulationPotential = director.dds.abspath(gulpSettings, filename = getattr(potentialRecord, "filename"))
        open(simulationPotential, 'w').write(potentialContent)        
        return 'success'
    
    def storePotential(self, director):
        orm = director.clerk.orm
        from memd.gulp.GulpPotential import GulpPotential
        try:
            record = orm.db.query(orm(GulpPotential)).filter_by(
                                potential_name = self.inventory.potential_name).one()
            gulpPotential = orm.record2object(record)
        except Exception, err:
            #print err
            #print 'creating new potential'
            gulpPotential = GulpPotential()
        gulpPotential.filename = self.inventory.potential_filename
        gulpPotential.creator = self.inventory.potentialCreator
        gulpPotential.description = self.inventory.potentialDescription
        gulpPotential.potential_name = self.inventory.potential_name
        orm.save(gulpPotential)
        #put the potential in the potentials subdirectory
        libfile = director.dds.abspath(orm(gulpPotential), 
                                             filename = gulpPotential.filename)
        libDirectory,file = os.path.split(libfile)
        if not os.path.exists(libDirectory):
            try:
                os.makedirs(libDirectory)
            except Exception, err:
                raise RuntimeError, "unable to create directory %r. %s: %s" % (
                    self.path, err.__class__.__name__, err)
        open(libfile, 'w').write(self.inventory.potentialContent)
        #server = director.clerk.dereference(job.server)
        director.dds.remember(orm(gulpPotential), files=[gulpPotential.filename])
        return 'success'

    def startFormShowError(self, director, errors=None):
        from luban.content import select
        return [
            select(id='%s-input' % name).showError(text)
            for name, text in errors.iteritems()
            ]
    
    def __init__(self, name='material_simulations/forcefieldwizard'):
        super(Actor, self).__init__(name)
        return
    
    def configureSubmissionQueue(self, director):
        return director.redirect(actor = 'job', routine = 'create', 
                computation_type = 'material_simulations.GulpSettings.GulpSettings', 
                computation_id = self.inventory.simulationId)

import os

def actor(): return Actor()


# version
__id__ = "$Id$"

# End of file 

