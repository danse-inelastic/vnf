#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

from vnfb.qeutils.qeparser.pseudo.pseudo import PSEUDO
from vnfb.qeutils.generators.pwgenerator import PWGenerator
from qecalc.qetask.qeparser.pwinput import PWInput
from luban.content import select

from vnfb.components.QEGenerator import QEGenerator as base

#XXX: The number atomic species is limited by 10 for now
class Actor(base):

    class Inventory(base.Inventory):
        import pyre.inventory
        # Matter type
        mattertype  = pyre.inventory.str('mattertype', default='0')

        # PW params
        ibrav       = pyre.inventory.int('ibrav', default=0)
        ecutwfc     = pyre.inventory.str('ecutwfc', default='')
        ecutrho     = pyre.inventory.str('ecutrho', default='')
        smearing    = pyre.inventory.str('smearing', default='')
        degauss     = pyre.inventory.str('degauss', default='')
        relax       = pyre.inventory.str('relax', default='0')     # Geometry optimization
        nk1         = pyre.inventory.str('nk1', default='')        # Type of the configuration file
        nk2         = pyre.inventory.str('nk2', default='')
        nk3         = pyre.inventory.str('nk3', default='')

        #HACK: population of inventory parameters for form submission
        mass0       = pyre.inventory.str('mass0', default='')
        mass1       = pyre.inventory.str('mass1', default='')
        mass2       = pyre.inventory.str('mass2', default='')
        mass3       = pyre.inventory.str('mass3', default='')
        mass4       = pyre.inventory.str('mass4', default='')
        mass5       = pyre.inventory.str('mass5', default='')
        mass6       = pyre.inventory.str('mass6', default='')
        mass7       = pyre.inventory.str('mass7', default='')
        mass8       = pyre.inventory.str('mass8', default='')
        mass9       = pyre.inventory.str('mass9', default='')
        pseudo0     = pyre.inventory.str('pseudo0', default='')
        pseudo1     = pyre.inventory.str('pseudo1', default='')
        pseudo2     = pyre.inventory.str('pseudo2', default='')
        pseudo3     = pyre.inventory.str('pseudo3', default='')
        pseudo4     = pyre.inventory.str('pseudo4', default='')
        pseudo5     = pyre.inventory.str('pseudo5', default='')
        pseudo6     = pyre.inventory.str('pseudo6', default='')
        pseudo7     = pyre.inventory.str('pseudo7', default='')
        pseudo8     = pyre.inventory.str('pseudo8', default='')
        pseudo9     = pyre.inventory.str('pseudo9', default='')


    def content(self, director):
        "Populates the content for creation of input configuration"
        title   = "Electron Minimization Configuration Input"
        label   = "Electron Minimizatio Form"
        visual  = "material_simulations/espresso/input-electron-min"  # Material type form
        return self._document(director, title, label, visual = visual)


    def __init__(self):
        super(Actor, self).__init__(name='material_simulations/espresso-utils/generate-electron-min')


    def _configure(self):
        super(Actor, self)._configure()
        self.ibrav          = self.inventory.ibrav
        self.ecutwfc        = self.inventory.ecutwfc
        self.ecutrho        = self.inventory.ecutrho
        self.smearing       = self.inventory.smearing
        self.degauss        = self.inventory.degauss
        self.mattertype     = self.inventory.mattertype
        self.relax          = self.inventory.relax
        self.nk1            = self.inventory.nk1
        self.nk2            = self.inventory.nk2
        self.nk3            = self.inventory.nk3

        N_ATOMS  = 10
        # Set masses for atoms
        for i in range(N_ATOMS):
            setattr(self, "mass%s" % i, getattr(self.inventory, "mass%s" % i))

        # Set pseudo potentials for atoms
        for i in range(N_ATOMS):
            setattr(self, "pseudo%s" % i, getattr(self.inventory, "pseudo%s" % i))


    def _init(self):
        super(Actor, self)._init()
        return

def actor():
    return Actor()


__date__ = "$May 15, 2010 8:33:01 AM$"


