#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

#from vnfb.qeutils.qeparser.qeinput import QEInput
#from vnfb.qeutils.qeparser.namelist import Namelist
#from vnfb.qeutils.qeparser.card import Card
#from vnfb.qeutils.qeconst import SMEARING, MATTER_TYPE

from vnfb.qeutils.qeparser.pseudo.pseudo import PSEUDO
from qecalc.qetask.qeparser.pwinput import PWInput
from vnfb.qeutils.generators.pwgenerator import PWGenerator

from luban.components.AuthorizedActor import AuthorizedActor as base

#XXX: The number atomic species is limited by 10 for now
class Actor(base):

    class Inventory(base.Inventory):
        import pyre.inventory
        id          = pyre.inventory.str('id', default='')          # Simulation Id
        taskid      = pyre.inventory.str('taskid', default='')
        type        = pyre.inventory.str('type', default='')
        structureid = pyre.inventory.str('structureid', default='')

        ibrav       = pyre.inventory.int('ibrav', default=0)
        ecutwfc     = pyre.inventory.str('ecutwfc', default='')
        ecutrho     = pyre.inventory.str('ecutrho', default='')
        smearing    = pyre.inventory.str('smearing', default='')
        degauss     = pyre.inventory.str('degauss', default='')
        mattertype  = pyre.inventory.str('mattertype', default='')
        nk1         = pyre.inventory.str('nk1', default='')        # Type of the configuration file
        nk2         = pyre.inventory.str('nk2', default='')
        nk3         = pyre.inventory.str('nk3', default='')

        #HACK: population of inventory parameters for form submission
        mass0       = pyre.inventory.str('mass0', default='')
        mass1       = pyre.inventory.str('mass1', default='')
        mass2       = pyre.inventory.str('mass2', default='')
        mass3       = pyre.inventory.str('mass3', default='')
        mass4       = pyre.inventory.str('mass4', default='')
        mass5       = pyre.inventory.str('mass5', default='')
        mass6       = pyre.inventory.str('mass6', default='')
        mass7       = pyre.inventory.str('mass7', default='')
        mass8       = pyre.inventory.str('mass8', default='')
        mass9       = pyre.inventory.str('mass9', default='')
        pseudo0     = pyre.inventory.str('pseudo0', default='')
        pseudo1     = pyre.inventory.str('pseudo1', default='')
        pseudo2     = pyre.inventory.str('pseudo2', default='')
        pseudo3     = pyre.inventory.str('pseudo3', default='')
        pseudo4     = pyre.inventory.str('pseudo4', default='')
        pseudo5     = pyre.inventory.str('pseudo5', default='')
        pseudo6     = pyre.inventory.str('pseudo6', default='')
        pseudo7     = pyre.inventory.str('pseudo7', default='')
        pseudo8     = pyre.inventory.str('pseudo8', default='')
        pseudo9     = pyre.inventory.str('pseudo9', default='')


    def generateInput(self, director):
        return director.redirect(actor   = 'material_simulations/espresso/input-create',
                                routine = 'default',
                                text    = self._input(director),
                                id      = self.inventory.id,
                                taskid  = self.inventory.taskid,
                                type    = self.inventory.type)

    
    def _input(self, director):
        pwinput   = self._loadStructure(director)   # Initial structure loading from atomic structure
        return self._getInput(pwinput, director)


    def _getInput(self, input, director):
        self._generator = PWGenerator(self.inventory, input)   #
        self._generator.control()
        self._generator.system()
        self._generator.electrons()         # TODO: Suitable for phonon calculations?
        self._generator.k_points()

        return self._generator.toString()   #input.structure.toString()


    def _loadStructure(self, director):
        """Populates the geometry (structure) related parameters:
            - SYSTEM
            - ATOMIC_POSITIONS
        """
        structure   = self._structure(director)
        # For test print: structure, structure.lattice.base

        masslist    = []
        pseudolist  = []
        labels      = self._labels(structure)
        for i in range(len(labels)):
            masslist.append(float(getattr(self, "mass%s" % i)))
            pseudo  = PSEUDO[labels[i]][int(getattr(self, "pseudo%s" % i))]
            pseudolist.append(pseudo)

        input          = PWInput()
        input.structure.load(source    = 'diffpy',
                              structure = structure,
                              ibrav     = self.ibrav,
                              massList  = masslist,
                              psList    = pseudolist)

        input.structure.updatePWInput() # XXX Updated QEStructure. Not sure why?
        
        return input


    def _structure(self, director):
        "Get structure from atomicstructure database table"
        domaccess   = director.retrieveDOMAccessor('atomicstructure')
        return domaccess.getAtomicStructure(self.structureid) 
        

    def _labels(self, structure):
        "Atom labels"
        return list(set([e.symbol for e in structure]))


    def __init__(self):
        super(Actor, self).__init__(name='material_simulations/espresso-utils/generate-pw')

        return


    def _configure(self):
        super(Actor, self)._configure()
        self.id             = self.inventory.id
        self.taskid         = self.inventory.taskid
        self.type           = self.inventory.type
        self.structureid    = self.inventory.structureid
        
        self.ibrav          = self.inventory.ibrav
        self.ecutwfc        = self.inventory.ecutwfc
        self.ecutrho        = self.inventory.ecutrho
        self.smearing       = self.inventory.smearing
        self.degauss        = self.inventory.degauss
        self.mattertype     = self.inventory.mattertype
        self.nk1            = self.inventory.nk1
        self.nk2            = self.inventory.nk2
        self.nk3            = self.inventory.nk3

        N_ATOMS  = 10
        # Set masses for atoms
        for i in range(N_ATOMS):
            setattr(self, "mass%s" % i, getattr(self.inventory, "mass%s" % i))

        # Set pseudo potentials for atoms
        for i in range(N_ATOMS):
            setattr(self, "pseudo%s" % i, getattr(self.inventory, "pseudo%s" % i))


    def _init(self):
        super(Actor, self)._init()
        return

def actor():
    return Actor()

__date__ = "$Jan 13, 2010 4:29:22 AM$"

