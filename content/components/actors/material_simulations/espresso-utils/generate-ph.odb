#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

from vnfb.qeutils.generators.phgenerator import PHGenerator
from luban.components.AuthorizedActor import AuthorizedActor as base

# Requires simulation id,
class Actor(base):

    class Inventory(base.Inventory):
        import pyre.inventory
        id          = pyre.inventory.str('id', default='')          # Simulation Id
        simtype     = pyre.inventory.str('simtype', default='')     # Simulation type (for convenience)
        taskid      = pyre.inventory.str('taskid', default='')
        type        = pyre.inventory.str('type', default='')
        structureid = pyre.inventory.str('structureid', default='')
        nq1         = pyre.inventory.str('nq1', default='')        # Type of the configuration file
        nq2         = pyre.inventory.str('nq2', default='')
        nq3         = pyre.inventory.str('nq3', default='')


    def generateInput(self, director):
        "Redirects PH input text to input form"
        return director.redirect(actor   = 'material_simulations/espresso/input-create',
                                routine = 'default',
                                text    = self._input(),
                                id      = self.inventory.id,
                                taskid  = self.inventory.taskid,
                                type    = self.inventory.type)


#    def genMultiPhon(self, director):
#        "Redirects PH input text for multiple phonon simulation type to input form"
#        return director.redirect(actor   = 'material_simulations/espresso/input-create',
#                                routine = 'default',
#                                text    = self._input(),
#                                id      = self.inventory.id,
#                                taskid  = self.inventory.taskid,
#                                type    = self.inventory.type)
#
#
#
#    def genSinglePhon(self, director):
#        "Redirects PH input text for single phonon simulation type to input form"
#        return director.redirect(actor   = 'material_simulations/espresso/input-create',
#                                routine = 'default',
#                                text    = self._input(),
#                                id      = self.inventory.id,
#                                taskid  = self.inventory.taskid,
#                                type    = self.inventory.type)

    def _input(self):
        "Generates PH input text"
        gen     = PHGenerator(director, self.inventory)
        gen.setInputph()
        return gen.toString()


    def __init__(self):
        super(Actor, self).__init__(name='material_simulations/espresso-utils/generate-ph')

        return

    def _configure(self):
        super(Actor, self)._configure()
        self.id             = self.inventory.id
        self.simtype        = self.inventory.simtype
        self.taskid         = self.inventory.taskid
        self.type           = self.inventory.type
        self.structureid    = self.inventory.structureid
        self.nq1            = self.inventory.nq1
        self.nq2            = self.inventory.nq2
        self.nq3            = self.inventory.nq3


    def _init(self):
        super(Actor, self)._init()
        return

def actor():
    return Actor()

__date__ = "$Jan 13, 2010 4:29:22 AM$"
