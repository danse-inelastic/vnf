#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

from vnfb.qeutils.qegrid import QEGrid
from vnfb.qeutils.qeutils import stamp2date, key2val
from vnfb.qeutils.qeconst import CONVTYPE

import luban.content as lc
from luban.content import load, select
from luban.content.Paragraph import Paragraph

from vnfb.components.QEConvergence import QEConvergence as base

class Actor(base):
    class Inventory(base.Inventory):
        import pyre.inventory
        convid          = pyre.inventory.str('convid', default='')


    def _viewIndicator(self, director, section):
        qelink  = load( actor           = 'materialsimulation',
                        filter_key      = 'type',
                        filter_value    = 'qesimulations')

        path = []
        path.append(('Simulations ', load(actor='materialsimulation')))
        path.append(('Quantum Espresso ', qelink))
        path.append(('%s ' % self.id, load(actor    = 'material_simulations/espresso/sim-view',
                                           id       = self.id)))
        path.append(('Convergence Tests', load(actor    = 'material_simulations/espresso-convergence/view',
                                            id       = self.id)))
        path.append("Test: %s" % self.convid)
        section.add(director.retrieveVisual('view-indicator', path=path))

    
    def _refreshAction(self, section):
        section.add(lc.link(label="Refresh",
                            Class="qe-action-back",
                            onclick = load(actor      = 'material_simulations/espresso-convergence/conv-view',
                                             id       = self.id,
                                             convid   = self.convid))
                    )


    def _mainContent(self, director, splitter):
        "Main content"
        self._conv    = director.clerk.getQEConvergences(id = self.convid)
        if not self._conv:    # No convergence test found
            return

        splitter.section(id="input-error-area") # Area for errors?

        self._showConvInfo(splitter)
        self._showParamTitle(splitter)
        self._showParamTable(director, splitter)


    def _showConvInfo(self, splitter):
        sC          = splitter.section()
        table       = QEGrid(lc.grid(Class = "qe-table"))
        sC.add(table.grid())
        table.addRow(("Test Id: ",      self._conv.id))
        table.addRow(("Type: ",         key2val(self._conv.type, CONVTYPE, self._conv.type)))
        table.addRow(("Description: ",  self._conv.description))
        table.addRow(("Progress: ",     self._conv.progress))
        table.addRow(("Label: ",        self._conv.label))
        table.addRow(("Time Created: ", stamp2date(self._conv.timecreated) ))
        table.setColumnStyle(0, "qe-cell-param")


    def _showParamTitle(self, splitter):
        sP          = splitter.section(id="qe-tasks-label")
        sP.add(Paragraph(text="Varying Parameters", Class="qe-section-inline"))

        # Show refresh status button
        sP.add(lc.link( label   ="New Parameter",
                        id      = "action-refresh-status",
                        onclick = load(actor   = 'material_simulations/espresso-convergence/param-create',
                                        routine = "refreshStatus",
                                        id      = self.id)
                        ))
        sP.add(lc.document(Class="clear-both"))


    def _showParamTable(self, director, splitter):
        sT          = splitter.section()
        visual      = 'material_simulations/espresso-convergence/table-params'
        sT.add(director.retrieveVisual( visual,
                                        director,
                                        id      = self.id,
                                        convid  = self.convid))


    def _configure(self):
        super(Actor, self)._configure()
        self.convid       = self.inventory.convid


def actor():
    return Actor(name='material_simulations/espresso-convergence/conv-view')

__date__ = "$Apr 26, 2010 11:31:47 AM$"


