# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2011  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

from vnf.qeutils.qeutils import stamp2date, readRecordFile
from vnf.qeutils.qegrid import QEGrid

from luban.content import select
from luban.content import load

import luban.content as lc
from luban.components.AuthorizedActor import AuthorizedActor as base
from luban.content.HtmlDocument import HtmlDocument
from vnf.epscutils.epscconst import TYPE_DESC

class Actor(base):

    class Inventory(base.Inventory):
        import pyre.inventory
        id          = pyre.inventory.str('id', default='')          # Task Id
        configid    = pyre.inventory.str('configid', default='')    # Configuration Id
        taskid      = pyre.inventory.str('taskid', default='')
        type        = pyre.inventory.str('type', default='')        # Type of the configuration file


    def default(self, director):
        return select(id='main-display-area').replaceContent(self.content(director))


    def content(self, director):
        input   = director.clerk.getQEConfigurations(id=self.configid)
        label   = '%s Configuration' % TYPE_DESC[input.type]

        def viewIndicator(director):
            qelink  = load( actor           = 'materialsimulation',
                            filter_key      = 'type',
                            filter_value    = 'qesimulations')

            path = []
            path.append(('Simulations ', load(actor='materialsimulation')))
            path.append(('EPSC ', qelink))
            path.append(('%s ' % self.id, load(actor    = 'material_simulations/epsc/sim-view',
                                               id       = self.id)))
            path.append(label)

            return director.retrieveVisual('view-indicator', path=path)

        doc         = lc.document(title="%s: %s" % (label, input.filename))
        splitter    = doc.splitter(orientation="vertical")
        sA          = splitter.section()
        sA.add(viewIndicator(director))
        sC          = splitter.section(id="qe-section-actions")
        self._showActions(sC)

        sB          = splitter.section()
        table       = QEGrid(lc.grid(Class = "epsc-config-table"))
        sB.add(table.grid())

        self._showInput(director, table, input)
        # Should go after all of the rows are added!
        table.setColumnStyle(0, "epsc-config-cell-param")

        return doc


    def _showActions(self, section):
        section.add(lc.link(label="Back",
                            Class="qe-action-back",
                            onclick = load(actor      = 'material_simulations/epsc/sim-view',
                                             id         = self.id))
                    )

        section.add(lc.link(label="Edit",
                            Class="qe-action-edit",
                            onclick = load(actor      = 'material_simulations/epsc/config-edit',
                                             id         = self.id,
                                             configid   = self.configid,
                                             taskid     = self.taskid,
                                             type       = self.type))
                    )

        section.add(lc.link(label="Delete",
                            Class="qe-action-delete",
                            onclick = load(actor      = 'material_simulations/epsc/config-delete',
                                             id         = self.id,
                                             configid   = self.configid,
                                             taskid     = self.taskid,
                                             type       = self.type))
                    )

        section.add(lc.document(Class="clear-both"))


    def _showInput(self, director, table, input):
        if not input:
            return

        table.addRow(('Name:', input.filename))
        table.addRow(("Type: ", TYPE_DESC[self.type]))
        table.addRow(("Description: ", input.description))
        table.addRow(("Created: ", stamp2date(input.timecreated)))
        table.addRow(("Last Modified: ", stamp2date(input.timemodified)))
        table.addRow(("Configuration: ", self._inputText(director, input)))


    def _inputText(self, director, input):
        fname   = input.type
        s       = readRecordFile(director.dds, input, fname)
        if s:
            return HtmlDocument(text="<pre>%s<pre>" % s)

        return ""


    def __init__(self):
        super(Actor, self).__init__(name='material_simulations/epsc/config-view')

        return


    def _configure(self):
        super(Actor, self)._configure()
        self.id             = self.inventory.id
        self.configid       = self.inventory.configid
        self.taskid         = self.inventory.taskid
        self.type           = self.inventory.type


    def _init(self):
        super(Actor, self)._init()
        return

def actor():
    return Actor()

__date__ = "$Mar 24, 2011 10:58:47 AM$"


