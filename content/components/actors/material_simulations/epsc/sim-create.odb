# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2010  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

from luban.content import select, load
from vnf.dom.QESimulation import QESimulation
from vnf.epscutils.taskcreator import EPSCTaskCreator

import luban.content as lc
from luban.components.AuthorizedActor import AuthorizedActor as base

class Actor(base):
    """ Create EPSC simulation"""

    class Inventory(base.Inventory):
        import pyre.inventory
        sname       = pyre.inventory.str('sname', default='')
        simtype     = pyre.inventory.str('simtype', default='')
        description = pyre.inventory.str('description', default='')
        label       = pyre.inventory.str('label', default='')
        structureid = pyre.inventory.str('structureid', default='')
        # Number of thermo-mechanical processes, not used
        numproc     = pyre.inventory.str('numproc', default='1')


    def default(self, director):
        return select(id='main-display-area').replaceContent(self.content(director))


    def content(self, director):
        def viewIndicator(director):
            path = []
            path.append(('Simulations ', load(actor='materialsimulation')))
            path.append(('Create New Simulation ', select(id='main-display-area').replaceContent(
                                                          load(actor='materialsimulation',
                                                               routine='newSimulation')
                                                          ))
                        )
            path.append('EPSC')
            return director.retrieveVisual('view-indicator', path=path)

        doc         = lc.document(title   = "Create New Simulation")
        splitter    = doc.splitter(orientation="vertical")
        sA          = splitter.section()
        sA.add(viewIndicator(director))
        sB          = splitter.section()
        visual  = 'material_simulations/epsc/form-sim-create'
        sB.add(director.retrieveVisual(visual, self.inventory, director))

        return doc


    def showOptions(self, director):
        " Displays 'Select Atomic Structure' page"
        doc = lc.document(title='Select Atomic Structure')
        doc.Class = 'mastertable-as-selector-panel'

        # the container of the atomicstructure selector
        container = doc.document(id     = 'atomicstructure-selector-container',
                                 Class  = 'master-table-wrapper')
        container.oncreate = select(element=container).append(
                                            load(actor='selectoneatomicstructure',
                                                 routine='createListView'))

        # the button
        b = lc.button(label='Select')
        doc.add(b)
        b.onclick = load(actor          = self.name,
                         structureid    = select(id='atomicstructure-table').table(
                                                        'getIdentifierForSelectedRow',
                                                        colname = 'selectone')
            )
        return select(id='main-display-area').replaceContent(doc)



    def createRecord(self, director):
        "Create simulation and task records. Order is important"

        self._createSim(director)   # Creates simulation
        self._createTask(director)  # Creates task

        return load(actor='material_simulations/epsc/sim-view', id = self._newid)


    def _createSim(self, director):
        "Creates simulation record"
        params  = {"sname":         self._sname(),
                   "type":          "epsc",     # Only one type!
                   "simchain":      "epsc",
                   "creator":       director.sentry.username,
                   "short_description":   self._description(),
                   "label":         self.label,
                   "structureid":   self.structureid,
                   "package":       "EPSC"
                   }
        sim     = QESimulation(director)
        sim.createRecord(params)
        sim.establishGlobalPointer(director.clerk.db)
        self._newid = sim.id    # Id of new simulation
        

    def _createTask(self, director):
        "Creates task for the simulation"
        creator     = EPSCTaskCreator(director, self._newid)
        creator.createRecords("epsc")   # One task of type="epsc"


    def _description(self):
        "Returns description"
        if self.description == '':  # Description is not set
            return "EPSC simulation"
        return self.description


    def _sname(self):
        "Returns simulation name"
        if self.sname == '':    # Simulation name is not set
            return "Default"
        return self.sname


    def __init__(self):
        super(Actor, self).__init__(name='material_simulations/epsc/sim-create')
        self._newid = ""    # Id of new simulation to be created


    def _configure(self):
        super(Actor, self)._configure()
        self.sname       = self.inventory.sname
        self.simtype     = self.inventory.simtype
        self.description = self.inventory.description
        self.label       = self.inventory.label
        self.structureid = self.inventory.structureid
        self.numproc     = self.inventory.numproc


    def _init(self):
        super(Actor, self)._init()
        return

def actor():
    return Actor()


__date__ = "$Mar 1, 2011 12:19:17 PM$"


