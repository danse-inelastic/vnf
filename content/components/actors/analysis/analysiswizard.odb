#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

from luban.content import load, select
import luban.content as lc

from luban.content.Document import Document
from luban.content.Link import Link

from luban.components.Actor import Actor as base

import journal

analysisImports = {'motiondoscalc':'vsat.trajectory.MotionDosCalc',
                   'csfcalc':'vsat.trajectory.CsfCalc'}

class Actor(base):

    class Inventory(base.Inventory):
        import pyre.inventory
        analysisId = pyre.inventory.str('analysisId', default = '')
        dynamicsIdAndType = pyre.inventory.str('dynamicsIdAndType', default = '')
        #dynamicsType = pyre.inventory.str('dynamicsType', default = '')
        analysisType = pyre.inventory.str('analysisType', default='')
        short_description = pyre.inventory.str('short_description', default = '' )
        short_description.meta['tip'] = 'A short description'
        creator = pyre.inventory.str('creator', default='')
        description = pyre.inventory.str('description', default='')
#        inputFileContents = pyre.inventory.str('inputFileContents', default='')
#        runtype = pyre.inventory.str('runtype', default='')

    def default(self, director):
        wizard = Document(id='analysiswizard', title='Analysis')
        #doc = self.selectAnalysisType(director)
        doc = director.retrieveVisual('analysis/newAnalysisType', director = director)
        wizard.add(doc)
        return select(id='main-display-area').replaceContent(wizard)
    
    def selectAnalysisType(self, director):
        return 
    
    def selectDynamics(self, director):
        doc = lc.document(id='dynamics-selector-doc')
        doc.paragraph(
            text=['Please select a dynamics object:',
            ]
            )
        container = lc.document(id='dynamics-selector-container')
        doc.add(container)
        container.oncreate = [
            select(element=container).append(
              load(actor='analysis/selectdynamics', routine='createListView')
              ),
            ]
        # cancel
#        c = lc.link(label='cancel', Class='float-right'); doc.add(c)
#        c.onclick = select(id=self.matter_view_id).replaceBy(
#            load(actor='scatterer/editor', routine='createMatterView',
#                 id = self.id)
#            )
#        def getInfoAndProceed():
#            
#            return load(actor = self.name, routine = 'analysisSettings',
#                    dynamicsIdAndType = select(id='dynamics-table').table(
#                        'getIdentifiersForSelectedRow', colname='selectone'),
#                    analysisType = self.inventory.analysisType,
#                    dynamicsType = dynamicsType)  

        # select button
        b = lc.button(label='select'); doc.add(b)
        #b.onclick = getInfoAndProceed()
        b.onclick = load(actor = self.name, routine = 'analysisSettings',
                    dynamicsIdAndType = select(id='dynamics-table').table(
                        'getIdentifiersForSelectedRow', colname='selectone'),
                    analysisType = self.inventory.analysisType
                    )
        return doc

    def analysisSettings(self, director):
        self.debug = journal.debug('analysisSettings')
        orm = directory.orm
        doc         = lc.document(title = "")
#        splitter    = doc.splitter(orientation="vertical")
#        sA          = splitter.section(id='analysis-object-inspect')
        #sA.add(viewIndicator(director))
        
        #first get the type of the dynamics
#        domaccess = director.retrieveDOMAccessor('dynamics')
#        dynamics = domaccess.getDynamics(self.inventory.dynamicsId)
#        analysisType = dynamics.type
        self.debug.log('dynamicsIdAndType:%s' % self.inventory.dynamicsIdAndType)
        dynamicsId, dynamicsType = self.inventory.dynamicsIdAndType.split(',')
        container = lc.document(id='analysis-settings-container')
        doc.add(container)
        actorName = 'orm/'+self.inventory.analysisType
        #import the correct analysis
        className = analysisPaths[self.inventory.analysisType].split()[-1]
        exec('from '+analysisPaths[self.inventory.analysisType]+' import '+
             className)
        analysisClass = eval(className)
        analysisObj = analysisClass()
        #mdc = MotionDosCalc()
        orm.save(obj, save_not_owned_referred_object=False)
        self.inventory.simulationId = orm(analysisObj).id
        drawer = director.painter.paintObj.drawers.getDrawer(analysisClass)
        editview = drawer(analysisObj)
        container.add(editview)
        #container.oncreate = [
        #    select(element=container).append(        
        #      #load(actor='analysis/selectdynamics', routine='createListView')
        #      load(actor=actorName, routine='edit')#, id = dynamicsId)
        #      ),
        #    ]
#        sA.add(load(actor=actorName, routine='edit', id = self.inventory.dynamicsId))
#        sB          = splitter.section()
#        docSub      = lc.document(title = "")
        b = lc.button(label='select'); doc.add(b)
        b.onclick = load(
                actor=self.name, routine='runDirectly', 
                simulationId = self.inventory.simulationId,
                #actor=self.name, routine='configureSubmissionQueue'
                )
        return select(id='main-display-area').replaceContent(doc)

    def startFormShowError(self, director, errors=None):
        from luban.content import select
        return [
            select(id='%s-input' % name).showError(text)
            for name, text in errors.iteritems()
            ]
    
    def __init__(self, name='analysis/analysiswizard'):
        super(Actor, self).__init__(name)
        return
    
    def runDirectly(self, director):
        className = analysisPaths[self.inventory.analysisType].split()[-1]
        exec('from '+analysisPaths[self.inventory.analysisType]+' import '+
             className)
        analysisClass = eval(className)
        analysisObj = orm.load(analysisClass, id=self.inventory.simulationId)
        analysisResult = analysisObj.compute()
        analysisResult.getXY()
        x, y = disp.getDefaultDispersionPlot()
        # plot
        p = lc.plot2d()
        p.curve(x=list(x), y=list(y))
#        for i,y in enumerate(ys):
#            p.curve(x=list(x), y=list(y), label=str(i))
        
    
    def configureSubmissionQueue(self, director):
        return director.redirect(actor = 'job', routine = 'create', 
                computation_type = 'material_simulations.GulpSettingsHolder.GulpSettingsHolder', 
                computation_id = self.inventory.simulationId)

import os
def actor(): return Actor()


# version
__id__ = "$Id$"

# End of file 

