#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


import luban.content as lc
from luban.content import load, select

from luban.components.AuthorizedActor import AuthorizedActor as base

class Actor(base):

    class Inventory(base.Inventory):
        import pyre.inventory
        id = pyre.inventory.str(name='id')

    def createView(self, director):
        doc = lc.document(Class='container')

        domaccess = self._domaccess(director)
        db = domaccess.db
        c = self._getComputationRecord(director)
#        if not domaccess.isComputationConfigured(c):
#            return self.createConfigurationView(director)
        
        path = self._pathToMe(director)
        view_indicator = director.retrieveVisual('view-indicator', path=path)
        doc.add(view_indicator)

        # structure view
#        matter = c.matter.dereference(db)
#        matterview = doc.document(title='material', collapsable=True, collapsed=False)
#        viewmatter = load(actor='atomicstructure', routine='showOverview',
#                          id = matter.id)
#        link = lc.link(label=matter.short_description, onclick=viewmatter)
#        matterview.add(link)

        # results
        resultsdoc = doc.document(title = 'Results', collapsable=True, collapsed=True)
        resultsdoc.paragraph(text=['loading results. please wait...'])
        resultsdoc.onexpand = select(element=resultsdoc).replaceContent(
            load(actor=self.name, routine='createResultsDoc',
                 id=self.inventory.id)
            )

        # settings
        settingsdoc = doc.document(title = 'Settings', collapsable = True)
        settingsdoc.oncreate = select(element=settingsdoc).append(
            load(
              actor='orm/analysis/mddoscalc', routine='displayProperties',
              id = c.id, editlink=False,
            ))
        return doc


    def createResultsDoc(self, director):
        record = self._getComputationRecord(director)
        return director.retrieveVisual(
            'computation-results',
            computation=record, actor=self.name, director=director)


    def createConfigurationView(self, director):
        c = self._getComputation(director)
        
        drawer = director.painter.paintObj.drawers.getDrawer(c.__class__)
        computation_doc = drawer(c)
        
        form = computation_doc.getDescendentByName('properties-form')
        form.onsubmit.params.update({
            'poststoring_routine': 'createJob',
            })
        
        # the container
        doc = lc.document()

        # path
        path = self._pathToMe(director)
        view_indicator = director.retrieveVisual('view-indicator', path=path)
        doc.add(view_indicator)

        # 
        doc.add(computation_doc)

        return doc


    def _pathToMe(self, director):
        id = self.inventory.id
        if not id:
            raise RuntimeError
        domaccess = self._domaccess(director)
        label = domaccess.getComputationLabel(id)
        computation = self._getComputation(director)
        return [
            ('Analysis',
             lc.load(actor='analysis')),
            ('Trajectory Dos Calculations',
             lc.load(actor='analysis', filter_expr="type=='mddoscalc'")),
            ('%s %s' % (computation.__class__.__name__, label),
             lc.select(id='main-display-area').replaceContent(
            lc.load(actor='analysis/mddoscalc',
                    routine = 'createView', id=id)
            )),
            ]


    def _getComputation(self, director):
        domaccess = self._domaccess(director)
        id = self.inventory.id
        return domaccess.getAnalysis(id)


    def _getComputationRecord(self, director):
        domaccess = self._domaccess(director)
        id = self.inventory.id
        return domaccess.getAnalysisRecord(id)


    def _domaccess(self, director):
        return director.retrieveDOMAccessor('analysis')


    def __init__(self, name='analysis/mddoscalc'):
        super(Actor, self).__init__(name)
        return


def actor(): return Actor()


# version
__id__ = "$Id$"

# End of file 

