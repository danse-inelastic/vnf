#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from luban.content import load, select, alert, createCredential
import luban.content as lc

from luban.components.Actor import Actor as base


class Actor(base):


    class Inventory(base.Inventory):

        import pyre.inventory

        username = pyre.inventory.str('username')
        password = pyre.inventory.str('password')

        post_authorization_action = pyre.inventory.str(
            'post_authorization_action')


    def default(self, director):
        visual = self.createFrontPageContent(director)
        
        frame = lc.frame(title='Virtual neutron facility: please login')
        frame.add(visual)

        dock = lc.dock(id='dock', hidden=True)
        frame.add(dock)
        
        return frame


    def recreate(self, director):
        newframe = self.default(director)
        return select(id='').replaceBy(newframe)


    def createFrontPageContent(self, director):
        '''create the content of the front page (frame)
        add it to a frame then we have the login frame
        '''
        return self.visualfactory.createFrontPageContent(
            self.inventory.post_authorization_action,
            director)
    

    def verify(self, director):
        # pass info to sentry
        sentry = director.sentry
        sentry.ticket = ''
        sentry.username = self.inventory.username
        sentry.passwd = self.inventory.password

        errors = {}
        
        username = self.inventory.username
        if not username:
            errors['username'] = 'Username cannot be empty'
        elif not director.userIsActive():
            errors['username'] = 'Username does not exist. Please register first.'
            
        password = self.inventory.password
        if not password:
            errors['password'] = 'Password cannot be empty'

        if director.userIsActive() and password and not director.userIsAuthorized():
            errors['password'] = "Invalid password"
        
        if errors:
            if not director.userIsActive():
                # find out if user just registered
                from vnf.dom.Registrant import Registrant
                from vnf.dom.User import User
                db = director.clerk.db
                if db.query(Registrant).filter_by(username=username).all() \
                   and not db.query(User).filter_by(username=username).all():
                    return alert('Thanks for your interests in vnf. You probably just signed up for vnf but are not yet approved. Please wait for the approval email, and your patience is very much appreciated.')
            return self.formError(director, errors=errors)

        post_authorization_action = self.inventory.post_authorization_action
        if not post_authorization_action:
            post_authorization_action = load(actor='greeter', routine='greet')
        else:
            from vnf.content import safe_eval_action
            post_authorization_action = safe_eval_action(post_authorization_action)
        return [
            createCredential(
                username=director.sentry.username,
                ticket=director.sentry.ticket,
                ),
            post_authorization_action,
            ]


    def formError(self, director, errors=None):
        from luban.content import select
        return [select(id='login-form').enable()] + [
            select(id='login-%s-input' % name).formfield('showError', message=text)
            for name, text in errors.iteritems()
            ]
    
    
    def __init__(self, name='login'):
        super(Actor, self).__init__(name)
        from vnf.content.visuals.login import Factory
        self.visualfactory = Factory()
        return


def actor(): return Actor()


# version
__id__ = "$Id$"

# End of file 

