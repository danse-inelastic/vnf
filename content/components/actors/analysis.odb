#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from luban.content import load, select, alert
import luban.content as lc

# common actions
setpagetitle = select(id='').setAttr(title='Virtual neutron facility: Dynamics analysis and scattering kernel generation')

from vnfb.components.MasterTable import FilterSyntaxError, MasterTableActor as base

class Actor(base):

    class Inventory(base.Inventory):

        import pyre.inventory
        id = pyre.inventory.str('id')
        description = pyre.inventory.str('description')
        formids = pyre.inventory.list('formids')
        viewid = pyre.inventory.str('viewid')

    def default(self, director):
        return self.showListView(director)

    def replaceBodyFrameWithAnalysisList(self, director):
        body_frame          = select(id='body-frame')
        body_skeleton       = director.retrieveVisual('body-skeleton')
        main_display_area   = body_skeleton.find(id='main-display-area')

        try:
            analysislist = self.createListView(director)
        except FilterSyntaxError, msg:
            return alert('filter syntax error: %s' % msg)
            
        main_display_area.add(analysislist)

        analysis_portlet    = body_skeleton.find(id='main-portlet-my-analysis')
        analysis_portlet.selected = 1
        
        return [
            body_frame.replaceContent(body_skeleton),
            setpagetitle,
            ]

    def showListView(self, director):
        try:
            view = self.createListView(director)
        except FilterSyntaxError, msg:
            return alert('filter syntax error: %s' % msg)
        return [
            select(id = 'main-display-area').replaceContent(view),
            setpagetitle,
            ]
    
    def createListView(self, director):
        order_by        = self.inventory.order_by 
        reverse_order   = self.inventory.reverse_order
        number_records_per_page     = self.inventory.number_records_per_page
        page_number     = self.inventory.page_number

        filter_expr     = self.inventory.filter_expr
        filter_key      = self.inventory.filter_key
        filter_value    = self.inventory.filter_value

        label = self.inventory.label
        mine = self.inventory.mine
        
        tableview = director.retrieveVisual(
                                            'analysis/tableview',
                                            director,
                                            self.name,
                                            label           = label,
                                            mine            = mine,
                                            filter_expr     = filter_expr,
                                            filter_key      = filter_key,
                                            filter_value    = filter_value,
                                            order_by        = order_by,
                                            reverse_order   = reverse_order,
                                            number_records_per_page = number_records_per_page,
                                            page_number     = page_number
                                            )
        return tableview

    def newAnalysisForm(self, director):
        return select(id='main-display-area').replaceContent(
            load(actor="analysis/analysiswizard"))
        #return director.retrieveVisual('analysis/new', director = director)


    def delete(self, director):
        domaccess = self._domaccess(director)
        id = self.inventory.id
        s = domaccess.getAtomicStructure(id)
        domaccess.orm.destroy(s)
        return


    def doneediting(self, director):
        actions = []; messages = []

        id = self.inventory.id
        domaccess = self._domaccess(director)
        struct = domaccess.getAtomicStructure(id)
        #
        if len(struct) ==0:
            messages.append('sorry. you have not added an atom to your structure.')
            viewid = self.inventory.viewid
            actions.append(select(id=viewid).find(name='atoms').addClass('highlighted'))
        
        formids = self.inventory.formids
        actions += [select(id=id).addClass('highlighted') for id in formids]
        n = len(formids)
        messages.append('sorry. there are %s forms to fill out. please look for highlighted sections.' % n)

        if len(actions):
            actions.append(alert('\n\n'.join(messages)))
            return actions

        # update the chemical formula
        record = domaccess.orm(struct)
        record.chemical_formula = struct.getChemicalFormula()
        domaccess.db.updateRecord(record)
        
        return self.showListView(director)
    

    def showMaterialSimulation(self, director):
        actor = 'computation'
        routine = 'view'
        id = self.inventory.id
        type = self.inventory.type
        return director.redirect(actor=actor, routine=routine, id=id, type=type)


    def _domaccess(self, director):
        return director.retrieveDOMAccessor(self.name)

    def _defaults(self):
        super(Actor, self)._defaults()
        self.inventory.order_by = 'date'
        self.inventory.reverse_order = True
        return

    def __init__(self, name='analysis'):
        super(Actor, self).__init__(name)
        return



def actor(): return Actor()


# version
__id__ = "$Id$"

# End of file 

