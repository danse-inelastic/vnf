#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from luban.content import load, select, alert
import luban.content as lc

from vnfb.dom.UserHasRole import remove as removeRole
from vnfb.dom.RoleHasRole import join as joinGroup, leave as leaveGroup
from vnfb.dom.RoleHasPrivilege import grant as grantPrivilege, revoke as revokePrivilege

from vnfb.components.AdminActor import AdminReceptionist as base, portal
class Actor(base):


    class Inventory(base.Inventory):

        import pyre.inventory

        username = pyre.inventory.str(name='username')


    def setRoles(self, director):
        domaccess = director.retrieveDOMAccessor('acl')
        db = domaccess.db

        username = self.inventory.username
        user = domaccess.getUser(username)
        roles = domaccess.getAllRoles()
    
        #
        for role in roles:
            roleid = role.id
            name = 'r%s' % roleid
            hasrole = getattr(self.inventory, name, None)
            hasrole = bool(hasrole)
            if hasrole:
                if not user._hasRoleDirectly(role, db):
                    user.assignRole(role, db)
            else:
                if user._hasRoleDirectly(role, db):
                    removeRole(role, user, db)
            continue

        return select(id='user-has-roles').replaceBy(
            load(actor='loadvisual',
                 visual='admin/acl/user_has_roles',
                 username=username,
                 )
            )


    def setRoleRoles(self, director):
        domaccess = director.retrieveDOMAccessor('acl')
        db = domaccess.db

        rolename = self.inventory.rolename
        therole = domaccess.getRole(rolename)
        roles = domaccess.getAllRoles()
    
        #
        for role in roles:
            roleid = role.id
            name = 'r%s' % roleid
            hasrole = getattr(self.inventory, name, None)
            hasrole = bool(hasrole)
            if hasrole:
                if not therole._hasRoleDirectly(role, db):
                    joinGroup(therole, role, db)
            else:
                if therole._hasRoleDirectly(role, db):
                    leaveGroup(therole, role, db)
            continue

        return select(id='role-has-roles').replaceBy(
            load(actor='loadvisual',
                 visual='admin/acl/role_has_roles',
                 rolename=rolename,
                 )
            )


    def setPrivileges(self, director):
        domaccess = director.retrieveDOMAccessor('acl')
        db = domaccess.db

        rolename = self.inventory.rolename
        role = domaccess.getRole(rolename)
        privileges = domaccess.getAllPrivileges()
    
        #
        for privilege in privileges:
            privilegeid = privilege.id
            name = 'r%s' % privilegeid
            hasprivilege = getattr(self.inventory, name, None)
            hasprivilege = bool(hasprivilege)
            if hasprivilege:
                if not role._hasPrivilegeDirectly(privilege, db):
                    grantPrivilege(privilege, role, db)
            else:
                if role._hasPrivilegeDirectly(privilege, db):
                    revokePrivilege(privilege, role, db)
            continue

        return select(id='role-has-privileges').replaceBy(
            load(actor='loadvisual',
                 visual='admin/acl/role_has_privileges',
                 rolename=rolename,
                 )
            )


    def editRoles(self, director):
        return director.retrieveVisual(
            'admin/acl/edit_user_roles', 
            director = director,
            username = self.inventory.username,
            )
    
    
    def __init__(self, name=''):
        super(Actor, self).__init__(name)
        return


def actor(): return Actor()


# version
__id__ = "$Id$"

# End of file 

