#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from luban.content import load, select, alert
import luban.content as lc
import os

from luban.components.AuthorizedActor import AuthorizedActor as base


class Actor(base):


    class Inventory(base.Inventory):

        import luban.inventory

        structureid = luban.inventory.str('structureid')
        uploadid = luban.inventory.str('uploadid')


    def onUpload(self, director):
        '''
        structureid: atomic structure id
        uploadid: upload it
        '''
        # assumption: only one file uploaded

        # check the upload
        uploadid = self.inventory.uploadid
        
        from vnf.utils.upload import abspath
        dir = abspath(uploadid)
        
        entries = os.listdir(dir); found = None
        for entry in entries:
            if entry.startswith('.'): 
                continue
            if entry.endswith('.xyz') or entry.endswith('.pdb') or \
                                                entry.endswith('.cif'): 
                found = entry
                break
        # nothing uploaded
        if not found: return alert('Invalid file')

        # path to the file
        found = os.path.join(dir, found)

        # XXXX
        # should check if the files are sane and are not hostile
        # ....

        # create a new record
        domaccess = director.retrieveDOMAccessor('atomicstructure')
        structure = domaccess.newAtomicStructure()
        #filepath, ext = os.path.splitext(found)
        structure.read(found)
        #
        orm = director.clerk.orm
        self.inventory.structureid = orm(structure).id
        orm.save(structure)
        
        return load(
            actor='atomicstructure', routine='showOverview',
            id = self.inventory.structureid,
            )


    def __init__(self, name='atomicstructure/uploadmatter'):
        super(Actor, self).__init__(name)
        return


def actor(): return Actor()


# version
__id__ = "$Id$"

# End of file 

