#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from luban.content import load, select, alert
import luban.content

from luban.components.Actor import Actor as base


class Actor(base):
    
    
    class Inventory(base.Inventory):
        
        import pyre.inventory
        id = pyre.inventory.str('id')
        bonds = pyre.inventory.list('bonds')


    def default(self, director):
        # visual factory
        from vnf.content.visuals.matter_viewer import Factory
        visfactory = Factory()

        # the record
        id = self.inventory.id
        
        #
        doma = director.retrieveDOMAccessor('atomicstructure')

        # if there is pdb file, try to use that
        pdbfile = doma.hasPDBfile(id)
        if pdbfile:
            pdbcontent = open(pdbfile).read()
            return visfactory.createRibbonViewer(pdbcontent)

        # otherwise, do normal stuff
        matter = doma.getAtomicStructure(id)
        bonds = self.bonds
        text = visfactory.createViewer(matter)
        return text


    def _init(self):
        super(Actor, self)._init()
        bonds = self.inventory.bonds
        from luban.utils.safe_eval import safe_eval
        bonds = map(safe_eval, bonds)
        self.bonds = bonds
        return
        

    def __init__(self, name=None):
        if name is None:
            name = "matterviewer"
        super(Actor, self).__init__(name)
        return


def actor(): return Actor()

# version
__id__ = "$Id$"

# End of file 
