#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from luban.content import load, select, alert
import luban.content as lc


from luban.components.AuthorizedActor import AuthorizedActor as base


class Actor(base):


    class Inventory(base.Inventory):

        import luban.inventory

        structureid = luban.inventory.str('structureid')
        uploadid = luban.inventory.str('uploadid')


    def onUpload(self, director):
        '''
        structureid: atomic structure id
        uploadid: upload it
        '''
        
        # need to create a new sqe and save the file appropriately
        # assumption: only one file uploaded

        # check the upload
        uploadid = self.inventory.uploadid
        from vnfb.utils.upload import abspath
        path = abspath(uploadid)

        # find the file
        exts = ['.h5', '.nc']
        found = None
        import os
        if os.path.isdir(path):
            patterns = ['*'+e for e in exts]
            found = find(path, patterns) or None
            if found:
                found = found[0]
        else:
            for e in exts:
                if path.endswith(e): 
                    found = path
        if not found:
            msg = "The uploaded file does not have correct extension: "
            msg += ' '.join(exts)
            return alert(msg)
        # XXXX
        # should check if the files are sane
        try:
            checksqe(found)
        except Exception, e:
            import traceback
            tb = traceback.format_exc()
            msg = 'The uploaded file is not in correct format: %s\n\n%s' % (
                e, tb)
            return alert(msg)

        # create a new record
        clerk = director.clerk
        db = clerk.db
        #
        from vnfb.dom.material_simulations.SQE import SQETable
        sqe = clerk.insertNewOwnedRecord(SQETable)
        #
        sqe.matter = self.inventory.structureid
        db.updateRecord(sqe)

        # copy upload to new path
        ext = os.path.splitext(found)[-1]
        filename='data'+ext
        newpath = director.dds.abspath(sqe, filename=filename)
        newdir = os.path.dirname(newpath)
        if not os.path.exists(newdir):
            os.makedirs(newdir)
        import shutil
        shutil.copyfile(found, newpath)
        
        return load(
            actor='atomicstructure', routine='showOverview',
            id = self.inventory.structureid,)


    def __init__(self, name='atomicstructure/uploadsqe'):
        super(Actor, self).__init__(name)
        return



def find(dir, patterns):
    "find files in the given directory using the given pattern"
    import os, glob
    for p in patterns:
        l = glob.glob(os.path.join(dir, p))
        if l: return l
        continue
    return


def checksqe(path):
    import os
    if not os.path.exists(path): 
        raise RuntimeError, "path %s does not exist" % path

    ext = os.path.splitext(path)[-1][1:]
    h = 'checksqe_'+ext
    return eval(h)(path)


def checksqe_h5(path):
    from histogram.hdf import load, utils
    try:
        entry = utils.getOnlyEntry(histpath)
    except:
        entry = 'S(Q,E)'
    h = load(path, entry)
    return


def checksqe_nc(path):
    from vnfb.dom.material_simulations.SQE import SQE
    sqe = SQE()
    sqe.read(path)
    return


def actor(): return Actor()


# version
__id__ = "$Id$"

# End of file 

