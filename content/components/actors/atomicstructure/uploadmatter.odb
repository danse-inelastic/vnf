#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from luban.content import load, select, alert
import luban.content as lc
import os

from luban.components.AuthorizedActor import AuthorizedActor as base


class Actor(base):


    class Inventory(base.Inventory):

        import luban.inventory

        structureid = luban.inventory.str('structureid')
        uploadid = luban.inventory.str('uploadid')


    def onUpload(self, director):
        '''
        structureid: atomic structure id
        uploadid: upload it
        '''
        # assumption: only one file uploaded

        # namespace
        import os

        # 
        domaccess = director.retrieveDOMAccessor('atomicstructure')

        # check the upload
        uploadid = self.inventory.uploadid
        # .. get the upload directory
        from vnf.utils.upload import abspath
        dir = abspath(uploadid)
        # .. get the entries
        entries = os.listdir(dir); found = None
        # .. find the entry with the correct ext
        for entry in entries:
            if entry.startswith('.'): 
                continue
            base, ext = os.path.splitext(entry)
            if ext in domaccess.acceptable_datafile_exts:
                found = entry
                break
            continue
        else:
            return alert('File does not have understandable extension')
        
        # path to the file
        found = os.path.join(dir, found)

        # check if the files are sane and are not hostile
        if not domaccess.datafileIsSane(found):
            return alert("Failed to parse the data file")

        #
        newrecordid = domaccess.saveDataFileAsStructure(found)
        
        return load(
            actor='atomicstructure', 
            routine='showOverview',
            id = newrecordid,
            )


    def __init__(self, name='atomicstructure/uploadmatter'):
        super(Actor, self).__init__(name)
        return


def actor(): return Actor()


# version
__id__ = "$Id$"

# End of file 

