#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from luban.content import load, select, alert
import luban.content as lc


# common actions
setpagetitle = select(id='').setAttr(title='Virtual neutron facility: samples')
from  vnf.components.visuals import set_contextual_help
sethelppage = set_contextual_help(
    page='UserGuide-samples', label='about samples')


#
from vnf.components.MasterTable import FilterSyntaxError, MasterTableActor as base
class Actor(base):


    class Inventory(base.Inventory):

        import pyre.inventory

        # in case of working with one sample
        id          = pyre.inventory.str('id')
        type        = pyre.inventory.str('type')


    def default(self, director):
        return self.showListView(director)


    def debugListView(self, director):
        page = lc.page()
        doc = page.document(id='main-display-area')
        view = self.createListView(director)
        doc.add(view)
        return  page


    def showListView(self, director):
        try:
            view = self.createListView(director)
        except FilterSyntaxError, msg:
            return alert('filter syntax error: %s' % msg)
        return [
            select(id = 'main-display-area').replaceContent(view),
            setpagetitle,
            ] + sethelppage


    def createListView(self, director):
        order_by        = self.inventory.order_by
        reverse_order   = self.inventory.reverse_order
        number_records_per_page     = self.inventory.number_records_per_page
        page_number     = self.inventory.page_number

        filter_expr     = self.inventory.filter_expr
        filter_key      = self.inventory.filter_key
        filter_value    = self.inventory.filter_value

        label = self.inventory.label
        mine = self.inventory.mine
        
        tableview = director.retrieveVisual(
            'sample/tableview',
            director,
            'sample',  # name of master table
            label           = label,
            mine            = mine,
            filter_expr     = filter_expr,
            filter_key      = filter_key,
            filter_value    = filter_value,
            order_by        = order_by,
            reverse_order   = reverse_order,
            number_records_per_page = number_records_per_page,
            page_number     = page_number
            )

        return tableview
        

    # this is obsolete
    def createTable(self,
                    director,
                    order_by        = None,
                    reverse_order   = None,
                    slice           = None,
                    filter          = None,
                    label           = None):

        order_by        = order_by or self.inventory.order_by
        reverse_order   = reverse_order or self.inventory.reverse_order
        filter          = filter or self.inventory.filter_expr

        domaccess       = director.retrieveDOMAccessor(self.name)
        # Temp solution
        matsims         = director.clerk.getQESimulations()

        matsims         += domaccess.getSimulations(
                                                    order_by        = order_by,
                                                    reverse_order   = reverse_order,
                                                    slice           = slice,
                                                    filter          = filter,
                                                    label           = label
                                                    )

        cols = columns
        args = matsims, cols, director
        thetable = director.retrieveComponent(
                                              'materialsimulation-table',
                                              factory     = "visual",
                                              args        = args,
                                              vault       = ['visuals']
                                              )
        if thetable is None:
            raise RuntimeError, 'failed to load visual "materialsimulation table"'
        # thetable = table(*args)
        thetable.oncellchanged = select(element=thetable).notify(
            event='row-changed',
            actor='matsimtable',
            routine='processRowChange')
        return thetable
    

    def view(self, director):
        type = self.inventory.type
        id = self.inventory.id

        if type == 'scatterers':
            actor = 'scatterer'
        elif type == 'sampleassemblies':
            actor = 'sampleassembly'
        else:
            actor = 'samplecomponent'
        return director.redirect(actor=actor, routine='view', id=id)


    def newSample(self, director):
        '''return a view for creating new sample

        return: luban document (not action)
        '''
        # temporarily connect to "scatterer editor"
        return self.newScatterer(director)


    def newScatterer(self, director):
        '''create a new scatterer and return a view of this new scatterer

        return: luban document (not action)
        '''
        return director.redirect(
            actor='scatterer', routine='createNewScattererAndCreateView')


    def _domaccess(self, director):
        return director.retrieveDOMAccessor('sample')


    def _defaults(self):
        super(Actor, self)._defaults()
        self.inventory.order_by = 'date'
        self.inventory.reverse_order = True
        return


    def __init__(self, name='sample'):
        super(Actor, self).__init__(name)
        return



columns = [ 'selected', 'id', 'description', 'type', 'matter', 'date']
measure2dbcol = {
    'description': 'short_description',
    }
filtercols = columns[1:]


def actor(): return Actor()


# version
__id__ = "$Id$"

# End of file 

