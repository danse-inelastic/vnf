#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from luban.content import load, select

from luban.components.Actor import Actor as base


class Actor(base):


    class Inventory(base.Inventory):

        import pyre.inventory

        id = pyre.inventory.str('id')
        type = pyre.inventory.str('type')
    

    def view(self, director):
        matter = self._getMatter(director)
        
        from luban.content.Page import Page
        page = Page(title='Material %s' % matter.short_description)

        view = self.createView(director)
        page.add(view)
        
        return page
    
        
    def createView(self, director):
        visual = director.retrieveVisual('matter')

        matterviewdoc = visual.find(id='matterviewdoc')
        descriptiondoc = self.createDescriptionDoc(director)
        matterviewdoc.add(descriptiondoc)

        oldmatsimtab = visual.find(id='oldmatsimtab')
        simstablecontainer = oldmatsimtab.document(id='matsimstablecontainer')
        simstable = self.createSimsTable(director)
        simstablecontainer.add(simstable)

        newmatsimtab = visual.find(id='newmatsimtab')
        newmatsimscontainer = newmatsimtab.document(id='newmatsimscontainer')
        newsims = self.createNewSimButtons(director)
        newmatsimscontainer.add(newsims)
        return visual


    def createNewSimButtons(self, director):
        matter = self._getMatter(director)
        
        from luban.content.Document import Document
        doc = Document()
        
        simtables = simulationTables()
        from luban.content.Button import Button
        def _(table):
            label = table.__name__
            icon = 'material_simulations/%s.png' % label
            actor = 'material_simulations/%s' % (label.lower(), )
            return Button(
                label=label, icon=icon,
                onclick=load(
                    actor=actor, routine='new',
                    matter_type=matter.name, matter_id=matter.id)
                )

        buttons = map(_, simtables)
        map(doc.add, buttons)
        return doc


    def createSimsTable(self, director):
        matter = self._getMatter(director)
        sims = getallsimulations(matter=matter, db=director.clerk.db)

        args = sims, ['description', 'type', 'creationDate',], director
        #return table(*args)
        thetable = director.retrieveComponent(
            'materialsimulation-table',
            factory="visual", args=[sims, ['description', 'type', 'creationDate',], director],
            vault=['visuals'])

        return thetable


    def createDescriptionDoc(self, director):
        matter = self._getMatter(director)

        # cartesian lattice
        cl = matter.cartesian_lattice
        import numpy
        cl = numpy.array(cl)
        cl.shape = 3,3

        # atoms
        symbols = matter.atom_symbols
        n = len(symbols)
        coords = matter.fractional_coordinates
        coords = numpy.array(coords)
        coords.shape = n, 3
        atoms = [
            ' * %s: %s' % (symbol, coord)
            for symbol, coord in zip(symbols, coords)
            ]
        atoms = '\n'.join(atoms)

        subs = {
            'name': matter.short_description,
            'a': cl[0],
            'b': cl[1],
            'c': cl[2],
            'atoms': atoms,
            }
        subs['namebar'] = '='*len(subs['name'])
        description = '''
%(name)s
%(namebar)s

Lattice
"""""""

 * a = %(a)s
 * b = %(b)s
 * c = %(c)s


Atoms
"""""

%(atoms)s

        ''' % subs

        from luban.content.ReSTDocument import ReSTDocument
        descriptiondoc = ReSTDocument(text = description.split('\b'))
        
        return descriptiondoc


    def test(self, director):
        from luban.content.Page import Page
        page = Page(title='test')
        visual = director.retrieveVisual('matter')
        page.add(visual)
        return page
    
    
    def __init__(self, name='matter'):
        super(Actor, self).__init__(name)
        return

    # db access
    def _getMatter(self, director):
        type = self.inventory.type
        id = self.inventory.id
        return director.clerk.getRecordByID(type, id)


def simulationTables():
    from vnf.dom import materialsimulationtables, materialmodelingtables
    tables = materialsimulationtables()# + materialmodelingtables()
    return tables


def getallsimulations(matter, db, **opts):
    tables = simulationTables()

    computations = []
    for table in tables:
        computations += matter.getReferences(db, table, 'matter', **opts)
        continue
    
    return computations


def actor(): return Actor()



# version
__id__ = "$Id$"

# End of file 

