#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from luban.content import load, select

from luban.components.Actor import Actor as base


class Actor(base):


    class Inventory(base.Inventory):

        import pyre.inventory

        # in case of working with one matter
        id = pyre.inventory.str('id')
        type = pyre.inventory.str('type')
        description = pyre.inventory.str('description')

        # in case of working with a list
        number_records_per_page = pyre.inventory.int(name='number_records_per_page', default=20)
        page_number = pyre.inventory.int(name='page_number', default=0)
        order_by = pyre.inventory.str(name='order_by', default='id')
        reverse_order = pyre.inventory.bool(name='reverse_order', default=0)
        filter_expr = pyre.inventory.str(name='filter_expr')


    def default(self, director):
        return self.showListView(director)


    def showListView(self, director):
        from luban.content.FormSelectorField import FormSelectorField
        from luban.content.FormTextField import FormTextField
        
        # parameters
        order_by = self.inventory.order_by or None
        reverse_order = self.inventory.reverse_order
        filter_expr = self.inventory.filter_expr
        number_records_per_page = self.inventory.number_records_per_page
        page_number = self.inventory.page_number
        slice = [page_number*number_records_per_page, (page_number+1)*number_records_per_page]
        # XXX
        # filter_expr ....
        # filters = ...

        # create a container
        from luban.content.Document import Document
        from luban.content.Splitter import Splitter
        from luban.content.Link import Link
        view = Document(id='matter-list-view')

        # controls
        controls = Splitter(orientation='horizontal', id='matter-table-controls')
        view.add(controls)
        # sorting
        sorting_container = controls.section(id='matter-table-sorting-control-container')
        entries = [
            ('id', 'ID'),
            ('short_description', 'Description'),
            ('chemical_formula', 'Chemical_formula'),
            ('date', 'Date created'),
            ]
        selector = FormSelectorField(
            label = 'Sort by: ',
            entries=entries,
            selection=order_by or '',
            id='matter-table-order_by')
        selector.onchange = load(
            actor='matter', routine='showListView',
            number_records_per_page = number_records_per_page,
            page_number = 0,
            order_by = select(element=selector).formfield('getSelection'),
            reverse_order = reverse_order,
            filter_expr = filter_expr,
            )
        sorting_container.add(selector)
        # order reversing
        reverse_order_container = controls.section(id='matter-table-sorting-reversing-control-container')
        entries = [
            ('False', 'Low to High'),
            ('True', 'High to Low'),
            ]
        selector = FormSelectorField(
            label = 'Ordering: ',
            entries=entries,
            selection=reverse_order,
            id='matter-table-reverse_order')
        selector.onchange = load(
            actor='matter', routine='showListView',
            number_records_per_page = number_records_per_page,
            page_number = 0,
            reverse_order = select(element=selector).formfield('getSelection'),
            order_by = order_by,
            filter_expr = filter_expr,
            )
        reverse_order_container.add(selector)
        # filter
        filter_ctrl_container = controls.section(id='matter-table-filter-control-container')
        field = FormTextField(
            label = 'Filter: ',
            value = filter_expr,
            id='matter-table-filter')
        field.onchange = load(
            actor='matter', routine='showListView',
            number_records_per_page = number_records_per_page,
            page_number = 0,
            reverse_order = reverse_order,
            order_by = order_by,
            filter_expr = select(element=field).formfield('getValue'),
            )
        filter_ctrl_container.add(field)
        
        # navigation bar (previous, next...)
        # get a total count
        totalcount = self._countMatters(director, filter=filter_expr)
        if slice[1] > totalcount: slice[1] = totalcount
        lastpage = (totalcount-1)/number_records_per_page
        # 
        bar = Splitter(id='matter-table-navigation-bar')
        view.add(bar)
        #
        first = bar.section(id='matter-table-navigation-bar-first')
        if page_number>0:
            onclick=load(
                actor='matter', routine='showListView',
                page_number=0,
                number_records_per_page = number_records_per_page,
                order_by = order_by or '',
                reverse_order = reverse_order,
                filter_expr = filter_expr,
                )
            first.add(Link(label='first',onclick=onclick))
        else:
            first.paragraph(text='t', Class='hidden')
        left = bar.section(id='matter-table-navigation-bar-left')
        if page_number>0:
            onclick=load(
                actor='matter', routine='showListView',
                page_number=page_number-1,
                number_records_per_page = number_records_per_page,
                order_by = order_by or '',
                reverse_order = reverse_order,
                filter_expr = filter_expr,
                )
            left.add(Link(label='previous',onclick=onclick))
        else:
            left.paragraph(text='t', Class='hidden')
        #
        text = '%s-%s of %s' % (slice[0]+1, slice[1], totalcount)
        bar.section(id='matter-table-navigation-bar-middle').paragraph(text=text)
        #
        right = bar.section(id='matter-table-navigation-bar-right')
        if page_number < lastpage:
            onclick=load(
                actor='matter', routine='showListView',
                page_number=page_number+1,
                number_records_per_page = number_records_per_page,
                order_by = order_by or '',
                reverse_order = reverse_order,
                filter_expr = filter_expr,
                )
            right.add(Link(label='next',onclick=onclick))
        else:
            right.paragraph(text='t', Class='hidden')
        last = bar.section(id='matter-table-navigation-bar-last')
        if page_number < lastpage:
            onclick=load(
                actor='matter', routine='showListView',
                page_number=lastpage,
                number_records_per_page = number_records_per_page,
                order_by = order_by or '',
                reverse_order = reverse_order,
                filter_expr = filter_expr,
                )
            last.add(Link(label='last',onclick=onclick))
        else:
            last.paragraph(text='t', Class='hidden')
        
        # create a table
        table = self.createMatterTable(director, order_by=order_by, reverse_order=reverse_order, slice=slice, filter=filter_expr)
        view.add(table)
        #
        return select(id='main-display-area').replaceContent(view)


    def createMatterTable(self, director, order_by=None, reverse_order=None, slice=None, filter=None):
        matters = self._getMatters(director, filter=filter, order_by=order_by, reverse_order=reverse_order, slice=slice)

        cols = [ 'id', 'description', 'type', 'chemical_formula', 'created']
        args = matters, cols, director
        thetable = director.retrieveComponent(
            'matter-table',
            factory="visual", args=args,
            vault=['visuals'])
        thetable.oncellchanged = select(element=thetable).notify(
            event='row-changed', actor='mattertable', routine='processRowChange')
        return thetable
    

    def view(self, director):
        matter = self._getMatter(director)
        
        from luban.content.Page import Page
        page = Page(title='Material %s' % matter.short_description)

        view = self.createView(director)
        page.add(view)
        
        return page


    def showMaterialView(self, director):
        view = self.createView(director)
        return select(id='main-display-area').replaceContent(view)
    
        
    def createView(self, director):
        visual = director.retrieveVisual('matter')

        matter = self._getMatter(director)
        title = matter.short_description or matter.id
        visual.find(id='matterdoc-title').document(title=title)
        if not matter.short_description:
            visual.find(id='matterdoc-title-extra').add(
                self.createMatterDescriptionInputControl(director))
        
        matterviewdoc = visual.find(id='matterviewdoc')
        descriptiondoc = self.createDescriptionDoc(director)
        matterviewdoc.add(descriptiondoc)

        oldmatsimtab = visual.find(id='oldmatsimtab')
        simstablecontainer = oldmatsimtab.document(id='matsimstablecontainer')
        simstable = self.createSimsTable(director)
        simstablecontainer.add(simstable)

        newmatsimtab = visual.find(id='newmatsimtab')
        newmatsimscontainer = newmatsimtab.document(id='newmatsimscontainer')
        newsims = self.createNewSimButtons(director)
        newmatsimscontainer.add(newsims)
        return visual


    def createMatterDescriptionInputControl(self, director):
        from luban.content.Splitter import Splitter
        from luban.content.Link import Link
        from luban.content.FormTextField import FormTextField
        doc = Splitter(id='matter-description-editor-container')

        left = doc.section()
        label = 'You may want to consider give this material a name'
        link = Link(label=label)
        left.add(link)

        right = doc.section()
        field = FormTextField(
            id = 'matter-description-input',
            hidden = 1,
            )
        field.onchange = load(
            actor='matter', routine='changeDescriptionAndUpdateMatterView',
            id = self.inventory.id, type = self.inventory.type,
            description = select(element=field).formfield('getValue')
            )
        right.add(field)

        left.onclick = [select(element=link).hide(), select(element=field).show()]
        return doc


    def changeDescriptionAndUpdateMatterView(self, director):
        self.changeDescription(director)
        return self.showMaterialView(director)


    def changeDescription(self, director):
        matter = self._getMatter(director)
        matter.short_description = self.inventory.description
        director.clerk.updateRecordWithID(matter)
        return


    def createNewSimButtons(self, director):
        matter = self._getMatter(director)
        
        from luban.content.Document import Document
        doc = Document()
        
        simtables = simulationTables()
        from luban.content.Button import Button
        def _(table):
            label = table.__name__
            icon = 'material_simulations/%s.png' % label
            actor = 'material_simulations/%s' % (label.lower(), )
            return Button(
                label=label, icon=icon,
                onclick=load(
                    actor=actor, routine='new',
                    matter_type=matter.name, matter_id=matter.id)
                )

        buttons = map(_, simtables)
        map(doc.add, buttons)
        return doc


    def createSimsTable(self, director):
        matter = self._getMatter(director)
        sims = getallsimulations(matter=matter, db=director.clerk.db)

        args = sims, ['description', 'type', 'creationDate',], director
        #return table(*args)
        thetable = director.retrieveComponent(
            'materialsimulation-table',
            factory="visual", args=args,
            vault=['visuals'])

        return thetable


    def createDescriptionDoc(self, director):
        matter = self._getMatter(director)

        # cartesian lattice
        cl = matter.cartesian_lattice
        import numpy
        cl = numpy.array(cl)
        cl.shape = 3,3

        # atoms
        symbols = matter.atom_symbols
        n = len(symbols)
        coords = matter.fractional_coordinates
        coords = numpy.array(coords)
        coords.shape = n, 3
        atoms = [
            ' * %s: %s' % (symbol, coord)
            for symbol, coord in zip(symbols, coords)
            ]
        atoms = '\n'.join(atoms)

        subs = {
            'name': matter.short_description,
            'a': cl[0],
            'b': cl[1],
            'c': cl[2],
            'atoms': atoms,
            }
        subs['namebar'] = '='*len(subs['name'])
        description = '''
%(name)s
%(namebar)s

Lattice
"""""""

 * a = %(a)s
 * b = %(b)s
 * c = %(c)s


Atoms
"""""

%(atoms)s

        ''' % subs

        from luban.content.ReSTDocument import ReSTDocument
        descriptiondoc = ReSTDocument(text = description.split('\b'))
        
        return descriptiondoc


    def test(self, director):
        from luban.content.Page import Page
        page = Page(title='test')
        visual = director.retrieveVisual('matter')
        page.add(visual)
        return page
    
    
    def __init__(self, name='matter'):
        super(Actor, self).__init__(name)
        return

    # db access
    def _getMatter(self, director):
        type = self.inventory.type
        id = self.inventory.id
        return director.clerk.getRecordByID(type, id)


    def _countMatters(self, director, filter=None):
        from vnf.dom import mattertables
        tables = mattertables()
        db = director.clerk.db
        q = db.query(tables[0])
        if filter:
            q = q.filter(filter)
        for t in tables[1:]:
            q1 = db.query(t)
            if filter:
                q1 = q1.filter(filter)
            q = q.union(q1)
        return q.count()


    def _getMatters(self, director, filter=None, order_by=None, reverse_order=None, slice=None):
        # this implementation does not work when order_by=Type
        self._debug.log('filter: %r, order_by: %r, slice: %r' % (filter, order_by, slice))
        from vnf.dom import mattertables
        tables = mattertables()
        db = director.clerk.db
        q = db.query(tables[0])
        if filter:
            q = q.filter(filter)
        for t in tables[1:]:
            q1 = db.query(t)
            if filter:
                q1 = q1.filter(filter)
            q = q.union(q1)
        if order_by:
            q = q.order_by(order_by)
        if slice:
            if reverse_order:
                n = self._countMatters(director, filter=filter)
                slice = n-slice[1], n-slice[0]
            q = q.slice(*slice)
        records = q.all()
        def _(r):
            pointer = r.globalpointer.dereference(db)
            return pointer.getPointed(db)
        ret = map(_, records)
        if reverse_order: ret.reverse()
        return ret


def simulationTables():
    from vnf.dom import materialsimulationtables, materialmodelingtables
    tables = materialsimulationtables()# + materialmodelingtables()
    return tables


def getallsimulations(matter, db, **opts):
    tables = simulationTables()

    computations = []
    for table in tables:
        computations += matter.getReferences(db, table, 'matter', **opts)
        continue
    
    return computations


def actor(): return Actor()


# version
__id__ = "$Id$"

# End of file 

