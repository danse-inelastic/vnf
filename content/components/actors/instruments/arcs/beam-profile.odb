#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2010  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from luban.content import load, select, alert
import luban.content as lc



from luban.components.AuthorizedActor import AuthorizedActor as base


class Actor(base):


    class Inventory(base.Inventory):

        import pyre.inventory

        id = pyre.inventory.str('id')
        
        formids = pyre.inventory.list('formids')
        viewid = pyre.inventory.str('viewid')
        

    def update(self, director):
        # check if there are unfilled forms
        actions = self._checkForms(director)
        if actions: return actions
        
        # check if we have results, if yes, show them
        if self._hasResults(director):
            return self.showResults(director)
        
        return self.prepareSimulation(director)


    def _hasResults(self, director):
        return False


    def prepareSimulation(self, director):
        #
        loadjobeditor = lambda id: select(id='output').replaceContent(
            load(
                actor='job', 
                routine='createEditPanel',
                id = id,
                )
            )
        
        #
        id = self.inventory.id
        from vnfb.dom.neutron_experiment_simulations.integrated.arcs.ARCSbeam import ARCSbeam_Table
        computation = director.clerk.db.query(ARCSbeam_Table).filter_by(id=id).one()
        
        # if there is already a job, just edit it
        job = computation.getJob(director.clerk.db)
        if job: 
            return loadjobeditor(job.id)
        
        # create new job
        from vnfb.utils.job import new
        job = new(director)
        
        # assign computation
        job.computation = computation
        
        # update
        director.clerk.updateRecordWithID(job)
        
        return loadjobeditor(job.id)
    

    def _checkForms(self, director):
        actions = []; messages = []
        formids = self.inventory.formids
        actions += [select(id=id).addClass('highlighted') for id in formids]
        n = len(formids)
        if n > 1:
            msg = 'sorry. there are %s forms to submit.' % n
        else:
            msg = 'sorry. there is a form to submit.'
        msg += 'Please look for highlighted sections.'
        messages.append(msg)

        if len(actions):
            actions.append(alert('\n\n'.join(messages)))
            return actions


    def __init__(self, name='instruments/arcs/beam-profile'):
        super(Actor, self).__init__(name)
        return



def actor(): return Actor()


# version
__id__ = "$Id$"

# End of file 

