#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2010  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from luban.content import load, select, alert
import luban.content as lc


from vnf.content.actors.instruments.arcs.AppActorBase import AppActorBase as base
class Actor(base):


    class Inventory(base.Inventory):

        import pyre.inventory

        id = pyre.inventory.str('id')
        
        formids = pyre.inventory.list('formids')
        viewid = pyre.inventory.str('viewid')

        histogram = pyre.inventory.str('histogram')


    def _createViewTitle(self, director):
        """return title for the view of one computation"""
        return 'ARCS iqe resolution #%s' % self.inventory.id


    def _getComputation(self, director):
        # load the computation from db
        id = self.inventory.id
        from vnf.dom.neutron_experiment_simulations.integrated.arcs.ARCSIQEResolutionComputation import ARCSIQEResolutionComputation_Table as Table
        computation = director.clerk.db.query(Table).filter_by(id=id).one()
        return computation
    

    def _visualFactory(self, director):
        """create visual factory"""
        from vnf.content.visuals.instruments.arcs import iqeresolution as VF
        return VF(name='iqe-resolution', director=director, actor=self.name)
    

    def __init__(self, name='instruments/arcs/iqe-resolution'):
        super(Actor, self).__init__(name=name)
        self.ormactorname = "orm/arcsiqeresolutioncomputations"
        self.tablename = "arcsiqeresolutioncomputations"
        return



def actor(): return Actor()


# version
__id__ = "$Id$"

# End of file 

