#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2010  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


#
import luban.content as lc
from luban.content import select, load, alert

#
import luban.orm
from vnf.dom.neutron_experiment_simulations.integrated.arcs.ARCSbeam import ARCSbeam, ARCSbeam_Table
base = luban.orm.object2actor(ARCSbeam)
class Actor(base):
    
    class Inventory(base.Inventory):
        
        import luban.inventory
        

    def store(self, director):
        # after store, need to check if the parameters
        # are already used in simulations. if that is true,
        # we actually remove the stored record, and load
        # the old record
        super(Actor, self).store(director)
        obj = self._load(director)
        # look for the old record
        kwds = {}
        for key in ARCSbeam.key_props:
            value = getattr(obj, key)
            kwds[key] = value
            continue
        db = director.clerk.db
        orm = director.clerk.orm
        records = db.query(ARCSbeam_Table).filter_by(**kwds).all()
        if len(records)>1:
            for r in records:
                if r.id != orm(obj).id:
                    self.inventory.id = r.id
            orm.destroy(obj)
        return


    def _postStoringUserInputs(self, director):
        action = super(Actor, self)._postStoringUserInputs(director)
        actions = [
            action,
            select(id='idholder').setAttr(text= self.inventory.id),
            ]
        return actions


    def _defaults(self):
        super(Actor, self)._defaults()
        self.inventory.editlink = False
        return
        


def actor():
    return Actor('orm/arcsbeamconfigurations')


# version
__id__ = "$Id$"

# End of file 
