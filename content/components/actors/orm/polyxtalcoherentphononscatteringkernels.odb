#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


import luban.content as lc
from luban.content import select, load, alert


from vnfb.dom.scattering_kernels.ins.PolyXtalCoherentPhononScatteringKernel import PolyXtalCoherentPhononScatteringKernel

from luban.components.Actor import Actor
import luban.orm
base = luban.orm.object2actor(PolyXtalCoherentPhononScatteringKernel)
from vnfb.components.scattering_kernels.KernelOrmActorHelper import helper
class Actor(helper(PolyXtalCoherentPhononScatteringKernel), base):

    class Inventory(base.Inventory):

        import luban.inventory


    def getSelectorEntriesForReference(self, director):
        refname = self.inventory.refname
        if refname == 'dispersion':
            return self.getSelectorEntriesForDispersion(director)
        return super(Actor, self).getSelectorEntriesForReference(director)


    def getSelectorEntriesForDispersion(self, director):
        # the kernel
        kernel = self._load(director)
        # the matter
        orm = director.clerk.orm
        matter = orm(kernel.matter)
        # the dispersions
        phonondomaccess = director.retrieveDOMAccessor('phonon')
        disps = phonondomaccess.getDispersions(matter)
        entries = [(disp.id, disp.short_description or disp.id) for disp in disps]
        return entries
    


def actor():
    return Actor('orm/polyxtalcoherentphononscatteringkernels')


# version
__id__ = "$Id$"

# End of file 
