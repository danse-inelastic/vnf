#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


import luban.content as lc
from luban.content import select, load, alert


from vnfb.dom.scattering_kernels.ins.PolyXtalCoherentPhononScatteringKernel import PolyXtalCoherentPhononScatteringKernel

from luban.components.Actor import Actor
import luban.orm
base = luban.orm.object2actor(PolyXtalCoherentPhononScatteringKernel)
from vnfb.components.scattering_kernels.KernelOrmActorHelper import helper
class Actor(helper(PolyXtalCoherentPhononScatteringKernel), base):

    class Inventory(base.Inventory):

        import luban.inventory


    def createGraphicalView(self, director):
        kernel = self._load(director)
        orm = director.clerk.orm

        doc = lc.document(Class='container')
        sp = doc.splitter()
        left = sp.section()
        right = sp.section()
        
        properties_view = left.document(title="Properties")
        properties_view.add(self.displayProperties(director))

        disp_doc = right.document(title='Phonons')
        phonons = kernel.phonons
        if phonons is None:
            disp_doc.paragraph('this kernel does not have a phonons yet!')
        else:
            dispid = orm(phonons).id
            dispview = director.redirect(
                actor='orm/phonons', routine='createGraphicalView',
                id = dispid, include_credential=False)
            disp_doc.add(dispview)
        
        return doc


    def _getInputErrors(self):
        e = super(Actor, self)._getInputErrors()
        if e: return e
        phonons = self.inventory.phonons
        if not phonons:
            return {'phonons': 'have to select a phonons'}


    def store(self, director):
        #
        ret = super(Actor, self).store(director)

        #
        kernel = self._load(director)
        orm = director.clerk.orm
        record = orm(kernel)

        #
        phonons = self.inventory.phonons
        phonons = orm.db.fetchRecordUsingUniqueIdentifierStr(phonons)

        #
        record.phonons = phonons
        orm.db.updateRecord(record)
        return ret
    

    def getSelectorEntriesForReference(self, director):
        refname = self.inventory.refname
        if refname == 'phonons':
            return self.getSelectorEntriesForPhonons(director)
        return super(Actor, self).getSelectorEntriesForReference(director)


    def getSelectorEntriesForPhonons(self, director):
        # the kernel
        kernel = self._load(director)
        # the matter
        orm = director.clerk.orm
        matter = orm(kernel.matter)
        # the phononss
        phonondomaccess = director.retrieveDOMAccessor('phonon')
        disps = phonondomaccess.getPhonons(matter)
        entries = [(disp.id, disp.short_description or disp.id) for disp in disps]
        return entries
    


def actor():
    return Actor('orm/polyxtalcoherentphononscatteringkernels')


# version
__id__ = "$Id$"

# End of file 
