#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#



#
import luban.content as lc
from luban.content import select, load, alert


#
from vnfb.dom.Histogram import Histogram

from luban.components.Actor import Actor
import luban.orm
base = luban.orm.object2actor(Histogram)
class Actor(base):

    class Inventory(base.Inventory):

        import pyre.inventory


    def createGraphicalView(self, director):
        domaccess = self._domaccess(director)
        id = self.inventory.id
        histogram = domaccess.getRecord(id)
        histogram = domaccess.getData(histogram)
        data = histogram.data
        dim = data.dimension()

        title = 'Histogram %s: I(%s)' % (
            id,
            ','.join(['%s(%s)' % (axis.name(), axis.unit()) for axis in data.axes()]),
            )
        doc = lc.document(Class='container', title=title, collapsable=True)
        
        if dim==1:
            p = lc.plot2d(); doc.add(p)
            x = list(data.axes()[0].binCenters())
            y = list(data.I)
            p.curve(x=x,y=y)
        elif dim == 2:
            p = director.retrieveVisual(
                'histogram/imageplot',
                histogram=data,
                director=director,
                )
            doc.add(p)
        else:
            raise NotImplementedError

        url = '%s?content=attachment&actor=orm/histograms&routine=download&actor.id=%s&sentry.username=%s&sentry.ticket=%s' % (
            director.weaver.controllerurl,
            id,
            director.sentry.username,
            director.sentry.ticket,
            )
        download_link = lc.htmldocument()
        download_link.text = [
            '<a href="%s" target="_blank">download</a>' % url
            ]
        doc.add(download_link)

        return doc

    
    def download(self, director):
        id = self.inventory.id
        domaccess = self._domaccess(director)
        histogram = domaccess.getRecord(id)
        histogram = domaccess.getData(histogram)
        data = histogram.data
        dim = data.dimension()

        filepath = '%s.dat' % data.name()
        filepath = 'h.dat'
        header = [
            "Content-Type: application/octet-stream\r\n",
            'Content-Disposition: attachment; filename=%s\r\n' % filepath,
            ]
        header = ''.join(header) + '\n'

        content = []
        if dim == 1:
            xs = data.axes()[0].binCenters()
            ys = data.I
            for x,y in zip(xs, ys):
                content.append('%s\t%s' % (x,y))
                continue
        else:
            content.append('not implemented')
        
        content = '\n'.join(content)
        
        return header + content
    

    def _domaccess(self, director):
        return director.retrieveDOMAccessor('histogram')



def actor():
    return Actor('orm/histograms')


# version
__id__ = "$Id$"

# End of file 
