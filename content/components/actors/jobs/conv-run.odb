#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

import time

import os
from luban.content.ProgressBar import ProgressBar
from luban.content import load, select
from vnfb.utils import launch_detached, bindir
from vnfb.qeutils.qeutils import latestJob
from vnfb.qeutils.qeconst import JOB_STATE, TASK_ACTION

import luban.content as lc
from vnfb.qeutils.qeconst import ID_CONV_JOBS
from vnfb.qeutils.qeutils import convJobId, convJobRowId

from luban.components.AuthorizedActor import AuthorizedActor as base
class Actor(base):

    class Inventory(base.Inventory):
        import pyre.inventory
        id          = pyre.inventory.str('id', default='')      # Simulation Id
        paramid     = pyre.inventory.str('paramid', default='')

        rownum      = pyre.inventory.int('rownum', default=0)
        colnum      = pyre.inventory.int('colnum', default=0)
        # Temp
        number      = pyre.inventory.int('number', default=0)


    def default(self, director):
        "Not implemented"
        pass


    def run(self, director):
        "Submit job to the computing nodes. Trace job status."
        jTable          = lc.document()
        splitter        = jTable.splitter(orientation="vertical")
        self._jobTitle(splitter)
        self._jobTable(director, splitter)

        return [select(id=ID_CONV_JOBS).replaceContent(jTable),
                load(actor      ='jobs/conv-run',
                      routine   = 'addRow',
                      id        = self.id,
                      paramid   = self.paramid)]


    def _jobTitle(self, splitter):
        sP          = splitter.section(id="qe-tasks-label")
        sP.add(lc.paragraph(text="Convergence Jobs", Class="qe-section-inline"))
        sP.add(lc.document(Class="clear-both"))


    def _jobTable(self, director, splitter):
        visual   = 'material_simulations/espresso-convergence/table-jobs'
        sT          = splitter.section()                        # path indicator
        table       = director.retrieveVisual(  visual,
                                                director,
                                                id      = self.id,
                                                paramid = self.paramid,
                                                part    = "header")
        sT.add(table)

    
    def addRow(self, director):
        visual   = 'material_simulations/espresso-convergence/table-jobs'
        row         = director.retrieveVisual(  visual,
                                                director,
                                                id      = self.id,
                                                paramid = self.paramid,
                                                rownum  = self.rownum)
        action      = []
        action.append(select(id=convJobRowId(self.rownum)).replaceContent(row))
        action.append(load(actor    ='jobs/conv-run',
                          routine   = 'setCell',
                          id        = self.id,
                          paramid   = self.paramid,
                          number    = self.number + 1,
                          rownum    = self.rownum))

        return action


    def setCell(self, director):
        action      = []
        action.append(select(id=convJobId(self.rownum, self.colnum)).replaceContent(str(self.number)))
        if self.colnum < 4:
            action.append(load(actor    ='jobs/conv-run',
                              routine   = 'setCell',
                              id        = self.id,
                              paramid   = self.paramid,
                              colnum    = self.colnum + 1,
                              number    = self.number + 1,
                              rownum    = self.rownum))

        if (self.colnum + 1) % 5 == 0 and self.rownum < 1:
            action.append(load(actor      ='jobs/conv-run',
                              routine   = 'addRow',
                              id        = self.id,
                              paramid   = self.paramid,
                              number    = self.number,
                              rownum    = self.rownum + 1))

        return action


    def testReplace(self, director):
        row       = director.retrieveVisual(    self._tVisual,
                                                director,
                                                id      = self.id,
                                                paramid = self.paramid)

        import time
        time.sleep(5)

        return select(id="hello").replaceContent(row)


    def __init__(self):
        super(Actor, self).__init__(name='jobs/submit')


    def _configure(self):
        super(Actor, self)._configure()
        self.id         = self.inventory.id
        self.paramid    = self.inventory.paramid

        self.rownum     = self.inventory.rownum
        self.colnum     = self.inventory.colnum

        self.number     = self.inventory.number

    def _init(self):
        super(Actor, self)._init()

def actor():
    return Actor()


__date__ = "$May 2, 2010 10:42:56 AM$"


