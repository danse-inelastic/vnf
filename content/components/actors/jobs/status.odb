#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

from vnfb.qeutils.qeutils import key2str
from vnfb.qeutils.qescheduler import schedulerfactory
from vnfb.qeutils.qeconst import ID_OUTPUT, ID_STATUS

import luban.content as lc
from luban.content import select
from luban.components.AuthorizedActor import AuthorizedActor as base

#ID_STATUS   = "qe-container-status"

class Actor(base):
    """
    Actor for retrieving results from server
    Notes:
        - See also
    """

    class Inventory(base.Inventory):
        import pyre.inventory
        id          = pyre.inventory.str('id', default='')      # Simulation Id
        taskid      = pyre.inventory.str('taskid', default='')
        jobid       = pyre.inventory.str('jobid', default='')   # Not passed at this time
        linkorder   = pyre.inventory.str('linkorder', default='')


    def refreshStatus(self, director):
        "Refresh job status and output file"
        status  = lc.htmldocument(text=self._retrieveStatus(director))
        output  = lc.htmldocument(text=self._retrieveOutput(director))

        return [select(id=self._statusId()).replaceContent(status),
                select(id=self._outputId()).replaceContent(output)]


    def _retrieveStatus(self, director):
        "Retrieve job status from cluster"
        job     = director.clerk.getQEJobs(id = self.jobid)
        server  = director.clerk.getServers(id = job.serverid)
        torqueFactory   = schedulerfactory(server)    # vnfb.clusterscheduler.qetorque.Scheduler
        jobpath = director.dds.abspath(job, server=server)
        launch  = lambda cmd: director.csaccessor.execute(
                                                        cmd,
                                                        server,
                                                        jobpath,
                                                        suppressException=True)

        torque  = torqueFactory(launch)
        status  = torque.status(torque.jobId())

        if status["state"] == "terminated":
            return "Finished"
        
        str     = key2str(status["state"])
        if status.has_key("runtime") and status["state"] == "running":
            str     += " (%s) " % status["runtime"]

        self._updateJobStatus(director, str)

        return str

    
    def _updateJobStatus(self, director, str):
        "Updates job status"

        job     = director.clerk.getQEJobs(id=self.jobid)
        job.setDirector(director)
        job.updateRecord({"status": str,})
        

    def _retrieveOutput(self, director):
        "Retrieve output file"
        
        return "Output"

    def __init__(self):
        super(Actor, self).__init__(name='jobs/status')

        return


    def _statusId(self):
        return "%s-%s" % (ID_STATUS, self.linkorder)


    def _outputId(self):
        return "%s-%s" % (ID_OUTPUT, self.linkorder)


    def _configure(self):
        super(Actor, self)._configure()
        self.id         = self.inventory.id
        self.taskid     = self.inventory.taskid
        self.jobid      = self.inventory.jobid
        self.linkorder  = self.inventory.linkorder


    def _init(self):
        super(Actor, self)._init()
        self._files = []
        return

def actor():
    return Actor()

    

__date__ = "$Feb 10, 2010 1:21:35 PM$"


