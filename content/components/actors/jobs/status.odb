#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

#import os
#import re
#from vnfb.qeutils.qeutils import key2str, jobStatus, dataroot, makedirs
#from vnfb.qeutils.message import Message

from vnfb.qeutils.jobstatus import JobStatus
from vnfb.qeutils.qeconst import ID_OUTPUT, ID_STATUS

import luban.content as lc
from luban.content import select
from luban.components.AuthorizedActor import AuthorizedActor as base

NONE    = "None"

class Actor(base):
    """
    Actor for retrieving results from server
    """

    class Inventory(base.Inventory):
        import pyre.inventory
        id          = pyre.inventory.str('id', default='')      # Simulation Id
        taskid      = pyre.inventory.str('taskid', default='')
        jobid       = pyre.inventory.str('jobid', default='')   # Not passed at this time
        linkorder   = pyre.inventory.int('linkorder', default=0)


    def refreshStatus(self, director):
        "Refresh job status and output file"
#        job     = director.clerk.getQEJobs(id = self.jobid)
#        server  = director.clerk.getServers(id = job.serverid)
#        job.setDirector(director)

        jobstatus   = JobStatus(director, self.id, self.linkorder)
        status      = lc.htmldocument()
        status.text = jobstatus.updatedStatus() #self._retrieveStatus(director, job, server)
        output      = lc.document()
        output.add(jobstatus.updatedOutput(output))    #self._retrieveOutput(director, job, server, output))

        return [select(id=self._statusId()).replaceContent(status),
                select(id=self._outputId()).replaceContent(output)]


#    def _retrieveStatus(self, director, job, server):
#        "Retrieve job status from cluster"
#        status  = jobStatus(director, job, server)
#
#        if not status:
#            return "Unknown"
#
#        if status["state"] == "terminated":
#            state   = "Finished"
#            self._updateJobStatus(job, state)
#            return state
#
#        str     = key2str(status["state"])
#        if status.has_key("runtime") and status["state"] == "running":
#            str     += " (%s) " % status["runtime"]
#
#        self._updateJobStatus(job, str)
#        return str
#
#
#    def _updateJobStatus(self, job, str):
#        "Updates job status"
#        job.updateRecord({"status": str,})
        

#    # XXX: Refactor! Integrate with ResultPath class later!
#    def _retrieveOutput(self, director, job, server, content):
#        "Retrieve output file"
#        if not job:     # No job, no output
#            return NONE
#
#        jobpath     = director.dds.abspath(job, server=server)
#        localpath   = self._localpath(director, job)
#        cmd         = "ls %s" % jobpath  # list current job directory
#
#        failed, output, error = director.csaccessor.execute(cmd, server, jobpath, suppressException = True)
#        if failed or not localpath:      # Something went wrong
#            return NONE
#
#        filelist    = output.split()    # List of files, Example: ["4I2NPMY4pw.in", "4I2NPMY4pw.in.out", "run.sh", ...]
#        file        = self._matchCheck(filelist)
#
#        if not file:    # No output file
#            return NONE
#
#        try:
#            remotefile  = os.path.join(jobpath, file)   # File on remote server
#            director.csaccessor.getfile(server, remotefile, localpath)
#        except:
#            return NONE
#
#        outputfile  = os.path.join(localpath, file)
#        if not os.path.exists(outputfile):  # No file on local server
#            return NONE
#
#        dialog  = lc.dialog(title='Output for %s' % self.taskid, autoopen=True, Class="qe-dialog-output")
#        text    = lc.htmldocument(text="<pre>%s<pre>" % open(outputfile).read())
#        dialog.add(text)   # Text
#        okbutton = lc.button( label     = 'OK',
#                              onclick   = select(element=dialog).destroy())
#        dialog.add(okbutton)
#        return lc.link(label     = 'Output',
#                       onclick   = select(element=content).append(dialog))
#
#
#    def _localpath(self, director, job):
#        "Returns path to where the file will be transferred, create directory, if necessary"
#        # The reason to copy output file to tmp/ directory is that tmp/ is the only one that exposed for public
#        if not job:     # No job, no output
#            return None
#
#        tmpbase     = os.path.join(dataroot(director, relative=True), "tmp") # Example: ../content/data/tmp
#        jobpath     = os.path.join(tmpbase, job.name)   # ../content/data/tmp/qejobs
#        jobpath     = os.path.join(jobpath, job.id)     # ../content/data/tmp/qejobs/EXSWTYTK
#        if not os.path.exists(jobpath): # create directory, if necessary
#            makedirs(jobpath)
#
#        return jobpath  # Example: ../content/data/tmp/qejobs/EXSWTYTK
#
#
#    # Borrowed from ResultPath class
#    # XXX: Fix cardcoded pattern for output file
#    def _matchCheck(self, files):
#        "Find matching file. Single matching file if possible. Picks first otherwise"
#        REEXP   = '[\w]+\.in\.out$'
#        for fname in files:
#            p   = re.compile(REEXP)
#            if p.match(fname):   # matches
#                return fname
#
#        return None


    def __init__(self):
        super(Actor, self).__init__(name='jobs/status')

        return


    def _statusId(self):
        return "%s-%s" % (ID_STATUS, self.linkorder)


    def _outputId(self):
        return "%s-%s" % (ID_OUTPUT, self.linkorder)


    def _configure(self):
        super(Actor, self)._configure()
        self.id         = self.inventory.id
        self.taskid     = self.inventory.taskid
        self.jobid      = self.inventory.jobid
        self.linkorder  = self.inventory.linkorder


    def _init(self):
        super(Actor, self)._init()
        self._files = []
        return

def actor():
    return Actor()

    

__date__ = "$Feb 10, 2010 1:21:35 PM$"


