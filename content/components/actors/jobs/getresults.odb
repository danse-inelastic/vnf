#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

import os
from luban.content import load
from luban.content import select
import luban.content as lc
from luban.content.HtmlDocument import HtmlDocument
from vnf.applications.PackJobDir import PackJobDir
from vnfb.utils.qeconst import RESULTS_ID

from luban.components.AuthorizedActor import AuthorizedActor as base

class Actor(base):
    """
    Actor for retrieving results from server
    Notes:
        - See also 
    """

    class Inventory(base.Inventory):
        import pyre.inventory
        id          = pyre.inventory.str('id', default='')      # Simulation Id
        taskid      = pyre.inventory.str('taskid', default='')  
        jobid       = pyre.inventory.str('jobid', default='')   # Not passed at this time


    def default(self, director):
        "Not implemented"
        pass


    def retrieveStatus(self, director):
        link    = self._retrieveResults(director)
        task    = director.clerk.getQETasks(id = self.taskid)
        cid     = "%s-%s" % (RESULTS_ID, task.type) # results link
        
        return select(id=cid).replaceContent(link)


    def _retrieveResults(self, director):
        jobs    = director.clerk.getQEJobs(where = "taskid='%s'" % self.taskid)
        link    = "None"
        
        if len(jobs) == 0:  # Empty list
            return link
        
        job     = jobs[0]   # not None
        link    = lc.link()

        ptrfilepath = self._ptrfilepath(job, director)

        # if pointer file does not exists, need to start packing
        if not os.path.exists(ptrfilepath):
            self._startPacking(director, job)
            link.label  = "Started Packing"
            return link

        # if packing is in process, say that
        s = open(ptrfilepath).read()
        if s == PackJobDir.PACKINGINPROCESS:
            link.label  = "Packing In Progress"
            return link


        # Keep!
#        server      = director.clerk.getServers(id = sim.serverid)
#        jobmtime    = director.dds.getmtime(sim, server = server)   # Requires getmtime.py
#        ptrmtime    = os.path.getmtime(ptrfilepath)
#        if jobmtime > ptrmtime + 60*3: # 60*3 -- give 3 minute of delay
#            # if job directory is newer than the bar ball, pack again
#            self._startPacking(director, sim)
#            link.label  = "Started Packing Again"
#            return link

        link = self._tarballLink(job, ptrfilepath)

        return link


    def _tarballLink(self, job, ptrfilepath):
        text        = "%s.tgz" % job.id
        f           = open(ptrfilepath)
        localpath   = f.read().strip()
        path        = "tmp/%s" % localpath      # Example: "tmp/tmp31LUyu/44MTMA42.tgz"
        link        = HtmlDocument(text="<a href='%s'>%s</a>" % (path, text) )

        return link


    def _ptrfilepath(self, job, director):
        "Return pointer filename. e.g. 44MTMA42..__dir__pack__ptr__"
        PTRFILEEXT = PackJobDir.PTRFILEEXT
        return '.'.join( [director.dds.abspath(job), PTRFILEEXT] )
        

    def _startPacking(self, director, job):
        from vnf.components.Job import pack
        pack(job, director, debug=False)


    def formError(self, errors):
        return [
                select(id='%s-error-area' % key).replaceContent(value)
                    for key, value in errors.iteritems()
                ]

    def __init__(self):
        super(Actor, self).__init__(name='jobs/getresults')

        return


    def _configure(self):
        super(Actor, self)._configure()
        self.id         = self.inventory.id
        self.taskid     = self.inventory.taskid


    def _init(self):
        super(Actor, self)._init()
        self._files = []
        return

def actor():
    return Actor()


__date__ = "$Dec 17, 2009 11:39:10 AM$"


# ****************** DEAD CODE *************************

#        return self._packingInProgress(director, sim)
#    def _packingInProgress(self, director, input):
#        link    = Link(label="Packing", Class="action-link",
#                       onclick=load(actor      = "material_simulations/espresso/sim-view",
#                                     id         = self.id)
#                      )
#
#        return select(id='results-link').replaceContent(link)




