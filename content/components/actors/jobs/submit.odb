#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

from vnf.dom.QEJob import QEJob
from vnfb.utils.qeutils import makedirs, writefile
from vnfb.utils.qeconst import STATES, RUNSCRIPT
from vnfb.utils.qeutils import packname, unpackname

import os
from luban.content import load

from luban.components.AuthorizedActor import AuthorizedActor as base

class Actor(base):

    class Inventory(base.Inventory):
        import pyre.inventory
        id          = pyre.inventory.str('id', default='')  # Simulation Id
        taskid      = pyre.inventory.str('taskid', default='')


    def default(self, director):
        "Not implemented"
        pass
    

    def submit(self, director):
        """
        Submit simulation job
        The process of submission of simulation includes the following steps:
        1. Store configuration inputs to local disk storage
        2. Copy files to the computational cluster
        3. Submit Job
        """
        self._createJob(director)
        self._storeFiles(director)
        self._moveFiles(director)
        self._scheduleJob(director)

        return load(actor="material_simulations/espresso/sim-view",
                    id=self.id)


    def _createJob(self, director):
        "Create Job"
        self._sim   = director.clerk.getQESimulations(id = self.id)     # Should exist
        settings    = director.clerk.getQESettings(where = "simulationid='%s'" % self.id)   # Should exist
        setting     = settings[0]
        params  = {"taskid":        self.taskid,
                   "serverid":      self._sim.serverid,  # -> take from QESimulations
                   "status":        "Preparing",
                   "creator":        director.sentry.username,
                   "numberprocessors":   setting.numproc # -> take from QESettings
                   }
        job  = QEJob()
        job.setDirector(director)
        #job.createRecord(params)


    def _storeFiles(self, director):
        """TEMP SOLUTION: Stores files from configuration input strings """
        self._storeConfigurations(director)
        self._createRunScript(director)
        self._prepareFiles()


    def _storeConfigurations(self, director):
        "Store Configuration files"
        inputs  = director.clerk.getQEConfigurations(where = "taskid='%s'" % self.taskid)
        dds     = director.dds
        for input in inputs:
            fn          = input.filename
            pfn         = packname(self._sim.id, fn)            # E.g. 44XXJJG2ni.scf.in
            self._write2file(dds, input, fn, input.text)        # -> qeconfigurations directory
            self._write2file(dds, self._sim, pfn, input.text)   # -> qesimulations directory
            dds.remember(self._sim, pfn)     # Change object and filename?
            self._files.append(pfn)


    def _createRunScript(self, director):
        settings    = director.clerk.getQESettings(where = "simulationid='%s'" % self.id)   # Should exist
        inputs      = director.clerk.getQEConfigurations(where = "taskid='%s'" % self.taskid)
        setting     = settings[0]
        input       = inputs[0]

        # mpirun --mca btl openib,sm,self pw.x -npool 8 -inp  PW > PW.out
        words   = [ setting.executable,
                    setting.params,
                    "pw.x",
                    "-npool %s" % setting.npool,
                    "-inp",
                    packname(self._sim.id, input.filename),       # replace
                    ">",
                    packname(self._sim.id, "%s.out" % input.filename)    # replace
        ]
        
        cmds    = [ "#!/bin/env bash",   # Suppose there is bash available
                    " ".join(words)
        ]

        dds     = director.dds
        self._write2file(dds, self._sim, RUNSCRIPT, "\n".join(cmds))    # -> qesimulations directory
        dds.remember(self._sim, RUNSCRIPT)
        self._files.append(RUNSCRIPT)
        

    def _prepareFiles(self):
        pass


    def _write2file(self, dds, record, fname, content):
        """Writes content of the configuration input to file"""
        path        = dds.abspath(record)
        absfilename = dds.abspath(record, filename = fname)
        makedirs(path)
        writefile(absfilename, content)


    def _moveFiles(self, director):
        """
        Moves files from local server to the computational cluster.
        Files that need to be moved:
            - Configuration inputs
            - Simulation Settings
            - run.sh script (generate it first)
        Notes:
            - See also: submitjob.odb
        """
        dds     = director.dds
        server  = director.clerk.getServers(id = self._sim.serverid)

        dds.make_available(self._sim, server=server, files=self._files)


    def _scheduleJob(self, director):
        "Schedule job"
        dds     = director.dds
        from vnfb.utils.qescheduler import schedule
        schedule(self._sim, director)


    def __init__(self):
        super(Actor, self).__init__(name='jobs/submit')

        return


    def _configure(self):
        super(Actor, self)._configure()
        self.id         = self.inventory.id
        self.taskid     = self.inventory.taskid


    def _init(self):
        super(Actor, self)._init()
        self._files = []
        return

def actor():
    return Actor()


__date__ = "$Nov 4, 2009 9:27:51 AM$"


# ********************** DEAD CODE ***********************


#    def _storeSettings(self, director):
#        # Store Settings files. I don't really need to store to files.
#        # Instead use data to create run.sh
#        settings  = director.clerk.getQESettings(where = "simulationid='%s'" % self.id)
#        dds     = director.dds
#        for s in settings:
#            filename    = dds.abspath(s, filename = s.sname)
#            dds.remember(s, s.sname)     # Change object and filename?
#            self._write2file(dds, input, filename, input.text)




        #self.files  = []
        #self.files.append(input.filename)       # ??? Relative path, e.g. ni.scf.in
        #filename    = dds.abspath(input, filename = "run.sh")
        #content     =
        #self._writeContent(dds, input, filename, content)
        # FIXME
        #for f in self.files:
        # Should be local filename
        #dds.remember(inputs[0], 'PW')
            # for f in files: dds.remember(job, f) #?


# ********************** DEAD CODE ***********************

#from luban.content.Plot2D import Plot2D

#    def submit(self, director):
#        self.verify()
#        self.createRecord(director)
#        self.runSimulation(director)
#
#        return load(actor='jobs/submitted', routine='link')
#
#
#    def verify(self):
#        """Checks if all the components available to run the simulation"""
#        pass
#
#    def content(self, director):
#        document = Document(title='Job Submitted')
#        document.add(Paragraph(text="Your jobs was successfully submitted!"))
#        document.add(Link(label="All jobs", Class="action-link", onclick=load(actor="jobs/index", routine="link")))
#
#        return document
#
#
#    def pathlist(self, director):
#        self.pathlist = [("Home","greet","link"),
#                         ("Jobs", "jobs/index", "link"),
#                         ("Submitted", None, None) ]
#
#        return self.pathlist
#
#
#    # Create Job
#    def createRecord(self, director):
#        params  = { "userId": 1, "simulationId": self.id,
#                    "status": STATES["C"], "exitCode": 0,
#                    "numberProcessors": 8}
#        job     = Job()
#        job.createRecord(director, params)
#
##        package = PACKAGES[int(self.package)]
##        simtype = SIMULATIONS[int(self.simtype)]
##
##        params  = {"sname": self.sname, "package": package,
##                   "type": simtype, "description": self.description,
##                   "formula": self.formula, "isFavorite": True}
##        sim     = Simulation()
##        sim.createRecord(director, params)
#
#
#
#    # Temp methods for running simulation
#    def runSimulation(self, director):
#
#        self.runPWSimulation(director)
#        self.runPW_DOS(director)
#        self.createPWPlot(director)
#
#
#    # Run PW simulation
#    def runPWSimulation(self, director):
#        config      = director.clerk.getConfigurations(id=1)
#        configtext  = config.text
#
#        #infile  = EXPORT_ROOT + "/content/data/ni.scf.in" # Uses database
#        outfile = EXPORT_ROOT + "/output/ni.scf.out"
#
#        from vinil.utils import pw
#        configmod = self.setPWConfig(config=configtext)
#        pw.runPWSimulation(outfile, config=configmod)
#
#    # Sets pseudo_dir and outdir (hardcoded) and saves to the same file.
#    def setPWConfig(self, filename=None, config=None):
#        from vinil.utils.parser.qeinput import QEInput
#        qe = QEInput(filename, config)
#        qe.parse()
#        pd = qe.namelist('control')
#
#        pseudo_dir  = EXPORT_ROOT + "/content/data/"
#        outdir      = EXPORT_ROOT + "/content/temp/"
#        pd.editParam('pseudo_dir', "'%s'" % pseudo_dir)
#        pd.editParam('outdir',     "'%s'" % outdir)
#
#        if filename:
#            qe.save()
#            return
#
#        if config:
#            return qe.toString()
#
#
#    # Find electron DOS
#    def runPW_DOS(self, director):
#        config      = director.clerk.getConfigurations(id=4)
#        configtext  = config.text
#
#        #infile  = EXPORT_ROOT + "/content/data/ni.scf.dos.in" # Uses database
#
#        configmod = self.setPW_DOSConfig(config=configtext)
#        from vinil.utils import dos
#        dos.runPW_DOS(config=configmod)
#
#
#    def setPW_DOSConfig(self, filename=None, config=None):
#        from vinil.utils.parser.qeinput import QEInput
#        qe = QEInput(filename, config, type='dos')
#        qe.parse()
#        pd = qe.namelist('inputpp')
#
#        outdir      = EXPORT_ROOT + "/content/temp/"
#        fildos      = EXPORT_ROOT + "/output/ni.scf.dos.out"
#
#        pd.editParam('outdir', "'%s'" % outdir)
#        pd.editParam('fildos', "'%s'" % fildos)
#
#        if filename:
#            qe.save()
#            return
#
#        if config:
#            return qe.toString()
#
#
#
#    # Plot electron DOS
#    def createPWPlot(self, director):
#        infile      = EXPORT_ROOT + "/output/ni.scf.dos.out"
#        imagefile   = EXPORT_ROOT + "/html/images/plots/ni_scf_dos.png"
#
#        from vinil.utils import plot
#        plot.createPWPlot(infile, imagefile)
