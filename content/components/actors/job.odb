#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from luban.content import load, select


from luban.content.Form import Form
from luban.content.Document import Document


from luban.components.Actor import Actor as base


class Actor(base):


    class Inventory(base.Inventory):

        import pyre.inventory

        # the computation this job is for
        computation_type = pyre.inventory.str(name='computation_type')
        computation_id = pyre.inventory.str(name='computation_id')

        # job itself
        id = pyre.inventory.str(name='id')

        short_description = pyre.inventory.str(name = 'short_description', default = 1e6 )
        short_description.meta['label'] = 'Job description'
        short_description.meta['tip'] = (
            'Please give a short description for this job'
            )
        
        server = pyre.inventory.str( 'server', default = 'serverid' )
        server.meta['label'] = 'Computation server'
        server.meta['tip'] = (
            'Please choose the server on which the job will be run'
            )
        
        numprocessors = pyre.inventory.str( 'numprocessors', default = 1 )
        numprocessors.meta['label'] = 'Number of processors'
        numprocessors.meta['tip'] = (
            'Please input the number of processors'
            )
        numprocessors.meta['tiponerror'] = (
            'Please enter a positive integer'
            )

        walltime = pyre.inventory.str( 'walltime', default = 10)
        walltime.meta['label'] = 'Time limit (hours)'
        walltime.meta['tip'] = (
            'Please input a limit on the time your job will run. (Unit: hours)'
            )
        walltime.meta['tiponerror'] = (
            'Please enter a positive integer'
            )


    def default(self, director):
        return


    def create(self, director):
        computation = self._getComputation(director)
        # if there is already a job, we have a problem
        job = computation.getJob(director.clerk.db)
        if job: raise RuntimeError, "computation %s already has a job" % computation.id

        # create new job
        job = director.clerk.insertNewOwnedRecord('jobs')

        # assign computation
        job.computation = computation

        # update
        director.clerk.updateRecordWithID(job)
        
        self.inventory.id = job.id
        return self.edit(director)


    def edit(self, director):
        form = self.createEditForm(director)
        
        doc = Document(title='Job\ %s' % self.inventory.id)
        doc.add(form)

        return select(id='main-display-area').replaceContent(doc)


    def createEditForm(self, director):
        record = director.clerk.getRecordByID(Job, self.inventory.id)
        
        form = Form(id='job-edit-form')
        
        property = 'short_description'
        meta = getattr( self.Inventory, property ).meta
        field = form.text(
            id = 'short_description',
            name = 'short_description',
            label = meta['label'],
            value = record.short_description or \
            'job for %s' % _describe_computation
            (director.clerk.dereference(record.computation))
            )
        field.help = ' '.join( meta['tip'] )

        from vnf.dom.Server import Server
        servers = director.clerk.db.fetchall(Server)
        entries = [ (server.id, server.short_description) for server in servers ]
        ids = [ s.id for s in servers ]
        
        selected_server = record.server and record.server.id
        if selected_server not in ids: selected_server = entries[0][0]
        
        property = 'server'
        meta = getattr( self.Inventory, property ).meta
        selector = form.selector(
            id = 'server_selector',
            name = 'server',
            entries = entries,
            label = meta['label'],
            selection = selected_server,
            )
        selector.help = meta['tip']
        
        extra = {}
        if director.sentry.username == 'demo':
            # for demo user, we don't want them to use a lot of resources
            # so let us hide those fields for the resources
            extra['numprocessors'] = 1,
            extra['walltime'] = 1,

        else:
            property = 'numprocessors'
            meta = getattr( self.Inventory, property ).meta
            field = form.text(
                id = 'numprocessors',
                name = 'numprocessors',
                label = meta['label'],
                value = record.numprocessors,
                )
            field.help = meta['tip']

            property = 'walltime'
            meta = getattr( self.Inventory, property ).meta
            field = form.text(
                id = 'walltime',
                name = 'walltime',
                label = meta['label'],
                value = record.walltime,
                )
            field.help = meta['tip']

        form.submitbutton(label='submit')

        form.onsubmit = select(element=form).submit(
            actor = 'job', routine = 'verify',
            id = self.inventory.id, **extra)

        return form
    

    def _getComputation(self, director):
        type = self.inventory.computation_type
        id = self.inventory.computation_id
        return director.clerk.getRecordByID(type, id)


    def __init__(self, name='job'):
        super(Actor, self).__init__(name)
        return


def _describe_computation(computation):
    return '%s %s' % (computation.__class__.__name__, computation.id)



from vnf.dom.Job import Job

def actor(): return Actor()


# version
__id__ = "$Id$"

# End of file 

