# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
from vnfb.components.DOMAccessor import DOMAccessor as base

class Accessor(base):

    def __init__(self):
        super(Accessor, self).__init__('dynamics')
        return

    def _getOrm(self):
        orm = self.director.clerk.orm
        # build orm for all dynamics types--orm 
        #registers and stores these internally
#        from vnfb.dom.material_simulations.Phonons import PhononTable
#        from vnfb.dom.material_simulations.Motion import Motion
        from vsat.Phonons import Phonons
        from vsat.Motion import Motion
        orm(Phonons)
        orm(Motion)
        return orm
    orm = property(_getOrm)

    def getDynamicsRecord(self, type, id):
        orm = self.orm
        db = orm.db
        table = db.getTable(type)
        return db.query(table).filter_by(id=id).one()

    def getDynamics(self, id):
        for table in self.dynamicsTables():
            result = None
            try:
                result = db.query(table).filter_by(id=id).one()
            except:
                pass
            if result:
                dynamics = result
        return dynamics

    def getDynamics(self, type, id):
        return self.getRecordByID(type, id)

    def countDynamics(self, filter=None, label=None):
        db = self.db
        tables = self.dynamicsTables()
        qf = lambda table: self.makeQuery(table, filter=filter, label=label)
        qs = map(qf, tables)
        q = sqlalchemy.union_all(*qs)
        return q.alias('tocount').count().execute().fetchone()[0]
    
    def getDynamicsRecords(self, filter=None, order_by=None, 
                       reverse_order=None, slice=None, label=None):
        db = self.db
        self._debug.log('filter: %r, order_by: %r, slice: %r' % (filter, order_by, slice))
        tables = self.dynamicsTables()
        qf = lambda table: self.makeQuery(table, filter=filter, label=label)
        qs = map(qf, tables)
        q = sqlalchemy.union_all(*qs)

        if order_by:
            q = q.order_by(order_by)
        if slice:
            if reverse_order:
                n = self.countDynamics(filter=filter, label=label)
                slice = n-slice[1], n-slice[0]
            q = sqlalchemy.select(
                [q.alias('tmptoslice')],
                limit = slice[1]-slice[0],
                offset = slice[0])

        # only need gpointers to be returned
        q = q.alias('tmp')
        q1 = sqlalchemy.select(columns=['gptr'], from_obj=[q])

        #db._saengine.echo = True
        rows = q1.execute().fetchall()

        #and then map to records
        from dsaw.db.VersatileReference import vreference
        def _(row): return db.dereference(vreference(row[0]))
        ret = map(_, rows)
        if reverse_order:
            ret.reverse()
        return ret

    def makeQuery(self, table, filter=None, label=None):
        'create a query for a dynamics table with given filter'
        db = self.db
        if label:
            if filter: raise RuntimeError
            return self.makeLabeledQuery(label, table)
        sGP = db._tablemap.TableToSATable(global_pointer)
        st = db._tablemap.TableToSATable(table)   
        q = sqlalchemy.select(
            [st.c.id.label('id'),
             sGP.c.type.label('type'),
             #st.c.date.label('date'),
             st.c.globalpointer.label('gptr'),
             ],
            st.c.globalpointer==sGP.c.id,
            )
        if filter:
            q = sqlalchemy.select([q.alias('dynamics')], whereclause=filter)
        return q


    def makeLabeledQuery(self, label, table):
        'create a query for a dynamics table with a given filter'
        db = self.db
        
        sL = db._tablemap.TableToSATable(Label)
        labelq = sqlalchemy.select(
            [sL.c.entity.label('entity'),
             sL.c.labelname.label('label'),
             ],
            whereclause="labelname='%s' and targettable='%s'" % (label, tablename))\
            .alias('labelq')
        
        sGP = db._tablemap.TableToSATable(global_pointer)
        st = db._tablemap.TableToSATable(table)
        
        q1 = sqlalchemy.select(
            [labelq.c.entity.label('entity'),
             sGP.c.type.label('type'),
             ],
            labelq.c.entity==sGP.c.id,
            ).alias('q1')

        q = sqlalchemy.select(
            [st.c.id.label('id'),
             q1.c.type.label('type'),
             #st.c.date.label('date'),
             st.c.globalpointer.label('gptr'),
             ],
            st.c.globalpointer==q1.c.entity,
            )
        return q

    def getTables(self):
        return self.dynamicsTables()
    
    def dynamicsTables(self):
        typenames = ['material_simulations.Motion.Motion','material_simulations.Phonons.PhononsTable']
        ormtables = map(self._getTable, typenames)
        return ormtables

from dsaw.db.VersatileReference import global_pointer
import sqlalchemy

def accessor():
    return Accessor()


# version
__id__ = "$Id$"

# End of file 
