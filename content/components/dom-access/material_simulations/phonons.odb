# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                   Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from vnfb.components.DOMAccessor import DOMAccessor as base

class Accessor(base):


    def __init__(self):
        super(Accessor, self).__init__('phonons-accessor')
        return


    def _getOrm(self):
        orm = self.director.clerk.orm
        orm(Phonons)
        return orm
    orm = property(_getOrm)


    def getPhonons(self, id):
        orm = self.orm
        return orm.load(Phonons, id)


    def getPhononsRecord(self, id):
        db = self.db
        return db.query(PhononsTable).filter_by(id=id).one()


    def getDataForPhonons(self, disp):
        orm  = self.orm
        record = orm(disp)
        
        director = self.director

        # make sure files are on web server
        if not director.dds.is_available(record):
            try:
                director.dds.make_available(record)
            except:
                import journal
                debug = journal.debug('main')
                debug.log('Unable to get data files for record %s' % record.id)
                import traceback
                debug.log(traceback.format_exc())
                return
            
        
        # the files
        datadir = director.dds.abspath(record)
        # try subdir "data.idf" first
        subdir = os.path.join(datadir, 'data.idf')
        if os.path.exists(subdir):
            datadir = subdir

        # see if 'Qaxes" exist
        if not os.path.exists(os.path.join(datadir, 'Qgridinfo')):
            raise NotImplementedError, 'data files not in idf format'
        
        from mccomponents.sample.idf import readDispersion
        nAtoms, dimension, Qaxes, polarizations, energies, dos = readDispersion(datadir)
        for k in ['nAtoms', 'dimension', 'Qaxes', 'polarizations', 'energies']:
            setattr(disp, k, eval(k))
            continue
        
        return disp


    def getOrigin(self, id=None, phonons=None):
        'get the original computation that creates this phonons'
        if phonons is None:
            phonons = self.getPhonons(id)
        orm = self.orm
        r = orm(phonons)
        origin = r.getOrigin(orm.db)
        return origin


from vnfb.dom.material_simulations.Phonons import Phonons

import os, numpy

def accessor():
    return Accessor()


# version
__id__ = "$Id$"

# End of file 
