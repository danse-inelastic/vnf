# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                   Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from vnf.components.DOMAccessor import DOMAccessor as base

class Accessor(base):


    def __init__(self):
        super(Accessor, self).__init__('job')
        return


    def _getOrm(self):
        orm = self.director.clerk.orm
        orm(ARCSIQEResolutionComputation)
        return orm
    orm = property(_getOrm)


    def count(self, filter=None, label=None, mine=False):
        q = self.makeQuery(filter=filter, label=label, mine=mine)
        return q.alias('tocount').count().execute().fetchone()[0]
    
    
    def getRecord(self, id):
        # make sure orm is initd
        orm = self.orm
        #
        return self.getRecordByID(ARCSIQEResolutionComputation_Table, id)


    def getIDs(
        self,
        filter=None, order_by=None, reverse_order=None, slice=None,
        label=None, mine=False,
        ):
        
        db = self.db
        q = self.makeQuery(filter=filter, label=label, mine=mine)

        if order_by:
            q = q.order_by(order_by)
        if slice:
            if reverse_order:
                n = self.count(filter=filter, label=label, mine=mine)
                slice = n-slice[1], n-slice[0]
            q = sqlalchemy.select(
                [q.alias('toslice')],
                limit = slice[1]-slice[0],
                offset = slice[0])
            
        ret = q.execute().fetchall()
        
        if reverse_order:
            ret.reverse()
        return [i.id for i in ret]


    def getRecords(
        self,
        filter=None, order_by=None, reverse_order=None, slice=None,
        label=None, mine=False,
        ):
        ids = self.getIDs(
            filter=filter, order_by=order_by, reverse_order=reverse_order, slice=slice,
            label=label, mine=mine,
            )
        return map(self.getRecord, ids)


    def makeQuery(self, filter=None, label=None, mine=False):
        if label:
            if filter: raise RuntimeError
            return self.makeLabeledQuery(label, mine=mine)
        db = self.db

        st = db._tablemap.TableToSATable(ARCSIQEResolutionComputation_Table)
        cols = [
            st.c.id.label('id'),
            st.c.short_description.label('short_description'),
            st.c.creator.label('creator'),
            st.c.date.label('date'),
            st.c.globalpointer,
            st.c.fermi_chopper,
            st.c.fermi_nu,
            st.c.T0_nu,
            st.c.E,
            st.c.emission_time,
            st.c.ncount,
            ]
        username = self.director.sentry.username
        if mine:
            where = st.c.creator == username
            q = sqlalchemy.select(cols, where)
        else:
            from vnf.utils.query.accesscontrol import select_public_or_owned_records
            q = select_public_or_owned_records(cols, st, username, db)
            
        if filter:
            q = sqlalchemy.select([q.alias('tofilter')], whereclause=filter)
        return q


    def makeLabeledQuery(self, label, mine=False):
        mastertablename = 'arcsiqeresolutioncomputations'
        
        db = self.db
        sL = db._tablemap.TableToSATable(Label)
        if label in common_labels:
            whereclause="labelname='%s'" % (label,)
        else:
            whereclause="labelname='%s' and targettable='%s'" % (
                label, mastertablename)
        labelq = sqlalchemy.select(
            [sL.c.entity.label('entity'),
             sL.c.labelname.label('label'),
             ],
            whereclause=whereclause,
            ).alias('labelq')
        
        st = db._tablemap.TableToSATable(JobTable)

        cols = [
            st.c.id.label('id'),
            st.c.short_description.label('short_description'),
            st.c.creator.label('creator'),
            st.c.date.label('date'),
            st.c.fermi_chopper,
            st.c.fermi_nu,
            st.c.T0_nu,
            st.c.E,
            st.c.emission_time,
            st.c.ncount,
            labelq.c.entity.label('gptr'),
            ]
        
        # where = st.c.globalpointer==labelq.c.entity
        where = 'globalpointer=labelq.entity'
        if mine:
            username = self.director.sentry.username
            mine = "creator='%s'" % username
            where = '%s and %s' % (where, mine)
        q = sqlalchemy.select(cols, whereclause = where)

        return q



from vnf.dom.Label import Label, common_labels
from vnf.dom.neutron_experiment_simulations.integrated.arcs.ARCSIQEResolutionComputation import ARCSIQEResolutionComputation, ARCSIQEResolutionComputation_Table


from dsaw.db.VersatileReference import global_pointer
import sqlalchemy



def accessor():
    return Accessor()


# version
__id__ = "$Id$"

# End of file 
