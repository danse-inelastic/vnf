# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                   Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


tablename = 'atomicstructure'


from vnfb.components.DOMAccessor import DOMAccessor as base

class Accessor(base):


    def __init__(self, db):
        self.db = db
        super(Accessor, self).__init__('atomicstructure-accessor')
        return


    def getAtomicStructure(self, id):
        record = self.getRecordByID(AtomicStructure, id)
        return AtomicStructureProxy(record)


    def countAtomicStructures(self, filter=None, label=None):
        q = self.makeQuery(filter=filter, label=label)
        return q.alias('tocount').count().execute().fetchone()[0]


    def getAtomicStructures(
        self,
        filter=None, order_by=None, reverse_order=None, slice=None,
        label=None,
        ):
        
        db = self.db
        q = self.makeQuery(filter=filter, label=label)

        if order_by:
            q = q.order_by(order_by)
        if slice:
            if reverse_order:
                n = self.countAtomicStructures(filter=filter, label=label)
                slice = n-slice[1], n-slice[0]
            q = sqlalchemy.select(
                [q.alias('toslice')],
                limit = slice[1]-slice[0],
                offset = slice[0])

        ret = q.execute().fetchall()
        
        if reverse_order:
            ret.reverse()

        return [AtomicStructureProxy(i) for i in ret]
        return ret


    def makeQuery(self, filter=None, label=None):
        if label:
            if filter: raise RuntimeError
            return self.makeLabeledQuery(label)
        db = self.db

        st = db._tablemap.TableToSATable(AtomicStructure)
        q = sqlalchemy.select(
            [st.c.id.label('id'),
             st.c.short_description.label('short_description'),
             st.c.chemical_formula.label('chemical_formula'),
             st.c.date.label('date'),
             ]
            )
        if filter:
            q = sqlalchemy.select([q.alias('atomicstructure')], whereclause=filter)
        return q


    def makeLabeledQuery(self, label):
        db = self.db
        sL = db._tablemap.TableToSATable(Label)
        labelq = sqlalchemy.select(
            [sL.c.entity.label('entity'),
             sL.c.labelname.label('label'),
             ],
            whereclause="labelname='%s' and targettable='%s'" % (label, tablename))\
            .alias('labelq')
        
        st = db._tablemap.TableToSATable(AtomStructure)
        
        q = sqlalchemy.select(
            [st.c.id.label('id'),
             st.c.short_description.label('short_description'),
             st.c.chemical_formula.label('chemical_formula'),
             st.c.date.label('date'),
             labelq.c.entity.label('gptr'),
             ],
            st.c.globalpointer==labelq.c.entity,
            )

        return q


    def getallsimulations(self, atomicstructure, **opts):
        '''get all simulations for this atomic structure
        '''
        db = self.db
        tables = simulationTables()

        computations = []
        for table in tables:
            computations += atomicstructure.getReferences(db, table, 'matter', **opts)
            continue

        return computations



class Proxy(object):

    def __init__(self, record, db):
        self.record = record

    
    def __getattr__(self, name):
        o = self._getObject()
        if hasattr(o, name): return getattr(o, name)
        return getattr(self.record, name)


    def _getObject(self):
        if not hasattr(self, '_object'):
            self._object = self._convertToObject()
        return self._object


    def _convertToObject(self):
        raise NotImplementedError



class AtomProxy(Proxy):

    def _convertToObject(self):
        record = self.record
        from matter.Atom import Atom
        return Atom(atype=record.element, xyz=record.xyz, occupancy=record.occupancy)


class LatticeProxy(Proxy):

    def _convertToObject(self):
        attrs = ['a', 'b', 'c',
                 'alpha', 'beta', 'gamma',
                 ]
        record = self.record
        from matter.Lattice import Lattice

        kwds = {}
        for k in attrs:
            kwds[k] = getattr(record, k)
        return Lattice(**kwds)
    

class AtomicStructureProxy(object):

    def _convertToObject(self):
        record = self.record
        db = self.db

        atoms = db.dereference(record.atoms)
        atoms = [AtomProxy(atom, db) for atom in atoms]

        lattice = db.dereference(record.lattice)
        lattice = LatticeProxy(lattice)
        
        from matter.Structure import Structure
        return Structure(atoms=atoms, lattice=lattice)


from vnf.dom.Label import Label
from vnf.dom.AtomicStructure import AtomicStructure


from dsaw.db.VersatileReference import global_pointer
import sqlalchemy


def simulationTables():
    from vnf.dom import materialsimulationtables, materialmodelingtables
    tables = materialsimulationtables()# + materialmodelingtables()
    return tables



def accessor(db):
    return Accessor(db)


# version
__id__ = "$Id$"

# End of file 
