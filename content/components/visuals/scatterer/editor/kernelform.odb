#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from luban.content import load, select, alert
import luban.content as lc


class Factory(object):

    kernel_view_id = 'scatterer-kernel-view'


    def __init__(self, id, director):
        self.id = id
        self.director = director
        self.domaccess = director.retrieveDOMAccessor('scatterer')
        r = self.record = self.domaccess.getRecord(id)
        return


    def __call__(self, kernel, tablename):
        '''
        kernel: the db record of the kernel (in the kernels list) of the scatterer this form is about.
          it could be None; which means this form is editing a new kernel.
        tablename: the name of the table corresponding to the kernel type that this form
          is editing. the kernel type here may not be the same as the type of the
          kernel-to-edit.
        '''
        doc = lc.document(Class='container', id='scatterer-kernel-form')

        # type
        director = self.director
        domaccess = self.domaccess
        orm = domaccess.orm; db = orm.db
        table = db.getTable(tablename)

        # the object to edit. if the kernel type is the same as current kernel type
        # should edit the existing kernel, otherwise, create a new kernel and edit that
        if kernel and table.__name__ == kernel.__class__.__name__:
            obj = orm.record2object(kernel)
        else:
            Obj = orm.getObjectTypeFromTableName(tablename)
            obj = Obj()
            scattererrecord = self.record; matterrecord = scattererrecord.matter.dereference(db)
            matter = orm.record2object(matterrecord)
            obj.matter = matter

        # drawer
        painter = director.painter
        drawer = painter.paintObj.drawers.getDrawer(obj.__class__)

        # form
        #view = drawer.createPropertiesForm(obj); doc.add(view)
        view = drawer(obj); doc.add(view)
        form = view.getDescendentByName('properties-form')
        # this action will return the unique identifier of new kernel
        # , see orm/<kernel>._postStoringUserInputs
        oldkerneluid = (kernel or '') and db.getUniqueIdentifierStr(kernel)
        form.onsubmit.params.update(
            {
            'handler': 'callScattererEditorActor',
            'scattererid': self.id,
            'oldkerneluid': oldkerneluid
            })

        # cancel
        c = lc.link(label='cancel', Class='float-right');
        form.add(c)
        c.onclick = select(id=self.kernel_view_id).replaceBy(
            load(actor='scatterer/editor', routine='createKernelView',
                 id = self.id, kernel=oldkerneluid)
            )
        return doc


    
def visual(id, director, kernel, tablename):
    return Factory(id, director)(kernel, tablename)


# version
__id__ = "$Id$"

# End of file 

