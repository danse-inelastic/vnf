#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from luban.content import load, select, alert
import luban.content as lc


class Factory(object):

    def __init__(self, id, director):
        self.id = id
        self.director = director
        self.domaccess = director.retrieveDOMAccessor('scatterer')
        self.record = self.domaccess.getRecord(id)
        return


    def __call__(self):
        director = self.director
        record = self.record
        id = self.id

        doc = lc.document(Class='container')

        # view indicator
        viewindicator = self._createViewIndicator()
        doc.add(viewindicator)

        # basic info
        view = self._createBasicInfoView()
        doc.add(view)
        
        # matter
        view = self._createMatterView()
        doc.add(view)

        # shape
        view = self._createShapeView()
        doc.add(view)

        # kernels
        view = self._createKernelsView()
        doc.add(view)
        return doc


    def _createBasicInfoView(self):
        return self.director.retrieveVisual(
            'scatterer/editor/basicinfoview', id=self.id, director=self.director)


    matter_view_id = 'scatterer-matter-view'
    def _createMatterView(self):
        return self.director.retrieveVisual(
            'scatterer/editor/matterview', id=self.id, director=self.director)
    

    def _createShapeView(self):
        return self.director.retrieveVisual(
            'scatterer/editor/shapeview', id=self.id, director=self.director)


    def _createKernelsView(self):
        return self.director.retrieveVisual(
            'scatterer/editor/kernelsview', id=self.id, director=self.director)


    def _createViewIndicator(self):
        path = []

        path.append(('Samples', lc.load(actor='sample')))

        record = self.record
        label = record.short_description or record.id
        action = lc.load(actor='sample', routine='view',
                         id = self.id, type=record.getTableName())
        path.append((label,action))

        return self.director.retrieveVisual('view-indicator', path=path)
    
    
def visual(id, director):
    return Factory(id, director)()


# version
__id__ = "$Id$"

# End of file 

