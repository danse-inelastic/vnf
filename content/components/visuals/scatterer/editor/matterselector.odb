#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from luban.content import load, select, alert
import luban.content as lc


class Factory(object):

    matter_view_id = 'scatterer-matter-view'


    def __init__(self, id, director):
        self.id = id
        self.director = director
        self.domaccess = director.retrieveDOMAccessor('scatterer')
        self.record = self.domaccess.getRecord(id)
        return


    def __call__(self):
        doc = lc.document(id='sample-matter-selector-doc', Class='atomicstructure-selector-panel')

        doc.paragraph(
            text=[
            'Please select one atomic structure from the following table,',
            'you can search for the structure using the filtering controls.',
            ]
            )

        # the container of the atomicstructure selector
        container = lc.document(id='atomicstructure-selector-container')
        doc.add(container)
        container.oncreate = [
            select(element=container).append(
              load(actor='selectoneatomicstructure', routine='createListView')
              ),
            ]

        # cancel
        c = lc.link(label='cancel', Class='float-right'); doc.add(c)
        c.onclick = select(id=self.matter_view_id).replaceBy(
            load(actor='scatterer/editor', routine='createMatterView',
                 id = self.id)
            )

        # select button
        b = lc.button(label='select'); doc.add(b)
        selected_matter = select(id='atomicstructure-table').table(
            'getIdentifiersForSelectedRow', colname='selectone')
        updatematter = load(
            actor='scatterer/editor', routine='selectMatter',
            id = self.id,
            matter=selected_matter
            )
        # this does not work because all kernels need to be flushed out
        # b.onclick = select(id=self.matter_view_id).replaceBy(
        #    load(actor='scatterer/editor', routine='createMatterView',
        #         id = self.id, matter=updatematter)
        #    )
        # need to refresh the whole view
        neweditor = load(
            actor='scatterer', routine='createEditor', id=self.id,
            updatematter = updatematter
            )
        b.onclick = select(id='main-display-area').replaceContent(neweditor)

        return doc
    
    
def visual(id, director):
    return Factory(id, director)()


# version
__id__ = "$Id$"

# End of file 

