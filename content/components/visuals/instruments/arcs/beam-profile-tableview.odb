#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                  Jiao Lin
#                     California Institute of Technology
#                       (C) 2009  All Rights Reserved
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


from luban.content import load, select, alert
import luban.content as lc


def visual(
    director, name,
    actorname=None,
    filter_expr=None, filter_key=None, filter_value=None,
    label=None, mine=False,
    order_by=None, reverse_order=None,
    number_records_per_page=None, page_number=None,
    ):
    # name: name of table view
    # 
    domaccess = director.retrieveDOMAccessor('arcsbeamconfiguration')
        
    from vnfb.components.MasterTable import MasterTableFactory, filtercompiler
    def countrecords(filter, label=None, mine=False):
        return domaccess.count(filter, label=label, mine=mine)
    def createtable(order_by, reverse_order, slice, filter, label=None, mine=False):
        return createTable(
            director, domaccess,
            order_by=order_by,
            reverse_order=reverse_order,
            slice=slice,
            filter=filter,
            label=label,
            mine=mine
            )
    
    from vnfb.content.visuals.table.arcsbeamprofile import model
    compilefilter = filtercompiler(columns, measure2dbcol, model=model)

    smartlabelaccess = director.retrieveDOMAccessor('smartlabel')
    def filterfromlabel(label):
        return smartlabelaccess.createFilterExprFromLabel(
            label, name)
    smartlabels = smartlabelaccess.getLabelNames(name)

    labelaccess = director.retrieveDOMAccessor('label')
    labels = labelaccess.getLabelNames(name)

    factory = MasterTableFactory(
        name, 
        countrecords, createtable,
        compilefilter, filtercols,
        filterfromlabel, smartlabels, labels,
        actorname=actorname,
        sorting_options = [
            ('id', 'ID'),
            ('fermi_chopper', 'Fermi Chopper'),
            ('fermi_nu', "Fermi chopper frequency"),
            ('short_description', 'Description'),
            ('date', 'Date'),
        ],
        polymorphic = False, dbtablename='arcsbeamconfigurations',
        )

    tableview = factory.create(
        label = label, mine = mine,
        filter_expr=filter_expr, filter_key=filter_key, filter_value=filter_value,
        order_by=order_by,
        reverse_order=reverse_order,
        number_records_per_page=number_records_per_page,
        page_number=page_number)

    return tableview


def createTable(
    director, domaccess,
    order_by=None, reverse_order=None, slice=None,
    filter=None,
    label=None,
    mine=False,
    ):

    records = domaccess.getRecords(
        order_by=order_by, reverse_order=reverse_order, slice=slice,
        filter=filter,
        label=label,
        mine=mine,
        )

    cols = columns
    args = records, cols, director
    thetable = director.retrieveVisual(
        'instruments/arcs/beam-profile-table',
        records = records,
        cols = cols,
        director = director)
    thetable.oncellchanged = select(element=thetable).notify(
        event='row-changed', 
        actor='instruments/arcs/beam-profile', 
        routine='processRowChange')
    return thetable



columns = [ 'selected', 'id', 
            'fermi_chopper', 'fermi_nu', 'T0_nu',
            'E', 'emission_time', 'ncount',
            'description', 'date']
measure2dbcol = {
    'description': 'short_description',
    }
filtercols = ['id', 'date']


# version
__id__ = "$Id$"

# End of file 
