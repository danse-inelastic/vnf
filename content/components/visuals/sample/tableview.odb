#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


# this is the visual for the whole table view that includes a table and
# many controls.
# it is different from sample/table which only is the table itself.

from luban.content import load, select
import luban.content as lc




def visual(
    director, name,
    filter_expr=None, filter_key=None, filter_value=None,
    label=None, mine=False,
    order_by=None, reverse_order=None,
    number_records_per_page=None, page_number=None,
    ):
    
    domaccess = director.retrieveDOMAccessor(name)

    from vnfb.components.MasterTable import MasterTableFactory, filtercompiler
    def countrecords(filter, label=None, mine=False):
        return domaccess.countSamples(filter, label=label, mine=mine)
    def createtable(order_by, reverse_order, slice, filter, label=None, mine=False):
        return createTable(
            director, domaccess,
            order_by=order_by,
            reverse_order=reverse_order,
            slice=slice,
            filter=filter,
            label=label,
            mine=mine
            )
    from vnfb.content.visuals.table.sample import model
    compilefilter = filtercompiler(columns, measure2dbcol, model=model)

    smartlabelaccess = director.retrieveDOMAccessor('smartlabel')
    def filterfromlabel(label):
        return smartlabelaccess.createFilterExprFromLabel(
            label, name)
    smartlabels = smartlabelaccess.getLabelNames(name)

    labelaccess = director.retrieveDOMAccessor('label')
    labels = labelaccess.getLabelNames(name)

    factory = MasterTableFactory(
        name,
        countrecords,
        createtable,
        compilefilter,
        filtercols,
        filterfromlabel,
        smartlabels,
        labels,
        sorting_options = [
            ('id', 'ID'),
            ('short_description', 'Description'),
            ('type', 'Type'),
            ('date', 'Date created'),
            ]
        )

    tableview = factory.create(
        label = label, mine = mine,
        filter_expr         = filter_expr,
        filter_key          = filter_key,
        filter_value        = filter_value,
        order_by            = order_by,
        reverse_order       = reverse_order,
        number_records_per_page = number_records_per_page,
        page_number         = page_number
        )

    # add new button
    toolbar         = tableview.find(id='sample-table-toptoolbar')

    button          = lc.button(
        label='New', tip='create new sample', icon='new.png',
        id = 'new-sample-button',
        )
    toolbar.add(button)
    button.onclick  = select(id='main-display-area').replaceContent(
        load(actor      = 'sample',
             routine    = 'newSample')
        )


    return tableview


def createTable(
    director, domaccess,
    order_by        = None,
    reverse_order   = None,
    slice           = None,
    filter          = None,
    label           = None,
    mine = False,
    ):

    records = domaccess.getSamples(
        order_by        = order_by,
        reverse_order   = reverse_order,
        slice           = slice,
        filter          = filter,
        label           = label,
        mine = mine,
        )

    cols = columns
    args = records, cols, director
    thetable = director.retrieveVisual(
        'sample/table',
        samples = records,
        cols = cols,
        director = director,
        )
    if thetable is None:
        raise RuntimeError, 'failed to load visual "sample table"'

    thetable.oncellchanged = select(element=thetable).notify(
        event='row-changed',
        actor='sampletable',
        routine='processRowChange')
    return thetable



columns = [ 'selected', 'id', 'description','type', 'date']
measure2dbcol = {
    'description': 'short_description',
    }
filtercols = columns[1:]



# version
__id__ = "$Id$"

# End of file 

