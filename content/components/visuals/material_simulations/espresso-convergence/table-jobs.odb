#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

from vnfb.qeutils.qegrid import QEGrid
from vnfb.qeutils.qeutils import convJobId
import luban.content as lc

MAX_STEPS   = 30    # Max number of rows in the table
NUM_COLUMNS = 5

def setColumnStyle(table):
    table.setColumnStyle(0, "qe-table-id")
    table.setColumnStyle(1, "qe-table-task-type")
    table.setColumnStyle(2, "qe-table-job-status")
    table.setColumnStyle(3, "qe-table-tar")
    table.setColumnStyle(4, "qe-table-param")


def tableHeader():
    content     = lc.document()
    table       = QEGrid(lc.grid(Class="qe-table-conv-jobs"))
    table.addRow(("Job Id", "Task", "Status", "Result", "Optimal") )

    setColumnStyle(table)
    table.setRowStyle(0, "qe-table-header")
    content.add(table.grid())
    content.add(lc.document(id="hello"))
    return content
    #return table.grid()


def tableRow(rownum):
    "Return table of one row (inserts row). First after the header row has index 0"
    table   = QEGrid(lc.grid(Class="qe-table-conv-jobs"))
    row     = []
    for colnum in range(NUM_COLUMNS):
        row.append(lc.document(id=convJobId(rownum, colnum)))
    table.addRow(row)

    setColumnStyle(table)
    return table.grid()


def visual(director, id, paramid, part="row"):
    if part == "header":
        return tableHeader()

    return tableRow(0)  # Fix!!!

#    content = lc.document()
#    content.add(tableHeader())
#    content.add(tableRow(0))
#
#    return content



#    table       = QEGrid(lc.grid(Class="qe-tasks-table"))
##    jobs       = director.clerk.getQEConvParams(where="convergenceid='%s'" % convid)
##    if not params:           # No convergence tests found
##        return table.grid()
#
#    table.addRow(("Job Id", "Task", "Status", "Result", "Optimal") )
##    for s in range(MAX_STEPS):
##        row     = []
##        for c in range(NUM_COLUMNS):
##            row.append(lc.document(id=""))
##        table.addRow(row)
#
#    table.setColumnStyle(0, "qe-table-id")
#    table.setColumnStyle(1, "qe-table-task-type")
#    table.setColumnStyle(2, "qe-table-job-status")
#    table.setColumnStyle(3, "qe-table-tar")
#    table.setColumnStyle(4, "qe-table-param")
#    table.setRowStyle(0, "qe-table-header")
#
#    return table.grid()

# table.addRow(("AAA", "PW", "[..........]", "ZZZZZ.tgz", "24") )

__date__ = "$May 1, 2010 9:42:20 PM$"


