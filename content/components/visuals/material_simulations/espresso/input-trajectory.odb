#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                               Alex Dementsov
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

import luban.content as lc
from luban.content import select
from luban.content import load
from vnfb.qeutils.qegrid import QEGrid
from vnfb.qeutils.qeconst import MDPLOT
from luban.content.FormCheckBox import FormCheckBox
from luban.content.FormSubmitButton import FormSubmitButton
from luban.content.FormTextField import FormTextField

def plotOptions(director):
    "Displays molecular dynamics steps"
    table       = QEGrid(lc.grid(Class="qe-table-md"))

    for s in MDPLOT.keys():
        box     = FormCheckBox(name=s, checked = True)
        label   = MDPLOT[s]
        table.addRow((box, label))

    return table.grid()


def visual(actor, director, structureid, simtype):
    form        = lc.form(id='create-simulation-form')
    table       = QEGrid(lc.grid(Class="qe-form"))
    form.add(table.grid())

    start       = FormTextField(name = "start",    value = "")
    end         = FormTextField(name = "end", value = "")

    submit      = FormSubmitButton(label="Generate Input Configuration")
    cancel      = lc.button(label="Cancel")
    cancel.onclick  = load(actor = 'material_simulations/espresso/sim-view', id=actor.id)

    # Parameters attachment
    st          = QEGrid(lc.grid()) # Submit Table
    st.addRow((submit, cancel), ("qe-action-accept", "qe-action-cancel"))

    #table.addRow(("SHOW TIME SPENT AT EACH STEP", ""))
    table.addRow(("Start Time: *", start))
    table.addRow(("End Time: *", end))
    table.addRow(("Analysis Plots: *", plotOptions(director)))
    table.addRow(("", st.grid()))

    table.setColumnStyle(0, "qe-form-label")
    table.setColumnStyle(1, "qe-form-field")

    submitActor   = 'material_simulations/espresso-utils/generate-trajectory'
    form.onsubmit   = select(element=form).submit(actor     = submitActor,
                                                  routine   = 'generateInput',
                                                  taskid    = actor.taskid,
                                                  id        = actor.id,
                                                  type      = actor.type,
                                                  simtype   = simtype)

    return form


__date__ = "$Apr 30, 2010 12:20:21 PM$"


