# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


import luban.content as lc
from luban.content import select, load, alert


def visual(models, director):
    painter = director.painter
    domaccess = director.retrieveDOMAccessor('material_simulations/bvk')
    orm = domaccess.orm
    
    doc = lc.document()

    grid = lc.grid(Class='bvk-models-selector-grid'); doc.add(grid)

    for model in models:
        row = grid.row()

        # model
        modelcell = row.cell(); modelcell.add(modelView(model, domaccess, painter))

        # select link
        selectlinkcell = row.cell();
        link = lc.link(label='select this model', onclick=load(
            actor='material_simulations/phonon_calculators/bvk', routine='selectModel',
            model_id = orm(model).id))
        selectlinkcell.add(link)

        # edit link
        editlinkcell = row.cell();
        if domaccess.isModelEditable(model=model):
            link = lc.link(label='edit', onclick=load(
                actor='material_simulations/phonon_calculators/bvk', routine='editModel',
                model_id = orm(model).id))
            editlinkcell.add(link)

    return doc


def modelView(model, domaccess, painter):
    orm = domaccess.orm
    title = 'Model %r' % (model.short_description or orm(model).id)
    doc = lc.document(title=title, collapsed=True, collapsable=True)
    p = lc.paragraph(text=['loading...'])
    doc.add(p)
    doc.oncollapse = select(element=doc).replaceContent(p)

    model_is_editable = domaccess.isModelEditable(modelrecord=orm(model))
    doc.onexpand = select(element=doc).replaceContent(
        load(actor='orm/bvkmodels', routine='display',
             id = orm(model).id, editlink=False)
        )
    return doc
    
    bonds = model.bonds
    if len(bonds):
        drawer = painter.paintObj.drawers.getDrawer(model)
        doc = drawer(model, readonly=1, editlink=0)
    else:
        doc = lc.document(title='Model %s' % orm(model).id)
        p = doc.paragraph(text=['there is no bond in this model'])
        link = lc.link(label='edit this model', onclick=load(
            actor='material_simulations/phonon_calculators/bvk', routine='editModel',
            model_id = orm(model).id))
        doc.add(link)

    doc.collapsed = True
    return doc


# version
__id__ = "$Id$"

# End of file 
