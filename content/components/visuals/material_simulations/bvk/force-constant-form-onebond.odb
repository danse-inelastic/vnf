# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


import luban.content as lc
from luban.content import select, load, alert
from luban.content.FormSelectorField import FormSelectorField
from luban.content.FormTextField import FormTextField


def visual(uid, sites, bond_vector=None, site1=None, site2=None, matrix=None, constraints=None):
    doc = lc.splitter(Class='force-constant-form-one-bond')

    left = doc.section()
    right = doc.section()

    site_inputs = sitesInputs(sites, site1=site1, site2=site2)
    left.add(site_inputs)
    
    v = bondvectorInput(uid, bond_vector)
    site_inputs.add(v)

    grid = matrixdoc(uid, matrix, constraints)
    right.add(grid)
    return doc


def matrixdoc(uid, matrix, constraints):
    grid = lc.document(Class='grid', title='Force constant matrix')
    if constraints:
        import numpy
        dependents = numpy.zeros((3,3), bool)
        for constraint in constraints:
            dependents[constraint.right.indexes] = 1
            continue
    
    minputs = []
    for i in range(3):

        if matrix: vec = matrix[i]
        else: vec = None

        if constraints: deps = dependents[i]
        else: deps = None
        
        vecinputs, fields = vectorInput('%s-%s' % (uid, i), vec, deps)
        grid.add(vecinputs)

        minputs.append(fields)
        continue

    if constraints is not None:
        for constraint in constraints:
            assert constraint.__class__.__name__.lower() == 'equal'
            left = constraint.left.indexes
            right = constraint.right.indexes
            i,j = left
            minputs[i][j].onchange = select(id=minputid(uid, right)).setAttr(
                text=select(id=minputid(uid, left)).getAttr('value'))
    
    return grid


def sitesInputs(sites, site1, site2):
    doc = lc.document(title='bond', Class='bond-sites')
    sp = doc.splitter()
    
    opts = enumerate(sites)
    s1 = FormSelectorField(
        label = 'site 1',
        tip = 'select site 1 for this bond',
        name = 'site1',
        entries = opts,
        selection = site1 or 0,
        )
    sp.section().add(s1)

    sp.section().paragraph(text=['==='], Class='bond')
    
    opts = enumerate(sites)
    s2 = FormSelectorField(
        label = 'site 2',
        tip = 'select site 2 for this bond',
        name = 'site2',
        entries = opts,
        selection = site2 or 0,
        )
    sp.section().add(s2)
    return doc
    

def bondvectorInput(uid, vec=None):
    if vec is None:
        vec = [0,0,0]
        
    doc = lc.document(title='vector', Class='bond-vector-container')
    
    lvs = ['a', 'b', 'c']
    for i, (val, lv) in enumerate(zip(vec, lvs)):
        f = FormTextField(
            label = '',
            name = 'vector-%s' % lv,
            value = val,
            )
        doc.add(f)
        text = ['*', lv]
        if i<2: text.append(',')
        doc.paragraph(text=text)

    return doc


def minputid(uid, indexes):
    i,j = indexes
    return '%s-%s-%s' % (uid, i,j)


def vectorInput(uid, vec=None, deps=None):
    splitter = lc.splitter()
    fields = []
    for i in range(3):
        id = '%s-%s' % (uid, i)
        if deps is not None and deps[i]:
            f = lc.paragraph(id=id)
            if vec: f.text = [vec[i]]
        else:
            f = FormTextField(id=id)
            if vec: f.value = vec[i]
            
        fields.append(f)
        splitter.section().add(f)
        
        continue
    
    return splitter, fields


# version
__id__ = "$Id$"

# End of file 
