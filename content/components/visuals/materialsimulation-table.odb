#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                  Jiao Lin
#                     California Institute of Technology
#                       (C) 2009  All Rights Reserved
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


def visual(matsims, cols, director):
    try: return table(matsims, cols, director)
    except:
        import traceback
        import journal
        debug = journal.debug('pyre')
        debug.log(traceback.format_exc())
        return


def table(matsims, cols, director):
    from luban.content.table import Model, View, Table
    from luban.content import load
    from luban.content.Link import Link
    
    class model(Model):

        description = Model.descriptors.link(name='description')
        type = Model.descriptors.str(name='type')
        matter = Model.descriptors.str(name='matter')
        creationDate = Model.descriptors.str(name='creationDate')

    
    columns = [
        View.Column(name='col1',label='Description', measure='description'),
        View.Column(name='col2',label='Type', measure='type'),
        View.Column(name='col3',label='Matter', measure='matter'),
        View.Column(name='col5',label='Date created', measure='creationDate'),
        ]
    columns = filter(lambda col: col.measure in cols, columns)

    view = View(columns=columns, editable=False)

    def getDesc(matsim):
        label = matsim.short_description or matsim.id
        link = Link(
            label = label,
            onclick = load(
                actor='computation', routine='view',
                id = matsim.id,
                type = matsim.__class__.__name__.lower(),
                )
            )
        return link
    def getCreationDate(exp):
        date = exp.date
        return str(date)
    def getType(matsim):
        return matsim.__class__.__name__
    def getMatter(matsim):
        matter = matsim.matter
        if not matter: return 'not defined'
        try:
            matter = director.clerk.dereference(matter)
        except:
            return 'matter %s not found' % matter.id
        identifier = matter.short_description or matter.chemical_formula
        return identifier
        
    import operator
    generators = {
        'description': getDesc,
        'type': getType,
        'matter': getMatter,
        'creationDate': getCreationDate,
        }
    
    value_generators = map(generators.get, [col.measure for col in view.columns])
    record2tuple = lambda record: [g(record) for g in value_generators]
    data = map(record2tuple, matsims)

    table = Table(model=model, data=data, view=view)

    from pyre.components.Component import Component
    return table


# version
__id__ = "$Id$"

# End of file 
