#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                  Jiao Lin
#                     California Institute of Technology
#                       (C) 2009  All Rights Reserved
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


def visual(matsims, cols, director):
    return table(matsims, cols, director)
    try: return table(matsims, cols, director)
    except:
        import traceback
        import journal
        debug = journal.debug('pyre')
        debug.log(traceback.format_exc())
        return


def table(matsims, cols, director):
    """Creates table for material simulations"""

    from luban.content.table import Model, View, Table
    from luban.content import load
    from luban.content.Link import Link
    
    class model(Model):

        selected        = Model.descriptors.bool(name='selected')
        id              = Model.descriptors.link(name='id')
        description     = Model.descriptors.str(name='description')
        type            = Model.descriptors.str(name='type')
        matter          = Model.descriptors.str(name='matter')
        date            = Model.descriptors.str(name='date')

        row_identifiers = ['id', 'type']

    
    columns = [
        View.Column(label='', measure='selected'),
        View.Column(label='ID', measure='id'),
        View.Column(label='Description', measure='description', editable=True),
        View.Column(label='Type', measure='type'),
        View.Column(label='Matter', measure='matter'),
        View.Column(label='Date created', measure='created'),
        ]
    columns = filter(lambda col: col.measure in cols, columns)

    view = View(columns=columns, editable=False)

    def getSelected(matter): return False
    def getId(matsim):
        label = matsim.id
        link = Link(
            label = label,
            onclick = load(
                actor='computation', routine='view',
                id = matsim.id,
                type = matsim.getTableName(),
                )
            # no need for a redirection
#            onclick = load(
#                actor='materialsimulation', routine='showMaterialSimulation',
#                id = matsim.id,
#                type = matsim.getTableName(),
#                )
            )
        return link
    def getDescription(matsim):
        return matsim.short_description
    def getCreated(exp):
        date = exp.date
        return str(date)
    def getType(matsim):
        return matsim.getTableName()
    def getMatter(matsim):
        matter = matsim.matter
        if not matter or not matter.id: return 'not defined'
        try:
            matter = director.clerk.db.dereference(matter)
        except:
            return 'matter %s not found' % matter.id
        identifier = matter.short_description or matter.chemical_formula
        return identifier
        
    import operator
    value_generators    = [ eval('get'+col.measure.capitalize())
                            for col in view.columns]
    record2tuple        = lambda record: [g(record) for g in value_generators]
    data                = map(record2tuple, matsims)

    table = Table(model=model, data=data, view=view, id='matsim-table')
    return table


# version
__id__ = "$Id$"

# End of file 
