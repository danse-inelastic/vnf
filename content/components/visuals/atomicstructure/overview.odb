# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                 Jiao Lin
#                      California Institute of Technology
#                      (C) 2006-2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


import numpy

import luban.content as lc
from luban.content import select, load, alert
from luban.content.FormTextField import FormTextField
from luban.content.FormTextArea import FormTextArea


class Factory(object):

    def __init__(self, director, id):
        self.director = director
        self.id = id
        self.domaccess = director.retrieveDOMAccessor('atomicstructure')
        self.atomicstructure = self.domaccess.getAtomicStructure(id)
        self.record = self.domaccess.orm(self.atomicstructure)
        self.actor = 'atomicstructure'


    def create(self):
        view = lc.document(id='atomicstructure-view')

        titlebar = lc.splitter(Class='atomicstructure-view-title-bar')
        view.add(titlebar)

        atomicstructure = self.atomicstructure
        record = self.record
        view_label = self.getAtomicStructureLabel()

        # view indicator
        view_indicator = self.createViewIndicator()
        titlebar.section().add(view_indicator)

        # info
        atomicstructureinfo = self.createAtomicStructureInfoSection()
        view.add(atomicstructureinfo)

        director = self.director
        # props
        propsdoc = director.retrieveVisual(
            'atomicstructure/computed-props',
            director, self.id)
        view.add(propsdoc)
        
        return view


    def createViewIndicator(self):
        path = []

        actor = self.actor
        path.append(('Atomic Structures', lc.load(actor=actor)))

        label = self.getAtomicStructureLabel()
        action = lc.load(actor=actor, routine='showOverview', id = self.id,)
        path.append((label,action))

        return self.director.retrieveVisual('view-indicator', path=path)


    def createAtomicStructureInfoSection(self):
        splitter = lc.splitter(id='atomicstructure-info-section')
        
        namesec = splitter.section(id='atomicstructure-name-container')
        namedoc = self.createNameDoc()
        namesec.add(namedoc)

        structuresec = splitter.section(id='atomicstructure-structure-container')
        structuredoc = self.createStructureDoc()
        structuresec.add(structuredoc)
        
        return splitter


    def createStructureDoc(self):
        atomicstructure = self.atomicstructure
        record = self.record

        doc = lc.document(title='Structure', Class='atomicstructure-info-subsection')

        sp = lc.splitter(); doc.add(sp)
        # bcc, fcc etc
        struk = atomicstructure.StrukturberichtDesignation
        if struk:
            label = str(struk)
            struklink = lc.link(label=label)
            sp.section().add(struklink)

        # cubic, mononclinic etc
        xtalsystem = atomicstructure.crystal_system.capitalize()
        centering = atomicstructure.centering_description
        tip = '<p>Crystal system: %s</p><p>Centering: %s</p>' % (xtalsystem, centering)
        label = '%s, %s' % (xtalsystem, centering)
        xtalsystemlink = lc.link(label=xtalsystem, tip=tip)
        sp.section().add(xtalsystemlink)

        # sg
        sg = atomicstructure.sg
        sgname = sg.pdb_name
        tip = 'Space group: %s' % sgname
        sglink = lc.link(label=sgname, tip=tip)
        sp.section().add(sglink)

        # chemical formula
        chemical_formula = record.chemical_formula or atomicstructure.getChemicalFormula()
        label = chemical_formula
        tip = '\n'.join(["%s %s" % (a.symbol, a.xyz) for a in atomicstructure])
        cflink = lc.link(label=label, tip=tip)
        sp.section().add(cflink)

        # edit link
        domaccess = self.domaccess
        if not domaccess.isReferred(self.id):
            edit = select(id='main-display-area').replaceContent(
                load(actor=self.actor, routine='editAtomicStructureForm',
                     id=self.id)
                )
            tip = 'click me to edit this atomic structure'
            editlink = lc.link(label='edit', onclick=edit, tip=tip)
            doc.add(editlink)
        return doc


    def createNameDoc(self):
        atomicstructure = self.atomicstructure
        
        doc = lc.document(title='Name', Class='atomicstructure-info-subsection')
        splitter = doc.splitter()
        left = splitter.section(id='atomicstructure-name-field')
        right = splitter.section(Class='editlink-container')

        label = self.getAtomicStructureLabel()
        p = left.paragraph(text=[label], Class='editable')

        i = FormTextField(hidden=True, value=atomicstructure.description)
        left.add(i)

        i.onblur = [
            select(element=p).show(),
            select(element=i).hide(),
            ]
        i.onchange = load(
            actor=self.actor, routine='changeDescriptionAndUpdateAtomicStructureView',
            id = self.id,
            description = select(element=i).getAttr('value'),
            )
                          

        l = lc.link(label='edit'); right.add(l)
        l.onclick = [
            select(element=p).hide(),
            select(element=i).show(),
            select(element=i).focus(),
            ]

        return doc


    def getAtomicStructureLabel(self):
        atomicstructure = self.atomicstructure
        record = self.record
        return atomicstructure.description or record.id
        


def visual(director, id):
    return Factory(director, id).create()
    
# version
__id__ = "$Id$"

# End of file 
