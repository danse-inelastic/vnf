#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                                  Jiao Lin
#                     California Institute of Technology
#                       (C) 2009  All Rights Reserved
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#


def visual(atomicstructures, cols, director):
    try: return table(atomicstructures, cols, director)
    except:
        import journal
        debug = journal.debug('atomicstructure-table')
        import traceback
        debug.log(traceback.format_exc())
        return


def table(atomicstructures, cols, director):
    from luban.content.table import Model, View, Table
    from luban.content import load
    from luban.content.Link import Link
    
    class model(Model):

        selected = Model.descriptors.bool(name='selected')
        id = Model.descriptors.link(name='id')
        description = Model.descriptors.str(name='description')
        visualize = Model.descriptors.link(name='visualize')
        chemical_formula = Model.descriptors.str(name='chemical_formula')
        created = Model.descriptors.str(name='created')

        row_identifiers = ['id']

    columns = [
        View.Column(label='', measure='selected'),
        View.Column(label='ID', measure='id'),
        View.Column(label='Description', measure='description', editable=True),
        View.Column(label='Visualize', measure='visualize'),
        View.Column(label='Chemical_formula', measure='chemical_formula'),
        View.Column(label='Date created', measure='created'),
        ]
    columns = filter(lambda col: col.measure in cols, columns)

    view = View(columns=columns, editable=True)
    
    def getSelected(atomicstructure): return False
    def getId(atomicstructure):
        record = atomicstructure.record
        label = record.id
        link = Link(
            label = label,
            onclick = load(
                actor='atomicstructure', routine='showOverview',
                id = record.id,
                )
            )
        return link
    def getDescription(atomicstructure):
        record = atomicstructure.record
        return record.short_description
    def getVisualize(atomicstructure):
        return 'not implemented'
    def getCreated(atomicstructure):
        record = atomicstructure.record
        date = record.date
        return str(date)
    def getChemical_formula(atomicstructure):
        return atomicstructure.getChemicalFormula()
                
    import operator
    value_generators = [
        eval('get'+col.measure.capitalize())
        for col in view.columns]
    record2tuple = lambda record: [g(record) for g in value_generators]
    data = map(record2tuple, atomicstructures)

    table = Table(model=model, data=data, view=view, id='atomicstructure-table')

    return table


# version
__id__ = "$Id$"

# End of file 
