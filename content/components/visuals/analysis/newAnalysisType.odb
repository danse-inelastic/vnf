#!/usr/bin/env python
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                      California Institute of Technology
#                        (C) 2009  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

import luban.content as lc
from vnfb.qeutils.qegrid import QEGrid

from luban.content import load, select

def visual(director):
    doc         = lc.document(title = "")
    splitter    = doc.splitter(orientation="vertical")
    # view indicator
    topLinkSection          = splitter.section()
    topLinkSection.add(viewIndicator(director))
    # page section
    # create horizontal splitter and add to rest of page; create two dynamics sections
    pageSection          = splitter.section()
    twoDynamicsSplitter = lc.splitter(orientation="horizontal"); pageSection.add(twoDynamicsSplitter)
    trajSection = twoDynamicsSplitter.section();
    mdTitle = lc.document(title = 'Md-based')
    trajSection.add(mdTitle)
    
    phonSection = twoDynamicsSplitter.section();
    phonTitle = lc.document(title = 'Phonon-based')
    phonSection.add(phonTitle)
    
    #create md splitter and sections
    mdSplitter = lc.splitter(orientation="vertical"); trajSection.add(mdSplitter)
    
    mdScat = mdSplitter.section()
    docMdScat = lc.document(title = 'Scattering Analysis')
    mdScat.add(docMdScat)
    mdScat.add(createMdScatteringAnalysis())

    mdDyn = mdSplitter.section()
    docMdDyn = lc.document(title = "Dynamics Analysis")
    mdDyn.add(docMdDyn)
    mdDyn.add(createDynamicsAnalysis())
    
    mdStruct = mdSplitter.section()
    docMdStruct         = lc.document(title = "Structure Analysis")
    mdStruct.add(docMdStruct)
    mdStruct.add(createStructureAnalysis())
    
    #create phonon splitter and sections
    #phononTypesSplitter = lc.splitter(orientation="vertical"); 
    #phonSection.add(sp)
    docPhonScat = lc.document(title = 'Scattering Analysis')
    phonSection.add(docPhonScat)
    phonSection.add(createPhonScatteringAnalysis())
    
    return doc

def createMdScatteringAnalysis():
    qegrid = QEGrid(lc.grid(Class="qe-table"))   
    routines   = []
    routines.append(
                    (lc.link(label="S(Q,E)_coh", onclick=select(id='main-display-area'
                    ).replaceContent(load(actor='analysis/mdanalysiswizard', routine='selectTrajectory',
                    analysisType='CsfCalc'))),
                    "Coherent inelastic scattering from md")
                    )
    routines.append(
                    (lc.link(label="S(Q,E)_incoh", onclick=select(id='main-display-area'
                    ).replaceContent(load(actor='analysis/mdanalysiswizard', routine='selectTrajectory',
                    analysisType='IsfCalc'))),
                    "Incoherent inelastic scattering from md")
                    )
    routines.append(
                    (lc.link(label="EISF", onclick=select(id='main-display-area'
                    ).replaceContent(load(actor='analysis/mdanalysiswizard', routine='selectTrajectory',
                    analysisType='EisfCalc'))),
                    "Elastic Incoherent Structure Factor from md")
                    )
    routines.append(
                    (lc.link(label="S(Q)", onclick=select(id='main-display-area'
                    ).replaceContent(load(actor='analysis/mdanalysiswizard', routine='selectTrajectory',
                    analysisType='SqCalc'))),
                    "Structure Factor from md")
                    )
    routines.append(
                    (lc.link(label="S(Q,E)", onclick=select(id='main-display-area'
                    ).replaceContent(load(actor='analysis/mdanalysiswizard', routine='selectTrajectory',
                    analysisType='SqeCalc'))),              
                    "Dynamic Structure Factor from md.  This is the sum of coherent and incoherent S(Q,E) parts.")
                    )
    routines.append(
                    (lc.link(label="Multiphonon Scattering", onclick=select(id='main-display-area'
                    ).replaceContent(load(actor='analysis/mdanalysiswizard', routine='selectTrajectory',
                    analysisType='MultiScatCalc'))),                                                                               
                    "Add multiphonon scattering to an S(Q,E)")
                    )
    for link,desc in routines:
        qegrid.addRow((link,desc))
    return qegrid.grid()

def createDynamicsAnalysis():
    qegrid = QEGrid(lc.grid(Class="qe-table"))
    routines   = []
    routines.append(
                    (lc.link(label="DOS", onclick=select(id='main-display-area'
                ).replaceContent(load(actor='analysis/mdanalysiswizard', routine='selectTrajectory',
                analysisType='MdDosCalc'))),
                    "Density of States from md")
                    )
    routines.append(
                    (lc.link(label="VACF", onclick=select(id='main-display-area'
                ).replaceContent(load(actor='analysis/mdanalysiswizard', routine='selectTrajectory',
                analysisType='VacfCalc'))),
                    "Velocity Autocorrelation Function from md")
                    )
    routines.append(
                    (lc.link(label="MSD", onclick=select(id='main-display-area'
                ).replaceContent(load(actor='analysis/mdanalysiswizard', routine='selectTrajectory',
                analysisType='MsdCalc'))),
                    "Mean Squared Displacement from md")
                    )
    routines.append(
                    (lc.link(label="Diffusion", onclick=select(id='main-display-area'
                ).replaceContent(load(actor='analysis/mdanalysiswizard', routine='selectTrajectory',
                analysisType='DiffusionCalc'))),
                    "Diffusion coefficient from md")
                    )
    for link,desc in routines:
        qegrid.addRow((link,desc))
    return qegrid.grid()

def createStructureAnalysis():
    qegrid = QEGrid(lc.grid(Class="qe-table"))
    qegrid.setColumnStyle(0, "qe-cell-param")
    routines   = []
    routines.append(
                    (lc.link(label="RDF", onclick=select(id='main-display-area'
                    ).replaceContent(load(actor='analysis/mdanalysiswizard', routine='selectTrajectory',
                    analysisType='RdfCalc'))),   
                    "Radial Distribution Function from md")
                    )
    for link,desc in routines:
        qegrid.addRow((link,desc))
    return qegrid.grid()

def createPhonScatteringAnalysis():
    qegrid = QEGrid(lc.grid(Class="qe-table"))  
    routines   = []
    routines.append(
                    (lc.link(label="S(Q,E)_coh", onclick=select(id='main-display-area'
                    ).replaceContent(load(actor='analysis/analysiswizard', routine='selectTrajectory',
                    analysisType='CsfCalcPhonon'))),
                    "Coherent inelastic scattering from phonons")
                    )
    routines.append(
                    (lc.link(label="S(Q,E)_incoh", onclick=select(id='main-display-area'
                    ).replaceContent(load(actor='analysis/analysiswizard', routine='selectTrajectory',
                    analysisType='IsfCalcPhonon'))),
                    "Incoherent inelastic scattering from phonons")
                    )
    routines.append(
                    (lc.link(label="Multiphonon Scattering", onclick=select(id='main-display-area'
                    ).replaceContent(load(actor='analysis/analysiswizard', routine='selectTrajectory',
                    analysisType='MultiScatCalc'))),                                                                               
                    "Add multiphonon scattering to an S(Q,E)")
                    )
    for link,desc in routines:
        qegrid.addRow((link,desc))
    return qegrid.grid()

def viewIndicator(director):
    path = []
    path.append(('Analysis ', load(actor='analysis', routine='edit')))
    path.append('Create New Analysis')
    
    return director.retrieveVisual('view-indicator', path=path)


__date__ = "$Nov 20, 2009 3:11:39 PM$"


