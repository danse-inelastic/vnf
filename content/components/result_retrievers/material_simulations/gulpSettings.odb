# -*- Python -*-
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
#                      California Institute of Technology
#                        (C) 2008  All Rights Reserved
#
# {LicenseText}
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#

from vnfb.components.ComputationResultRetriever import ComputationResultRetriever as base
class Retriever(base):

    def _retrieveResultsFor(self, computation):
        director = self.director
        db = self.db

        # must have a job
        self.declareProgress(0.1, 'look up job')
        job = computation.getJob(db)

        # check result is available
        self.declareProgress(0.2, 'check if results exist')
        orm = director.clerk.orm
        gulpSettings = orm.record2object(computation)
        runtype = gulpSettings.runtype
        expected_results = gulpSettings.getOutputFiles()  
        self._check_results_sanity(expected_results, job=job)

        # create a phonon dos record to save dos
        self.declareProgress(0.6, """create necessary output data objects 
        (i.e. vibrations, motion, etc.)""")
        if runtype is 'phonons':
            #store the phonons and the dos results
            from vnfb.dom.material_simulations.PhononDOS import PhononDOSTable
            dos = self._make_result_holder(computation, PhononDOSTable)
            dos.matter = computation.matter
            db.updateRecord(dos)
            from vnfb.dom.material_simulations.Phonons import PhononsTable
            phonons = self._make_result_holder(computation, PhononsTable)
            phonons.matter = computation.matter
            db.updateRecord(phonons)
        if runtype is 'molecular dynamics':
            from vnfb.dom.material_simulations.PhononDOS import PhononDOSTable
            dos = self._make_result_holder(computation, PhononDOSTable)
            dos.matter = computation.matter
            db.updateRecord(dos)
            
        # save the result from job to dos
        self.declareProgress(0.9, 'get result from server')
        self._save_result(computation, job, expected_results)
        return


def retriever():
    return Retriever('gulpSettings')


# version
__id__ = "$Id$"

# End of file 
